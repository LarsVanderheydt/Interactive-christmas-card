!function(e){function t(a){if(i[a])return i[a].exports;var r=i[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var i={};t.m=e,t.c=i,t.d=function(e,i,a){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=19)}([function(e,t,i){"use strict";var a={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=a},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=i(0),n=i(4),o=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),s=function(){function e(){a(this,e),this.mesh=new THREE.Object3D,this.mesh.name="Head";var t=new THREE.BoxBufferGeometry(16,16,16),i=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,i),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard);this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.normalize(),this.mesh.position.x=-17}return o(e,[{key:"normalize",value:function(e,t,i,a,r){return a+(Math.max(Math.min(e,i),t)-t)/(i-t)*(r-a)}},{key:"updateReciever",value:function(e,t,i,a,r,n,o,s,h){this.eyeBlueRight.position.x+=(a-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(r-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(n-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(o-this.eyeBlueLeft.position.y)/e,this.eyeBrowRight.position.y+=(s-this.eyeBrowRight.position.y)/e,this.eyeBrowLeft.position.y+=(h-this.eyeBrowLeft.position.y)/e,this.head.rotation.x+=(i-this.head.rotation.x)/e,this.head.rotation.y+=(t-this.head.rotation.y)/e}},{key:"reciever",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.moustache.rotation.z=Math.sin(.005*Date.now())*Math.PI*.05,this.moustache.rotation.z=Math.sin(.005*Date.now())*Math.PI*.02;var i=this.normalize(t,-200,200,-.1,.1),a=this.normalize(e,-200,200,-.1,.1),r=this.normalize(e,-200,200,-.6,.6),n=this.normalize(e,-200,200,-.6,.6),o=this.normalize(t,-200,200,.6,-.6),s=this.normalize(t,-200,200,.6,-.6),h=this.normalize(e,-200,200,-1,.8),d=this.normalize(e,-200,200,-1,.8);this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.updateReciever(10,a,i,r,n,o,s,h,d)}},{key:"updateSender",value:function(e,t,i,a,r,n,o){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(i-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(a-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(r-this.eyeBlueLeft.position.y)/e,this.eyeBrowRight.position.y+=(n-this.eyeBrowRight.position.y)/e,this.eyeBrowLeft.position.y+=(o-this.eyeBrowLeft.position.y)/e}},{key:"sender",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var i=this.normalize(e,-200,200,-.6,.6),a=this.normalize(e,-200,200,-.6,.6),r=this.normalize(t,-200,200,.6,-.6),n=this.normalize(t,-200,200,.6,-.6),o=this.normalize(e,-200,200,-1,.8),s=this.normalize(e,-200,200,-1,.8);this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05+.25,this.updateSender(10,i,a,r,n,o,s)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),a.scale.z=.8,a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=i.clone();r.position.x=-i.position.x,r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=a.clone();o.position.x=-a.position.x,o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,n.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var d=new THREE.BoxGeometry(2.5,14,10);d.vertices[2].z-=2,d.vertices[7].z-=2;var l=new THREE.Mesh(d,n.a.whiteMat);l.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),l.updateMatrix(),e.merge(l.geometry,l.matrix);var u=h.clone();u.position.x=-h.position.x,u.updateMatrix(),e.merge(u.geometry,u.matrix);var c=l.clone();c.position.x=-l.position.x,c.updateMatrix(),e.merge(c.geometry,c.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var y=new THREE.Mesh(p,n.a.whiteMat);y.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),y.updateMatrix(),e.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(4,8,8),w=new THREE.Mesh(f,n.a.whiteMat);w.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),w.updateMatrix(),e.merge(w.geometry,w.matrix);var m=new THREE.Mesh(f,n.a.whiteMat);m.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),m.updateMatrix(),e.merge(m.geometry,m.matrix);var E=new THREE.Mesh(e,n.a.whiteMat);E.castShadow=!0,E.receiveShadow=!0;var v=new THREE.BoxGeometry(10,4,1),M=new THREE.Mesh(v,n.a.blackMat);M.position.set(0,2,8),M.castShadow=!1,M.receiveShadow=!0;var x=new THREE.BoxGeometry(10,1,1),T=new THREE.Mesh(x,n.a.teethMat);T.position.set(0,.5,.1),T.castShadow=!1,T.receiveShadow=!0,M.add(T),this.beard.add(E,M);var R=new THREE.BoxGeometry(14,3,3,3);R.vertices[0].y-=2,R.vertices[1].y-=2,R.vertices[2].y-=2,R.vertices[3].y-=2,R.vertices[4].y-=2,R.vertices[5].y-=2,R.vertices[6].y-=2,R.vertices[7].y-=2,R.vertices[8].x-=1,R.vertices[9].x+=1,R.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(R,n.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:r.a.glasses,flatShading:!0}),t=new THREE.Geometry,i=new THREE.CylinderGeometry(3,3,.5,32),a=new THREE.CylinderGeometry(2.7,2.7,.5,32);i.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var n=new ThreeBSP(i),o=new ThreeBSP(a),s=n.subtract(o),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var d=h.clone();d.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),d.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),d.updateMatrix(),t.merge(d.geometry,d.matrix);var l=new THREE.BoxGeometry(2,.3,.5),u=new THREE.Mesh(l,e);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var c=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(c,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var y=p.clone();y.position.x=-p.position.x,y.updateMatrix(),t.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(1,.5,12),w=new THREE.Mesh(f,e);w.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),w.updateMatrix(),t.merge(w.geometry,w.matrix);var m=w.clone();m.position.x=-w.position.x,m.updateMatrix(),t.merge(m.geometry,m.matrix);var E=new THREE.Mesh(t,e);E.castShadow=!1,E.receiveShadow=!0,this.glasses.add(E)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),i.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=new THREE.Mesh(t,n.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),r.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=new THREE.Mesh(t,n.a.whiteMat);o.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),o.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.Mesh(t,n.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var d=new THREE.Mesh(h,n.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var l=new THREE.Mesh(e,n.a.whiteMat);l.castShadow=!1,l.receiveShadow=!0,this.hair.add(l)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,n.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var i=new THREE.PlaneGeometry(1.5,1.5),a=new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(i,a),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var o=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(o,n.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,n.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(i,a),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(o,n.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:r.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),i=new THREE.CylinderGeometry(1,11,12,15),a=new THREE.CylinderGeometry(.8,3,9,32),o=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,n.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(i,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(a,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(o,n.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.MeshLambertMaterial({color:r.a.freckles,flatShading:!0}),t=new THREE.Geometry,i=new THREE.PlaneGeometry(.5,.5),a=new THREE.Mesh(i,e);a.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),a.updateMatrix(),t.merge(a.geometry,a.matrix);var n=a.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),n.updateMatrix(),t.merge(n.geometry,n.matrix);var o=a.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),o.updateMatrix(),t.merge(o.geometry,o.matrix);var s=a.clone();s.position.x=-a.position.x,s.updateMatrix(),t.merge(s.geometry,s.matrix);var h=n.clone();h.position.x=-n.position.x,h.updateMatrix(),t.merge(h.geometry,h.matrix);var d=o.clone();d.position.x=-o.position.x,d.updateMatrix(),t.merge(d.geometry,d.matrix);var l=new THREE.Mesh(t,e);l.castShadow=!1,l.receiveShadow=!1,this.freckles.add(l)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0}),i=new THREE.Mesh(e,t);i.position.set(-8.5,1,3),i.castShadow=!1,i.receiveShadow=!1;var a=new THREE.Mesh(e,t);a.position.set(8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var n=new THREE.CylinderGeometry(1,2,4,4),o=new THREE.Mesh(n,t);o.scale.set(.75,1,1.3),o.position.set(0,1,8),o.castShadow=!1,o.receiveShadow=!1,this.head.add(i,a,o)}},{key:"remove",value:function(){scene.remove(this.head)}},{key:"createHead",value:function(){this.head=new e,this.head.name="Head",this.head.sender(),scene.add(this.head.mesh)}}]),e}();t.a=s},function(e,t,i){i(5),e.exports=self.fetch.bind(self)},,function(e,t,i){"use strict";var a=i(0),r={whiteMat:new THREE.MeshLambertMaterial({color:a.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:a.a.teeth,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:a.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=r},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function i(e){return"string"!=typeof e&&(e=String(e)),e}function a(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return m.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function n(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function o(e){return new Promise(function(t,i){e.onload=function(){t(e.result)},e.onerror=function(){i(e.error)}})}function s(e){var t=new FileReader,i=o(t);return t.readAsArrayBuffer(e),i}function h(e){var t=new FileReader,i=o(t);return t.readAsText(e),i}function d(e){for(var t=new Uint8Array(e),i=new Array(t.length),a=0;a<t.length;a++)i[a]=String.fromCharCode(t[a]);return i.join("")}function l(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function u(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(m.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(m.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(m.arrayBuffer&&m.blob&&v(e))this._bodyArrayBuffer=l(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!M(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=l(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?n(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(d(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(e){var t=e.toUpperCase();return x.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var i=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,i||null==e._bodyInit||(i=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=c(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function y(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var i=e.split("="),a=i.shift().replace(/\+/g," "),r=i.join("=").replace(/\+/g," ");t.append(decodeURIComponent(a),decodeURIComponent(r))}}),t}function f(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var i=e.split(":"),a=i.shift().trim();if(a){var r=i.join(":").trim();t.append(a,r)}}),t}function w(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var m={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(m.arrayBuffer)var E=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],v=function(e){return e&&DataView.prototype.isPrototypeOf(e)},M=ArrayBuffer.isView||function(e){return e&&E.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,a){e=t(e),a=i(a);var r=this.map[e];this.map[e]=r?r+","+a:a},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,a){this.map[t(e)]=i(a)},r.prototype.forEach=function(e,t){for(var i in this.map)this.map.hasOwnProperty(i)&&e.call(t,this.map[i],i,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,i){e.push(i)}),a(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),a(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,i){e.push([i,t])}),a(e)},m.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var x=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},u.call(p.prototype),u.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var T=[301,302,303,307,308];w.redirect=function(e,t){if(-1===T.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=p,e.Response=w,e.fetch=function(e,t){return new Promise(function(i,a){var r=new p(e,t),n=new XMLHttpRequest;n.onload=function(){var e={status:n.status,statusText:n.statusText,headers:f(n.getAllResponseHeaders()||"")};e.url="responseURL"in n?n.responseURL:e.headers.get("X-Request-URL");var t="response"in n?n.response:n.responseText;i(new w(t,e))},n.onerror=function(){a(new TypeError("Network request failed"))},n.ontimeout=function(){a(new TypeError("Network request failed"))},n.open(r.method,r.url,!0),"include"===r.credentials&&(n.withCredentials=!0),"responseType"in n&&m.blob&&(n.responseType="blob"),r.headers.forEach(function(e,t){n.setRequestHeader(t,e)}),n.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,i){"use strict";var a=i(2),r=i.n(a),n="/api/cards";t.a={create:function(e){var t=e.text,i=e.id,a=e.from,o=(e.blob,e.to),s=e.audioSettings,h=e.headColors,d=new FormData;return d.append("text",t),d.append("id",i),d.append("from",a),d.append("to",o),d.append("audioSettings",s),d.append("headColors",h),r()(n,{method:"POST",body:d}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})},update:function(e){var t=e.text,i=e.id,a=e.from,o=e.to,s=e.audioSettings,h=e.headColors,d=new FormData;return d.append("text",t),d.append("id",i),d.append("from",a),d.append("to",o),d.append("audioSettings",s),d.append("headColors",h),r()(n+"/"+i,{method:"PUT",body:d}).then(function(e){return e.json()})}}},,,,,,,,,,,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(20),r=i(25),n=i(22),o=i(6),s=(window.AudioContext||window.webkitAudioContext,void 0),h=void 0,d=function e(){h.loop(),requestAnimationFrame(e)};!function(){particlesJS.load("particles-js","../assets/particles.json"),s=Object(n.a)("id"),s||(window.location="https://experimentalweb.herokuapp.com/"),o.a.readOne(s).then(function(e){e.statusCode&&(window.location="https://experimentalweb.herokuapp.com/"),document.getElementById("from").innerHTML=""+e.from,document.getElementById("to").innerHTML=""+e.to,document.getElementById("message").innerHTML=""+e.text,h=new r.a,h.setColors(e),Object(a.a)(e),d()})}()},function(e,t,i){"use strict";var a=(i(1),window.AudioContext||window.webkitAudioContext),r=void 0,n=(document.getElementById("play_santa"),document.getElementById("audio")),o=void 0,s=!1,h=1,d=.5,l=function(e){r=new a;var t=JSON.parse(e.audioSettings);setTimeout(function(){new BufferLoader(r,["./uploads/"+e.id+".ogg"],function(e){var i=!1,a=void 0,l=document.getElementById("repeat");l.addEventListener("click",function(){l.style.backgroundColor=i?"rgba(113, 0, 24, 0.4)":"rgba(150, 0, 39, 1)",i=!i,s&&a.stop()}),h=t.pitch,d=t.overlap,n.addEventListener("click",function(){s=!0,a="",a=r.createBufferSource(),a.buffer=e[0],a.loop=i,a.connect(o),a.start()})}).load(),c()},1e3)},u=function(e,t,i){return e+(t-e)*i},c=function(){o&&o.disconnect(),r.createScriptProcessor?o=r.createScriptProcessor(512,1,1):r.createJavaScriptNode&&(o=r.createJavaScriptNode(512,1,1)),o.buffer=new Float32Array(1024),o.grainWindow=p(512),o.onaudioprocess=function(e){var t=e.inputBuffer.getChannelData(0),i=e.outputBuffer.getChannelData(0);for(r=0;r<t.length;r++)t[r]*=this.grainWindow[r],this.buffer[r]=this.buffer[r+512],this.buffer[r+512]=0;for(var a=new Float32Array(1024),r=0,n=0;r<512;r++,n+=h){var o=Math.floor(n)%512,s=t[o],l=t[(o+1)%512];a[r]+=u(s,l,n%1)*this.grainWindow[r]}for(r=0;r<512;r+=Math.round(512*(1-d)))for(n=0;n<=512;n++)this.buffer[r+n]+=a[n];for(r=0;r<512;r++)i[r]=this.buffer[r]},o.connect(r.destination)},p=function(e){for(var t=new Float32Array(e),i=0;i<e;i++)t[i]=.5*(1-Math.cos(2*Math.PI*i/(e-1)));return t};t.a=l},,function(e,t,i){"use strict";var a=function(e){e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var t=new RegExp("[\\?&]"+e+"=([^&#]*)"),i=t.exec(location.search);return null!==i&&decodeURIComponent(i[1].replace(/\+/g," "))};t.a=a},,,function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=i(1),n=i(0),o=i(26),s=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),h=void 0,d=void 0,l=void 0,u=void 0,c=void 0,p=void 0,y=void 0,f=void 0,w=void 0,m=void 0,E=void 0,v=void 0,M=void 0,x=void 0,T=void 0,R=void 0,b=void 0,g={x:0,y:0},H=!1,B=(new THREE.LoadingManager,/iPhone|Android/i.test(navigator.userAgent)),S=function(){function e(){a(this,e),this.createScene(),this.createLights(),x=new r.a,h.add(x.mesh),window.scene=h}return s(e,[{key:"createShapes",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"hearts";b=new o.a(e),h.add(b.mesh)}},{key:"startSpinning",value:function(){b.spinScale()}},{key:"setColors",value:function(e){var t=JSON.parse(e.headColors);n.a.skin=t.skin,n.a.freckles=t.freckles,n.a.eye=t.eye,n.a.glasses=t.glasses,n.a.hat=t.hat,this.createHead()}},{key:"errorText",value:function(){var e=new THREE.FontLoader,t=new THREE.Object3D;e.load("/assets/helvetiker_bold.typeface.json",function(e){var i=new THREE.MeshLambertMaterial({color:15330286,flatShading:!0}),a={font:e,size:4,height:2,curveSegments:12,bevelEnabled:!1},r=new THREE.TextGeometry("404 Santa",a),n=new THREE.TextGeometry("went missing",a),o=new THREE.Mesh(r,i),s=new THREE.Mesh(n,i);t.add(o),t.add(s),o.position.y=5,o.position.x=4,t.position.y=-4,t.rotation.y=-.3,h.add(t)})}},{key:"createScene",value:function(){y=window.innerHeight,f=window.innerWidth,T=f/2,R=y/2,h=new THREE.Scene,u=f/y,l=50,c=1,p=2e3,d=new THREE.PerspectiveCamera(l,u,c,p),d.position.x=0,d.position.z=70,d.position.y=-5,v=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),v.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),v.setSize(f,y),v.shadowMap.enabled=!0,v.shadowMap.type=THREE.PCFSoftShadowMap,M=document.getElementById("container"),M.appendChild(v.domElement),window.addEventListener("resize",this.onWindowResize,!1),document.addEventListener("mousemove",this.handleMouseMove,!1)}},{key:"onWindowResize",value:function(){y=window.innerHeight,f=window.innerWidth/1.67,T=f/2,R=y/2,v.setSize(f,y),d.aspect=f/y,d.updateProjectionMatrix()}},{key:"handleMouseMove",value:function(e){g={x:event.clientX,y:event.clientY}}},{key:"handleWindowResize",value:function(e){y=window.innerHeight,f=window.innerWidth,v.setSize(f,y),d.aspect=f/y,d.updateProjectionMatrix()}},{key:"createLights",value:function(){w=new THREE.HemisphereLight(16777215,5592405,.9),m=new THREE.DirectionalLight(16777215,.3),m.position.set(100,250,175),m.castShadow=!0,E=new THREE.DirectionalLight(16777215,.2),E.position.set(-100,200,150),E.castShadow=!0,B&&(m.shadow.mapSize.width=m.shadow.mapSize.height=1024),B||(m.shadow.mapSize.width=m.shadow.mapSize.height=2048),h.add(w),h.add(m),h.add(E),h.add(new THREE.AmbientLight(15392429,.1))}},{key:"blinkLoop",value:function(){!(H=!1)&&Math.random()>.99&&(H=!0,this.blink())}},{key:"blink",value:function(){x.eyes.scale.y=1,TweenMax.to(x.eyes.scale,.07,{y:0,yoyo:!0,repeat:1,onComplete:function(){H=!1}})}},{key:"createHead",value:function(){h.remove(x.mesh),x.name="Head",x=new r.a,h.add(x.mesh)}},{key:"loop",value:function(){var e=g.x-T,t=g.y-R;this.blinkLoop(),x.sender(e,t),v.render(h,d)}}]),e}();t.a=S},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=(i(0),i(27)),n=i(28),o=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),s=[],h=function(){function e(t){a(this,e),this.mesh=new THREE.Object3D,this.nStars=15;for(var i=2*Math.PI/this.nStars,o=0;o<this.nStars;o++){switch(t){case"stars":this.s=new r.a;break;case"hearts":this.s=new n.a}var h=i*o;this.s.mesh.position.y=15*Math.sin(h),this.s.mesh.position.x=15*Math.cos(h),this.s.mesh.rotation.z=h+Math.PI/2,this.s.mesh.position.z=0-3*Math.random();var d=.5+.6*Math.random();this.s.mesh.scale.set(d,d,d),this.mesh.add(this.s.mesh),s.push(this.s)}this.mesh.rotation.x=Math.PI/2,this.mesh.position.x=-17,this.mesh.position.y=8}return o(e,[{key:"spinScale",value:function(){this.mesh.rotation.z+=.02;for(var e=0;e<s.length;e++)s[e].mesh.rotation.z+=0-.15*Math.random(),s[e].mesh.rotation.x+=0-.05*Math.random()}}]),e}();t.a=h},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=i(0),n=function e(){a(this,e),this.mesh=new THREE.Object3D;for(var t=[],i=0;i<10;i++){var n=i%2==1?1:2,o=i/5*Math.PI;t.push(new THREE.Vector2(Math.cos(o)*n,Math.sin(o)*n))}var s=new THREE.Shape(t),h={amount:.5,steps:1,bevelEnabled:!1},d=new THREE.ExtrudeGeometry(s,h),l=new THREE.MeshLambertMaterial({color:r.a.black,flatShading:!0}),u=new THREE.Mesh(d,l);u.rotation.x=Math.PI/2,this.mesh.add(u)};t.a=n},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),n=function(){function e(){a(this,e),this.mesh=new THREE.Object3D;var t=new THREE.Shape;t.moveTo(25,25),t.bezierCurveTo(25,25,20,0,0,0),t.bezierCurveTo(-30,0,-30,35,-30,35),t.bezierCurveTo(-30,55,-10,77,25,95),t.bezierCurveTo(60,77,80,55,80,35),t.bezierCurveTo(80,35,80,0,50,0),t.bezierCurveTo(35,0,25,25,25,25);var i={amount:20,bevelEnabled:!0,bevelSegments:2,steps:2,bevelSize:1,bevelThickness:1};this.addShape(t,i,16368673,0,0,0,0,1,Math.PI,.03)}return r(e,[{key:"addShape",value:function(e,t,i,a,r,n,o,s,h,d){var l=new THREE.ExtrudeGeometry(e,t),u=new THREE.Mesh(l,new THREE.MeshPhongMaterial({color:i}));u.position.set(a,r,n),u.rotation.set(o,s,h),u.scale.set(d,d,d),this.mesh.add(u)}}]),e}();t.a=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvc2FudGEuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDMyOGU0N2NkYmM5N2UzMGQ5MTAzIiwid2VicGFjazovLy8uL3NyYy9qcy9vYmplY3RzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9IZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc29tb3JwaGljLWZldGNoL2ZldGNoLW5wbS1icm93c2VyaWZ5LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9vYmplY3RzL01hdGVyaWFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9saWIvY2FyZEFQSS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc2FudGFTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL29iamVjdHMvaGFuZGxlU2FudGFBdWRpby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvb2JqZWN0cy9nZXRVcmxQYXJhbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NsYXNzZXMvU2FudGFTY2VuZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9IZWFydHNHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9TdGFyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jbGFzc2VzL0hlYXJ0LmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQ29sb3JzIiwic2tpbiIsImZyZWNrbGVzIiwid2hpdGUiLCJnbGFzc2VzIiwidGVldGgiLCJibGFjayIsImV5ZSIsImhhdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJIZWFkIiwidGhpcyIsIm1lc2giLCJUSFJFRSIsIk9iamVjdDNEIiwiaGVhZEdlb20iLCJCb3hCdWZmZXJHZW9tZXRyeSIsInNraW5NYXQiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiY29sb3IiLCJmbGF0U2hhZGluZyIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiaGVhZCIsIk1lc2giLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsImFkZCIsImJlYXJkIiwicG9zaXRpb24iLCJ5IiwieiIsIkJlYXJkIiwiR2xhc3NlcyIsIkhhaXIiLCJFeWVzIiwiRXllQnJvd3MiLCJIYXQiLCJGcmVja2xlcyIsIkZlYXR1cmVzIiwibm9ybWFsaXplIiwieCIsInZhbHVlIiwidiIsInZtaW4iLCJ2bWF4IiwidG1pbiIsInRtYXgiLCJNYXRoIiwibWF4IiwibWluIiwic3BlZWQiLCJoZWFkUG9zWSIsImhlYWRQb3NYIiwiZXllQmx1ZVJpZ2h0UG9zWCIsImV5ZUJsdWVMZWZ0UG9zWCIsImV5ZUJsdWVSaWdodFBvc1kiLCJleWVCbHVlTGVmdFBvc1kiLCJleWVCcm93UmlnaHRQb3NZIiwiZXllQnJvd0xlZnRQb3NZIiwiZXllQmx1ZVJpZ2h0IiwiZXllQmx1ZUxlZnQiLCJleWVCcm93UmlnaHQiLCJleWVCcm93TGVmdCIsInJvdGF0aW9uIiwieFRhcmdldCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInlUYXJnZXQiLCJtb3VzdGFjaGUiLCJzaW4iLCJEYXRlIiwibm93IiwiUEkiLCJjb3MiLCJ1cGRhdGVSZWNpZXZlciIsInVwZGF0ZVNlbmRlciIsImJlYXJkR2VvbU1lcmdlZCIsIkdlb21ldHJ5IiwiYmVhcmQxR2VvbSIsIkJveEdlb21ldHJ5IiwiYmVhcmQxIiwid2hpdGVNYXQiLCJhcHBseU1hdHJpeCIsIk1hdHJpeDQiLCJtYWtlVHJhbnNsYXRpb24iLCJ1cGRhdGVNYXRyaXgiLCJtZXJnZSIsImdlb21ldHJ5IiwibWF0cml4IiwiYmVhcmQyIiwic2NhbGUiLCJiZWFyZDMiLCJjbG9uZSIsImJlYXJkNCIsImJlYXJkMkdlb20iLCJ2ZXJ0aWNlcyIsImJlYXJkNSIsImJlYXJkM0dlb20iLCJiZWFyZDYiLCJiZWFyZDciLCJiZWFyZDgiLCJiZWFyZDRHZW9tIiwiYmVhcmQ5IiwiYmVhcmQ1R2VvbSIsImJlYXJkMTAiLCJiZWFyZDExIiwiYmVhcmRNZXJnZWQiLCJtb3V0aEdlb20iLCJtb3V0aCIsImJsYWNrTWF0Iiwic2V0IiwidGVldGhHZW9tIiwidGVldGhNYXQiLCJtb3VzdGFjaGVHZW9tIiwiZ2xhc3Nlc01hdCIsImZyYW1lR2VvbU1lcmdlZCIsImZyYW1lT3V0ZXJHZW9tIiwiQ3lsaW5kZXJHZW9tZXRyeSIsImZyYW1lSW5uZXJHZW9tIiwibWFrZVJvdGF0aW9uWCIsImZyYW1lQlNQIiwiVGhyZWVCU1AiLCJmcmFtZUN1dEJTUCIsImZyYW1laW50ZXJzZWN0aW9uQlNQIiwic3VidHJhY3QiLCJmcmFtZUxlZnQiLCJ0b01lc2giLCJmcmFtZVJpZ2h0IiwibWFrZVJvdGF0aW9uWiIsImZyYW1lTWlkR2VvbSIsImZyYW1lTWlkIiwiZnJhbWVFbmRHZW9tIiwiZnJhbWVFbmRSaWdodCIsImZyYW1lRW5kTGVmdCIsImZyYW1lU3Bva2VHZW9tIiwiZnJhbWVTcG9rZVJpZ2h0IiwiZnJhbWVTcG9rZUxlZnQiLCJmcmFtZU1lcmdlZCIsImhhaXIiLCJoYWlyR2VvbU1lcmdlZCIsImhhaXJGbGF0R2VvbSIsImhhaXIxIiwiaGFpcjIiLCJoYWlyMyIsImhhaXI0IiwiaGFpcjYiLCJoYWlyRmxhdEJhY2tHZW9tIiwiaGFpcjUiLCJoYWlyTWVyZ2VkIiwiZXllcyIsImV5ZVdoaXRlR2VvbSIsIlBsYW5lR2VvbWV0cnkiLCJleWVXaGl0ZVJpZ2h0IiwiZXllQmx1ZUdlb20iLCJleWVNYXQiLCJleWVQdXBpbEdlb20iLCJleWVQdXBpbFJpZ2h0IiwiZXllV2hpdGVMZWZ0IiwiZXllUHVwaWxMZWZ0IiwiZXllQnJvd3MiLCJleWVCcm93R2VvbSIsImhhdE1hdCIsImJhbmRHZW9tIiwiVG9ydXNHZW9tZXRyeSIsImJpZ0NvbmVHZW9tIiwic21hbGxDb25lR2VvbSIsImhhdERpbmdsZUdlb20iLCJTcGhlcmVHZW9tZXRyeSIsImJhbmQiLCJiaWdDb25lIiwic21hbGxDb25lIiwibWFrZVJvdGF0aW9uWSIsImhhdERpbmdsZSIsImZyZWNrbGVzTWF0IiwiZnJlY2tsZXNHZW9tTWVyZ2VkIiwiZnJlY2tsZXNHZW9tIiwiZnJlY2tsZTEiLCJmcmVja2xlMiIsImZyZWNrbGUzIiwiZnJlY2tsZTQiLCJmcmVja2xlNSIsImZyZWNrbGU2IiwiZnJlY2tsZWRNZXJnZWQiLCJlYXJHZW9tIiwiZWFyUmlnaHQiLCJlYXJMZWZ0Iiwibm9zZUdlb20iLCJub3NlIiwic2NlbmUiLCJyZW1vdmUiLCJzZW5kZXIiLCJzZWxmIiwiZmV0Y2giLCJiaW5kIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19jb2xvcnNfXyIsIk1hdGVyaWFscyIsIm5vcm1hbE1hdCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJzdXBwb3J0IiwiaXRlcmFibGUiLCJTeW1ib2wiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImZvckVhY2giLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJQcm9taXNlIiwicmVqZWN0IiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVzb2x2ZSIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJidWZmZXJDbG9uZSIsInNsaWNlIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJCbG9iIiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyVmlldyIsIkVycm9yIiwidHlwZSIsInJlamVjdGVkIiwidGhlbiIsInRleHQiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwibm9ybWFsaXplTWV0aG9kIiwibWV0aG9kIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwibWV0aG9kcyIsImluZGV4T2YiLCJSZXF1ZXN0IiwiaW5wdXQiLCJvcHRpb25zIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsImxpbmUiLCJwYXJ0cyIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJvayIsInN0YXR1c1RleHQiLCJlIiwidmlld0NsYXNzZXMiLCJvYmoiLCJEYXRhVmlldyIsImlzVmlldyIsIm9sZFZhbHVlIiwiaGFzIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwia2V5cyIsInB1c2giLCJ2YWx1ZXMiLCJlbnRyaWVzIiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJpbml0IiwicmVxdWVzdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwb2x5ZmlsbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fX2RlZmF1bHQiLCJjcmVhdGUiLCJfcmVmIiwiaWQiLCJmcm9tIiwidG8iLCJhdWRpb1NldHRpbmdzIiwiaGVhZENvbG9ycyIsInIiLCJyZWFkIiwicmVhZE9uZSIsInVwZGF0ZSIsIl9yZWYyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2hhbmRsZVNhbnRhQXVkaW9fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fY2xhc3Nlc19TYW50YVNjZW5lX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX29iamVjdHNfZ2V0VXJsUGFyYW1ldGVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2xpYl9jYXJkQVBJX18iLCJ0YXJnZXRJZCIsIndpbmRvdyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsInNhbnRhIiwibG9vcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBhcnRpY2xlc0pTIiwibG9hZCIsInN0YXR1c0NvZGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwic2V0Q29sb3JzIiwiYXVkaW9DdHgiLCIkYXVkaW8iLCJwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IiLCJpc1BsYXlpbmciLCJwaXRjaFJhdGlvIiwib3ZlcmxhcFJhdGlvIiwiaGFuZGxlU2FudGFBdWRpbyIsImNhcnQiLCJzZXRUaW1lb3V0IiwiQnVmZmVyTG9hZGVyIiwiYnVmZmVyTGlzdCIsInNvdXJjZSIsIiRyZXBlYXQiLCJhZGRFdmVudExpc3RlbmVyIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdG9wIiwicGl0Y2giLCJvdmVybGFwIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiY29ubmVjdCIsInN0YXJ0IiwiaW5pdFByb2Nlc3NvciIsImxpbmVhckludGVycG9sYXRpb24iLCJhIiwiYiIsInQiLCJkaXNjb25uZWN0IiwiY3JlYXRlU2NyaXB0UHJvY2Vzc29yIiwiY3JlYXRlSmF2YVNjcmlwdE5vZGUiLCJGbG9hdDMyQXJyYXkiLCJncmFpblNpemUiLCJncmFpbldpbmRvdyIsImhhbm5XaW5kb3ciLCJvbmF1ZGlvcHJvY2VzcyIsImV2ZW50IiwiaW5wdXREYXRhIiwiaW5wdXRCdWZmZXIiLCJnZXRDaGFubmVsRGF0YSIsIm91dHB1dERhdGEiLCJvdXRwdXRCdWZmZXIiLCJncmFpbkRhdGEiLCJqIiwiaW5kZXgiLCJmbG9vciIsInJvdW5kIiwiZGVzdGluYXRpb24iLCJnZXRVcmxQYXJhbWV0ZXIiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VhcmNoIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19IZWFkX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfY29sb3JzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX0hlYXJ0c0dyb3VwX18iLCJjYW1lcmEiLCJmaWVsZE9mVmlldyIsImFzcGVjdFJhdGlvIiwibmVhclBsYW5lIiwiZmFyUGxhbmUiLCJIRUlHSFQiLCJXSURUSCIsImdsb2JhbExpZ2h0Iiwic2hhZG93TGlnaHQiLCJiYWNrTGlnaHQiLCJyZW5kZXJlciIsImNvbnRhaW5lciIsIndpbmRvd0hhbGZYIiwid2luZG93SGFsZlkiLCJzcGlubmluZ1NoYXBlcyIsIm1vdXNlUG9zIiwiaXNCbGlua2luZyIsImlzTW9iaWxlIiwiTG9hZGluZ01hbmFnZXIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJTYW50YVNjZW5lIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVMaWdodHMiLCJzcGluU2NhbGUiLCJkYXRhIiwiY3JlYXRlSGVhZCIsImxvYWRlciIsIkZvbnRMb2FkZXIiLCJmb250IiwiZm9udFNldHRpbmdzIiwic2l6ZSIsImhlaWdodCIsImN1cnZlU2VnbWVudHMiLCJiZXZlbEVuYWJsZWQiLCJmaXJzdEdlb20iLCJUZXh0R2VvbWV0cnkiLCJzZWNvbmRHZW9tIiwiZmlyc3QiLCJzZWNvbmQiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJTY2VuZSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiV2ViR0xSZW5kZXJlciIsImFscGhhIiwiYW50aWFsaWFzIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzZXRTaXplIiwic2hhZG93TWFwIiwiZW5hYmxlZCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJvbldpbmRvd1Jlc2l6ZSIsImhhbmRsZU1vdXNlTW92ZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJjbGllbnRYIiwiY2xpZW50WSIsIkhlbWlzcGhlcmVMaWdodCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJzaGFkb3ciLCJtYXBTaXplIiwid2lkdGgiLCJBbWJpZW50TGlnaHQiLCJyYW5kb20iLCJibGluayIsIlR3ZWVuTWF4IiwieW95byIsInJlcGVhdCIsIm9uQ29tcGxldGUiLCJibGlua0xvb3AiLCJyZW5kZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1N0YXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fSGVhcnRfXyIsInN0YXJBcnJheSIsIkhlYXJ0c0dyb3VwIiwiblN0YXJzIiwic3RlcEFuZ2xlIiwic2MiLCJTdGFyIiwicHRzIiwibnVtUHRzIiwiVmVjdG9yMiIsInN0YXJTaGFwZSIsIlNoYXBlIiwiZXh0cnVkZVNldHRpbmdzIiwiYW1vdW50Iiwic3RlcHMiLCJzdGFyR2VvbSIsIkV4dHJ1ZGVHZW9tZXRyeSIsIm1hdCIsInN0YXIiLCJIZWFydCIsImhlYXJ0U2hhcGUiLCJtb3ZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiYmV2ZWxTZWdtZW50cyIsImJldmVsU2l6ZSIsImJldmVsVGhpY2tuZXNzIiwiYWRkU2hhcGUiLCJzaGFwZSIsInJ4IiwicnkiLCJyeiJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0E0QkFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsU0FBQVAsRUFBQVEsRUFBQUMs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U0FBVSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUduZCxLQUFLeUIsR0FBSSxLZGkwRC9FLE1BZkF4RSxHQUFheWdCLElBQ1hsZ0IsSUFBSyxXQUNMa0MsTUFBTyxTY2h6REF3ZSxFQUFPZixFQUFpQi9lLEVBQU9xQixFQUFHWCxFQUFHQyxFQUFHb2YsRUFBSUMsRUFBSUMsRUFBSXJpQixHQUczRCxHQUFNd0csR0FBVyxHQUFJMUUsT0FBTXlmLGdCQUFnQlcsRUFBT2YsR0FFNUN0ZixFQUFPLEdBQUlDLE9BQU1VLEtBQUtnRSxFQUFVLEdBQUkxRSxPQUFNUSxtQkFBbUJGLE1BQU9BLElBQzFFUCxHQUFLZ0IsU0FBU2tGLElBQUl0RSxFQUFHWCxFQUFHQyxHQUN4QmxCLEVBQUttRCxTQUFTK0MsSUFBSW9hLEVBQUlDLEVBQUlDLEdBQzFCeGdCLEVBQUs4RSxNQUFNb0IsSUFBSS9ILEVBQUdBLEVBQUdBLEdBQ3JCNEIsS0FBS0MsS0FBS2MsSUFBSWQsT2RvekRUNmYsSWNoekRUemhCLEdBQUEiLCJmaWxlIjoianMvc2FudGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBDb2xvcnMgPSB7XG4gIHNraW46IDB4ZmZlMGJkLFxuICBmcmVja2xlczogMHhjZmJhOTYsXG4gIHdoaXRlOiAweGU5ZWJlZSxcbiAgZ2xhc3NlczogMHhmOWM0MjEsXG4gIHRlZXRoOiAweGZmZmZmZixcbiAgYmxhY2s6IDB4MmUyZTJlLFxuICBleWU6IDB4NjI5NWE4LFxuICBoYXQ6IDB4NzIwMzE0XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChDb2xvcnMpO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXG5cblxudmFyIGlzQmxpbmtpbmcgPSBmYWxzZTtcblxudmFyIEhlYWQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhlYWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWQpO1xuXG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5tZXNoLm5hbWUgPSBcIkhlYWRcIjtcblxuICAgIHZhciBoZWFkR2VvbSA9IG5ldyBUSFJFRS5Cb3hCdWZmZXJHZW9tZXRyeSgxNiwgMTYsIDE2KTtcbiAgICB2YXIgc2tpbk1hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5za2luLCBmbGF0U2hhZGluZzogdHJ1ZSB9KTtcbiAgICB2YXIgZXllTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5leWUsIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5oZWFkID0gbmV3IFRIUkVFLk1lc2goaGVhZEdlb20sIHNraW5NYXQpO1xuICAgIHRoaXMuaGVhZC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICB0aGlzLmhlYWQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMubWVzaC5hZGQodGhpcy5oZWFkKTtcblxuICAgIHRoaXMuYmVhcmQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmJlYXJkLnBvc2l0aW9uLnkgPSAtNztcbiAgICB0aGlzLmJlYXJkLnBvc2l0aW9uLnogPSAwLjU7XG4gICAgdGhpcy5oZWFkLmFkZCh0aGlzLmJlYXJkKTtcbiAgICB2YXIgc3RhcnMgPSB2b2lkIDA7XG5cbiAgICB0aGlzLkJlYXJkKCk7XG4gICAgdGhpcy5HbGFzc2VzKCk7XG4gICAgdGhpcy5IYWlyKCk7XG4gICAgdGhpcy5FeWVzKCk7XG4gICAgdGhpcy5FeWVCcm93cygpO1xuICAgIHRoaXMuSGF0KCk7XG4gICAgdGhpcy5GcmVja2xlcygpO1xuICAgIHRoaXMuRmVhdHVyZXMoKTtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtMTc7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGVhZCwgW3tcbiAgICBrZXk6ICdub3JtYWxpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemUodiwgdm1pbiwgdm1heCwgdG1pbiwgdG1heCkge1xuICAgICAgdmFyIG52ID0gTWF0aC5tYXgoTWF0aC5taW4odiwgdm1heCksIHZtaW4pO1xuICAgICAgdmFyIGR2ID0gdm1heCAtIHZtaW47XG4gICAgICB2YXIgcGMgPSAobnYgLSB2bWluKSAvIGR2O1xuICAgICAgdmFyIGR0ID0gdG1heCAtIHRtaW47XG4gICAgICB2YXIgdHYgPSB0bWluICsgcGMgKiBkdDtcbiAgICAgIHJldHVybiB0djtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVSZWNpZXZlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVJlY2lldmVyKHNwZWVkLCBoZWFkUG9zWSwgaGVhZFBvc1gsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZLCBleWVCcm93UmlnaHRQb3NZLCBleWVCcm93TGVmdFBvc1kpIHtcbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnggKz0gKGV5ZUJsdWVSaWdodFBvc1ggLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi54ICs9IChleWVCbHVlTGVmdFBvc1ggLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLngpIC8gc3BlZWQ7XG5cbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJsdWVSaWdodFBvc1kgLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55ICs9IChleWVCbHVlTGVmdFBvc1kgLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG5cbiAgICAgIHRoaXMuZXllQnJvd1JpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJyb3dSaWdodFBvc1kgLSB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCcm93TGVmdC5wb3NpdGlvbi55ICs9IChleWVCcm93TGVmdFBvc1kgLSB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgICB0aGlzLmhlYWQucm90YXRpb24ueCArPSAoaGVhZFBvc1ggLSB0aGlzLmhlYWQucm90YXRpb24ueCkgLyBzcGVlZDtcbiAgICAgIHRoaXMuaGVhZC5yb3RhdGlvbi55ICs9IChoZWFkUG9zWSAtIHRoaXMuaGVhZC5yb3RhdGlvbi55KSAvIHNwZWVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlY2lldmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjaWV2ZXIoKSB7XG4gICAgICB2YXIgeFRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciB5VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG5cbiAgICAgIHZhciBkaXN0YW5jZSA9IDE7XG5cbiAgICAgIHRoaXMubW91c3RhY2hlLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDU7XG4gICAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIE1hdGguUEkgKiAwLjAyO1xuXG4gICAgICB2YXIgaGVhZFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh5VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjEsIDAuMSk7XG4gICAgICB2YXIgaGVhZFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjEsIDAuMSk7XG5cbiAgICAgIHZhciBleWVCbHVlUmlnaHRQb3NYID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMC42LCAwLjYpO1xuICAgICAgdmFyIGV5ZUJsdWVMZWZ0UG9zWCA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTAuNiwgMC42KTtcblxuICAgICAgdmFyIGV5ZUJsdWVSaWdodFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh5VGFyZ2V0LCAtMjAwLCAyMDAsIDAuNiwgLTAuNik7XG4gICAgICB2YXIgZXllQmx1ZUxlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgICB2YXIgZXllQnJvd1JpZ2h0UG9zWSA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTEsIDAuOCk7XG4gICAgICB2YXIgZXllQnJvd0xlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMSwgMC44KTtcblxuICAgICAgdGhpcy5tb3VzdGFjaGUucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAxKSAqIGRpc3RhbmNlIC8gNDtcbiAgICAgIHRoaXMubW91c3RhY2hlLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMSkgKiBNYXRoLlBJICogMC4wMTtcblxuICAgICAgdGhpcy51cGRhdGVSZWNpZXZlcigxMCwgaGVhZFBvc1ksIGhlYWRQb3NYLCBleWVCbHVlUmlnaHRQb3NYLCBleWVCbHVlTGVmdFBvc1gsIGV5ZUJsdWVSaWdodFBvc1ksIGV5ZUJsdWVMZWZ0UG9zWSwgZXllQnJvd1JpZ2h0UG9zWSwgZXllQnJvd0xlZnRQb3NZKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVTZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZW5kZXIoc3BlZWQsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZLCBleWVCcm93UmlnaHRQb3NZLCBleWVCcm93TGVmdFBvc1kpIHtcbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnggKz0gKGV5ZUJsdWVSaWdodFBvc1ggLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi54ICs9IChleWVCbHVlTGVmdFBvc1ggLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLngpIC8gc3BlZWQ7XG5cbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJsdWVSaWdodFBvc1kgLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55ICs9IChleWVCbHVlTGVmdFBvc1kgLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG5cbiAgICAgIHRoaXMuZXllQnJvd1JpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJyb3dSaWdodFBvc1kgLSB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgICAgdGhpcy5leWVCcm93TGVmdC5wb3NpdGlvbi55ICs9IChleWVCcm93TGVmdFBvc1kgLSB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZGVyKCkge1xuICAgICAgdmFyIHhUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgeVRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIGRpc3RhbmNlID0gMTtcblxuICAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDA1O1xuICAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDQpICogTWF0aC5QSSAqIDAuMDM7XG5cbiAgICAgIHZhciBleWVCbHVlUmlnaHRQb3NYID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMC42LCAwLjYpO1xuICAgICAgdmFyIGV5ZUJsdWVMZWZ0UG9zWCA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTAuNiwgMC42KTtcblxuICAgICAgdmFyIGV5ZUJsdWVSaWdodFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh5VGFyZ2V0LCAtMjAwLCAyMDAsIDAuNiwgLTAuNik7XG4gICAgICB2YXIgZXllQmx1ZUxlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgICB2YXIgZXllQnJvd1JpZ2h0UG9zWSA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTEsIDAuOCk7XG4gICAgICB2YXIgZXllQnJvd0xlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMSwgMC44KTtcblxuICAgICAgdGhpcy5tb3VzdGFjaGUucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAxKSAqIGRpc3RhbmNlIC8gNDtcbiAgICAgIHRoaXMubW91c3RhY2hlLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMSkgKiBNYXRoLlBJICogMC4wMTtcblxuICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnkgPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDIpICogTWF0aC5QSSAqIDAuMDUgKyAwLjI1O1xuICAgICAgdGhpcy51cGRhdGVTZW5kZXIoMTAsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZLCBleWVCcm93UmlnaHRQb3NZLCBleWVCcm93TGVmdFBvc1kpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0JlYXJkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gQmVhcmQoKSB7XG4gICAgICB2YXIgYmVhcmRHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICAgIHZhciBiZWFyZDFHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDIsIDEwLCAxNik7XG5cbiAgICAgIHZhciBiZWFyZDEgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDFHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmQxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDksIDAsIDApKTtcbiAgICAgIGJlYXJkMS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDEuZ2VvbWV0cnksIGJlYXJkMS5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQyID0gbmV3IFRIUkVFLk1lc2goYmVhcmQxR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGJlYXJkMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig3LCAtMiwgMikpO1xuICAgICAgYmVhcmQyLnNjYWxlLnogPSAwLjg7XG4gICAgICBiZWFyZDIudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQyLmdlb21ldHJ5LCBiZWFyZDIubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkMyA9IGJlYXJkMS5jbG9uZSgpO1xuICAgICAgYmVhcmQzLnBvc2l0aW9uLnggPSAtYmVhcmQxLnBvc2l0aW9uLng7XG4gICAgICBiZWFyZDMudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQzLmdlb21ldHJ5LCBiZWFyZDMubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkNCA9IGJlYXJkMi5jbG9uZSgpO1xuICAgICAgYmVhcmQ0LnBvc2l0aW9uLnggPSAtYmVhcmQyLnBvc2l0aW9uLng7XG4gICAgICBiZWFyZDQudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ0Lmdlb21ldHJ5LCBiZWFyZDQubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkMkdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMywgMTQsIDEwKTtcbiAgICAgIGJlYXJkMkdlb20udmVydGljZXNbMl0ueiAtPSAyO1xuICAgICAgYmVhcmQyR2VvbS52ZXJ0aWNlc1s3XS56IC09IDI7XG5cbiAgICAgIHZhciBiZWFyZDUgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDJHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmQ1LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDUsIC01LCA0KSk7XG4gICAgICBiZWFyZDUudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ1Lmdlb21ldHJ5LCBiZWFyZDUubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkM0dlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMi41LCAxNCwgMTApO1xuICAgICAgYmVhcmQzR2VvbS52ZXJ0aWNlc1syXS56IC09IDI7XG4gICAgICBiZWFyZDNHZW9tLnZlcnRpY2VzWzddLnogLT0gMjtcblxuICAgICAgdmFyIGJlYXJkNiA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkM0dlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBiZWFyZDYuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMi41LCAtNiwgNikpO1xuICAgICAgYmVhcmQ2LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkNi5nZW9tZXRyeSwgYmVhcmQ2Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDcgPSBiZWFyZDUuY2xvbmUoKTtcbiAgICAgIGJlYXJkNy5wb3NpdGlvbi54ID0gLWJlYXJkNS5wb3NpdGlvbi54O1xuICAgICAgYmVhcmQ3LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkNy5nZW9tZXRyeSwgYmVhcmQ3Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDggPSBiZWFyZDYuY2xvbmUoKTtcbiAgICAgIGJlYXJkOC5wb3NpdGlvbi54ID0gLWJlYXJkNi5wb3NpdGlvbi54O1xuICAgICAgYmVhcmQ4LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkOC5nZW9tZXRyeSwgYmVhcmQ4Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDRHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDIuNSwgMTQuNSwgMTApO1xuICAgICAgYmVhcmQ0R2VvbS52ZXJ0aWNlc1syXS56IC09IDE7XG4gICAgICBiZWFyZDRHZW9tLnZlcnRpY2VzWzddLnogLT0gMTtcblxuICAgICAgdmFyIGJlYXJkOSA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkNEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBiZWFyZDkuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTcsIDUuNzUpKTtcbiAgICAgIGJlYXJkOS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDkuZ2VvbWV0cnksIGJlYXJkOS5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQ1R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg0LCA4LCA4KTtcbiAgICAgIHZhciBiZWFyZDEwID0gbmV3IFRIUkVFLk1lc2goYmVhcmQ1R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGJlYXJkMTAuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTYsIC0xLCAtMikpO1xuICAgICAgYmVhcmQxMC51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDEwLmdlb21ldHJ5LCBiZWFyZDEwLm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDExID0gbmV3IFRIUkVFLk1lc2goYmVhcmQ1R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGJlYXJkMTEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTUsIC0yKSk7XG4gICAgICBiZWFyZDExLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMTEuZ2VvbWV0cnksIGJlYXJkMTEubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkTWVyZ2VkID0gbmV3IFRIUkVFLk1lc2goYmVhcmRHZW9tTWVyZ2VkLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmRNZXJnZWQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICBiZWFyZE1lcmdlZC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgICAgdmFyIG1vdXRoR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgNCwgMSk7XG4gICAgICB2YXIgbW91dGggPSBuZXcgVEhSRUUuTWVzaChtb3V0aEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5ibGFja01hdCk7XG4gICAgICBtb3V0aC5wb3NpdGlvbi5zZXQoMCwgMiwgOCk7XG4gICAgICBtb3V0aC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBtb3V0aC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgICAgdmFyIHRlZXRoR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgMSwgMSk7XG4gICAgICB2YXIgdGVldGggPSBuZXcgVEhSRUUuTWVzaCh0ZWV0aEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS50ZWV0aE1hdCk7XG4gICAgICB0ZWV0aC5wb3NpdGlvbi5zZXQoMCwgMC41LCAwLjEpO1xuICAgICAgdGVldGguY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGVldGgucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICBtb3V0aC5hZGQodGVldGgpO1xuXG4gICAgICB0aGlzLmJlYXJkLmFkZChiZWFyZE1lcmdlZCwgbW91dGgpO1xuXG4gICAgICB2YXIgbW91c3RhY2hlR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxNCwgMywgMywgMyk7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzBdLnkgLT0gMjtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbMV0ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1syXS55IC09IDI7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzNdLnkgLT0gMjtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbNF0ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s1XS55IC09IDI7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzZdLnkgLT0gMjtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbN10ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s4XS54IC09IDE7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzldLnggKz0gMTtcblxuICAgICAgbW91c3RhY2hlR2VvbS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCA0LCAwKSk7XG4gICAgICB0aGlzLm1vdXN0YWNoZSA9IG5ldyBUSFJFRS5NZXNoKG1vdXN0YWNoZUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICB0aGlzLm1vdXN0YWNoZS5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgIHRoaXMubW91c3RhY2hlLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgICB0aGlzLm1vdXN0YWNoZS5wb3NpdGlvbi5zZXQoMCwgMCwgOSk7XG4gICAgICB0aGlzLmJlYXJkLmFkZCh0aGlzLm1vdXN0YWNoZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnR2xhc3NlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdsYXNzZXMoKSB7XG5cbiAgICAgIHRoaXMuZ2xhc3NlcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5nbGFzc2VzLnBvc2l0aW9uLnNldCgwLCAwLCA5KTtcbiAgICAgIHRoaXMuaGVhZC5hZGQodGhpcy5nbGFzc2VzKTtcbiAgICAgIHZhciBnbGFzc2VzTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5nbGFzc2VzLCBmbGF0U2hhZGluZzogdHJ1ZSB9KTtcblxuICAgICAgdmFyIGZyYW1lR2VvbU1lcmdlZCA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXG4gICAgICB2YXIgZnJhbWVPdXRlckdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgzLCAzLCAwLjUsIDMyKTtcbiAgICAgIHZhciBmcmFtZUlubmVyR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDIuNywgMi43LCAwLjUsIDMyKTtcblxuICAgICAgZnJhbWVPdXRlckdlb20uYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKC1NYXRoLlBJIC8gMikpO1xuICAgICAgZnJhbWVJbm5lckdlb20uYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKC1NYXRoLlBJIC8gMikpO1xuXG4gICAgICB2YXIgZnJhbWVCU1AgPSBuZXcgVGhyZWVCU1AoZnJhbWVPdXRlckdlb20pO1xuICAgICAgdmFyIGZyYW1lQ3V0QlNQID0gbmV3IFRocmVlQlNQKGZyYW1lSW5uZXJHZW9tKTtcblxuICAgICAgdmFyIGZyYW1laW50ZXJzZWN0aW9uQlNQID0gZnJhbWVCU1Auc3VidHJhY3QoZnJhbWVDdXRCU1ApO1xuICAgICAgdmFyIGZyYW1lTGVmdCA9IGZyYW1laW50ZXJzZWN0aW9uQlNQLnRvTWVzaChnbGFzc2VzTWF0KTtcblxuICAgICAgZnJhbWVMZWZ0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDQsIDMsIDApKTtcbiAgICAgIGZyYW1lTGVmdC51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZUxlZnQuZ2VvbWV0cnksIGZyYW1lTGVmdC5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJhbWVSaWdodCA9IGZyYW1lTGVmdC5jbG9uZSgpO1xuICAgICAgZnJhbWVSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooTWF0aC5QSSAvIDMwKSk7XG4gICAgICBmcmFtZVJpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC03LjUsIC0wLjI1LCAwKSk7XG4gICAgICBmcmFtZVJpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lUmlnaHQuZ2VvbWV0cnksIGZyYW1lUmlnaHQubWF0cml4KTtcblxuICAgICAgdmFyIGZyYW1lTWlkR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLCAuMywgLjUpO1xuICAgICAgdmFyIGZyYW1lTWlkID0gbmV3IFRIUkVFLk1lc2goZnJhbWVNaWRHZW9tLCBnbGFzc2VzTWF0KTtcbiAgICAgIGZyYW1lTWlkLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsIDMuMywgLTAuMykpO1xuICAgICAgZnJhbWVNaWQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVNaWQuZ2VvbWV0cnksIGZyYW1lTWlkLm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZUVuZEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMS41LCAuNSwgMSk7XG4gICAgICB2YXIgZnJhbWVFbmRSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lRW5kR2VvbSwgZ2xhc3Nlc01hdCk7XG4gICAgICBmcmFtZUVuZFJpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDcuNSwgMywgMCkpO1xuICAgICAgZnJhbWVFbmRSaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZUVuZFJpZ2h0Lmdlb21ldHJ5LCBmcmFtZUVuZFJpZ2h0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZUVuZExlZnQgPSBmcmFtZUVuZFJpZ2h0LmNsb25lKCk7XG4gICAgICBmcmFtZUVuZExlZnQucG9zaXRpb24ueCA9IC1mcmFtZUVuZFJpZ2h0LnBvc2l0aW9uLng7XG4gICAgICBmcmFtZUVuZExlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVFbmRMZWZ0Lmdlb21ldHJ5LCBmcmFtZUVuZExlZnQubWF0cml4KTtcblxuICAgICAgdmFyIGZyYW1lU3Bva2VHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsIDAuNSwgMTIpO1xuICAgICAgdmFyIGZyYW1lU3Bva2VSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lU3Bva2VHZW9tLCBnbGFzc2VzTWF0KTtcbiAgICAgIGZyYW1lU3Bva2VSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig4LCAzLCAtNS41KSk7XG4gICAgICBmcmFtZVNwb2tlUmlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVTcG9rZVJpZ2h0Lmdlb21ldHJ5LCBmcmFtZVNwb2tlUmlnaHQubWF0cml4KTtcblxuICAgICAgdmFyIGZyYW1lU3Bva2VMZWZ0ID0gZnJhbWVTcG9rZVJpZ2h0LmNsb25lKCk7XG4gICAgICBmcmFtZVNwb2tlTGVmdC5wb3NpdGlvbi54ID0gLWZyYW1lU3Bva2VSaWdodC5wb3NpdGlvbi54O1xuICAgICAgZnJhbWVTcG9rZUxlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVTcG9rZUxlZnQuZ2VvbWV0cnksIGZyYW1lU3Bva2VMZWZ0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZU1lcmdlZCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lR2VvbU1lcmdlZCwgZ2xhc3Nlc01hdCk7XG4gICAgICBmcmFtZU1lcmdlZC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBmcmFtZU1lcmdlZC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgICAgdGhpcy5nbGFzc2VzLmFkZChmcmFtZU1lcmdlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnSGFpcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEhhaXIoKSB7XG5cbiAgICAgIHRoaXMuaGFpciA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5oYWlyLnBvc2l0aW9uLnNldCgwLCA5LCAwKTtcbiAgICAgIHRoaXMuaGVhZC5hZGQodGhpcy5oYWlyKTtcblxuICAgICAgdmFyIGhhaXJHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICAgIHZhciBoYWlyRmxhdEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTAsIDIsIDE4KTtcblxuICAgICAgdmFyIGhhaXIxID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpcjEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNDApKTtcbiAgICAgIGhhaXIxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC00LCAtMC41LCAwKSk7XG4gICAgICBoYWlyMS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXIxLmdlb21ldHJ5LCBoYWlyMS5tYXRyaXgpO1xuXG4gICAgICB2YXIgaGFpcjIgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBoYWlyMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyAxMCkpO1xuICAgICAgaGFpcjIuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTIsIDEsIDApKTtcbiAgICAgIGhhaXIyLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjIuZ2VvbWV0cnksIGhhaXIyLm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyMyA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGhhaXIzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDUpKTtcbiAgICAgIGhhaXIzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDIsIDEsIDApKTtcbiAgICAgIGhhaXIzLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjMuZ2VvbWV0cnksIGhhaXIzLm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyNCA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGhhaXI0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDQpKTtcbiAgICAgIGhhaXI0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDYsIDAsIDApKTtcbiAgICAgIGhhaXI0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjQuZ2VvbWV0cnksIGhhaXI0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyNiA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGhhaXI2LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIC0zKSk7XG4gICAgICBoYWlyNi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtNy43NSwgLS41LCAwKSk7XG4gICAgICBoYWlyNi51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXI2Lmdlb21ldHJ5LCBoYWlyNi5tYXRyaXgpO1xuXG4gICAgICB2YXIgaGFpckZsYXRCYWNrR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxOCwgNywgNik7XG4gICAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzBdLnggLT0gMTtcbiAgICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbMV0ueCAtPSAxO1xuICAgICAgaGFpckZsYXRCYWNrR2VvbS52ZXJ0aWNlc1s0XS54ICs9IDE7XG4gICAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzVdLnggKz0gMTtcblxuICAgICAgdmFyIGhhaXI1ID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRCYWNrR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGhhaXI1LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsIC00LjUsIC02KSk7XG4gICAgICBoYWlyNS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXI1Lmdlb21ldHJ5LCBoYWlyNS5tYXRyaXgpO1xuXG4gICAgICB2YXIgaGFpck1lcmdlZCA9IG5ldyBUSFJFRS5NZXNoKGhhaXJHZW9tTWVyZ2VkLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpck1lcmdlZC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBoYWlyTWVyZ2VkLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgICB0aGlzLmhhaXIuYWRkKGhhaXJNZXJnZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0V5ZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBFeWVzKCkge1xuXG4gICAgICB0aGlzLmV5ZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICAgIHRoaXMuZXllcy5wb3NpdGlvbi5zZXQoMCwgMywgOSk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZXllcyk7XG5cbiAgICAgIHZhciBleWVXaGl0ZUdlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgyLjUsIDIuNSk7XG5cbiAgICAgIHZhciBleWVXaGl0ZVJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllV2hpdGVHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgZXllV2hpdGVSaWdodC5wb3NpdGlvbi5zZXQoLTMuNzUsIDAsIDApO1xuICAgICAgZXllV2hpdGVSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBleWVXaGl0ZVJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdmFyIGV5ZUJsdWVHZW9tID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMS41LCAxLjUpO1xuXG4gICAgICB2YXIgZXllTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5leWUsIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuXG4gICAgICB0aGlzLmV5ZUJsdWVSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGV5ZUJsdWVHZW9tLCBleWVNYXQpO1xuICAgICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24uc2V0KDAsIDAsIC4wMSk7XG4gICAgICB0aGlzLmV5ZUJsdWVSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmV5ZUJsdWVSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIGV5ZVdoaXRlUmlnaHQuYWRkKHRoaXMuZXllQmx1ZVJpZ2h0KTtcblxuICAgICAgdmFyIGV5ZVB1cGlsR2VvbSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEpO1xuXG4gICAgICB0aGlzLmV5ZVB1cGlsUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChleWVQdXBpbEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5ibGFja01hdCk7XG4gICAgICB0aGlzLmV5ZVB1cGlsUmlnaHQucG9zaXRpb24uc2V0KDAsIDAsIC4wMik7XG4gICAgICB0aGlzLmV5ZVB1cGlsUmlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5leWVQdXBpbFJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdGhpcy5leWVCbHVlUmlnaHQuYWRkKHRoaXMuZXllUHVwaWxSaWdodCk7XG5cbiAgICAgIHZhciBleWVXaGl0ZUxlZnQgPSBuZXcgVEhSRUUuTWVzaChleWVXaGl0ZUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBleWVXaGl0ZUxlZnQucG9zaXRpb24uc2V0KDMuNzUsIDAsIDApO1xuICAgICAgZXllV2hpdGVMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIGV5ZVdoaXRlTGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuZXllQmx1ZUxlZnQgPSBuZXcgVEhSRUUuTWVzaChleWVCbHVlR2VvbSwgZXllTWF0KTtcbiAgICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24uc2V0KDAsIDAsIC4wMSk7XG4gICAgICB0aGlzLmV5ZUJsdWVMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuZXllQmx1ZUxlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICBleWVXaGl0ZUxlZnQuYWRkKHRoaXMuZXllQmx1ZUxlZnQpO1xuXG4gICAgICB0aGlzLmV5ZVB1cGlsTGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVB1cGlsR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmJsYWNrTWF0KTtcbiAgICAgIHRoaXMuZXllUHVwaWxMZWZ0LnBvc2l0aW9uLnNldCgwLCAwLCAuMDIpO1xuICAgICAgdGhpcy5leWVQdXBpbExlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5leWVQdXBpbExlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmV5ZUJsdWVMZWZ0LmFkZCh0aGlzLmV5ZVB1cGlsTGVmdCk7XG5cbiAgICAgIHRoaXMuZXllcy5hZGQoZXllV2hpdGVSaWdodCwgZXllV2hpdGVMZWZ0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdFeWVCcm93cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEV5ZUJyb3dzKCkge1xuICAgICAgdGhpcy5leWVCcm93cyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5leWVCcm93cy5wb3NpdGlvbi5zZXQoMCwgNiwgOCk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZXllQnJvd3MpO1xuXG4gICAgICB2YXIgZXllQnJvd0dlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoNCwgMSwgMSk7XG5cbiAgICAgIHRoaXMuZXllQnJvd1JpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllQnJvd0dlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICB0aGlzLmV5ZUJyb3dSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooTWF0aC5QSSAvIDQ1KSk7XG4gICAgICB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi5zZXQoLTMuNzUsIDAsIDApO1xuICAgICAgdGhpcy5leWVCcm93UmlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5leWVCcm93UmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmV5ZUJyb3dMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZXllQnJvd0dlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICB0aGlzLmV5ZUJyb3dMZWZ0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDQ1KSk7XG4gICAgICB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnNldCgzLjc1LCAwLCAwKTtcbiAgICAgIHRoaXMuZXllQnJvd0xlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5leWVCcm93TGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuZXllQnJvd3MuYWRkKHRoaXMuZXllQnJvd1JpZ2h0LCB0aGlzLmV5ZUJyb3dMZWZ0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdIYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBIYXQoKSB7XG4gICAgICB0aGlzLmhhdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5oYXQucG9zaXRpb24uc2V0KC0wLjIsIDExLCAyLjQpO1xuICAgICAgdGhpcy5oZWFkLmFkZCh0aGlzLmhhdCk7XG5cbiAgICAgIHZhciBoYXRNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmhhdCwgZmxhdFNoYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIHZhciBiYW5kR2VvbSA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KDksIDIsIDE2LCAxMDApO1xuICAgICAgdmFyIGJpZ0NvbmVHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMTEsIDEyLCAxNSk7XG4gICAgICB2YXIgc21hbGxDb25lR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDAuOCwgMywgOSwgMzIpO1xuICAgICAgdmFyIGhhdERpbmdsZUdlb20gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMS41LCA4LCA4KTtcblxuICAgICAgdGhpcy5iYW5kID0gbmV3IFRIUkVFLk1lc2goYmFuZEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS50ZWV0aE1hdCk7XG4gICAgICB0aGlzLmJhbmQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKE1hdGguUEkgLyAyKSk7XG4gICAgICB0aGlzLmJhbmQucG9zaXRpb24uc2V0KDAsIDAsIDApO1xuICAgICAgdGhpcy5iYW5kLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuYmFuZC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuYmlnQ29uZSA9IG5ldyBUSFJFRS5NZXNoKGJpZ0NvbmVHZW9tLCBoYXRNYXQpO1xuICAgICAgdGhpcy5iaWdDb25lLnBvc2l0aW9uLnNldCgwLCA2LCAwKTtcbiAgICAgIHRoaXMuYmlnQ29uZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmJpZ0NvbmUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLnNtYWxsQ29uZSA9IG5ldyBUSFJFRS5NZXNoKHNtYWxsQ29uZUdlb20sIGhhdE1hdCk7XG4gICAgICB0aGlzLnNtYWxsQ29uZS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoTWF0aC5QSSAvIDIpKTtcbiAgICAgIHRoaXMuc21hbGxDb25lLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWShNYXRoLlBJIC8gMikpO1xuICAgICAgdGhpcy5zbWFsbENvbmUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKE1hdGguUEkgLyAtOCkpO1xuICAgICAgdGhpcy5zbWFsbENvbmUucG9zaXRpb24uc2V0KDQsIDcuOCwgLTEpO1xuICAgICAgdGhpcy5zbWFsbENvbmUuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5zbWFsbENvbmUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmhhdERpbmdsZSA9IG5ldyBUSFJFRS5NZXNoKGhhdERpbmdsZUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICB0aGlzLmhhdERpbmdsZS5wb3NpdGlvbi5zZXQoOSwgNS41LCAtMSk7XG4gICAgICB0aGlzLmhhdERpbmdsZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmhhdERpbmdsZS5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuaGF0LmFkZCh0aGlzLmJhbmQsIHRoaXMuYmlnQ29uZSwgdGhpcy5zbWFsbENvbmUsIHRoaXMuaGF0RGluZ2xlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdGcmVja2xlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEZyZWNrbGVzKCkge1xuICAgICAgdGhpcy5mcmVja2xlcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5mcmVja2xlcy5wb3NpdGlvbi5zZXQoMCwgMCwgOCk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZnJlY2tsZXMpO1xuXG4gICAgICB2YXIgZnJlY2tsZXNNYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZnJlY2tsZXMsIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuICAgICAgdmFyIGZyZWNrbGVzR2VvbU1lcmdlZCA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXG4gICAgICB2YXIgZnJlY2tsZXNHZW9tID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMC41LCAwLjUpO1xuXG4gICAgICB2YXIgZnJlY2tsZTEgPSBuZXcgVEhSRUUuTWVzaChmcmVja2xlc0dlb20sIGZyZWNrbGVzTWF0KTtcbiAgICAgIGZyZWNrbGUxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC01LCAwLCAwLjAxKSk7XG4gICAgICBmcmVja2xlMS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlMS5nZW9tZXRyeSwgZnJlY2tsZTEubWF0cml4KTtcblxuICAgICAgdmFyIGZyZWNrbGUyID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICAgIGZyZWNrbGUyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC0wLjUsIC0xLCAwKSk7XG4gICAgICBmcmVja2xlMi51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlMi5nZW9tZXRyeSwgZnJlY2tsZTIubWF0cml4KTtcblxuICAgICAgdmFyIGZyZWNrbGUzID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICAgIGZyZWNrbGUzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDEsIC0wLjUsIDApKTtcbiAgICAgIGZyZWNrbGUzLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGUzLmdlb21ldHJ5LCBmcmVja2xlMy5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJlY2tsZTQgPSBmcmVja2xlMS5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTQucG9zaXRpb24ueCA9IC1mcmVja2xlMS5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTQuZ2VvbWV0cnksIGZyZWNrbGU0Lm1hdHJpeCk7XG4gICAgICB2YXIgZnJlY2tsZTUgPSBmcmVja2xlMi5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTUucG9zaXRpb24ueCA9IC1mcmVja2xlMi5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTUudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTUuZ2VvbWV0cnksIGZyZWNrbGU1Lm1hdHJpeCk7XG4gICAgICB2YXIgZnJlY2tsZTYgPSBmcmVja2xlMy5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTYucG9zaXRpb24ueCA9IC1mcmVja2xlMy5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTYudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTYuZ2VvbWV0cnksIGZyZWNrbGU2Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmVja2xlZE1lcmdlZCA9IG5ldyBUSFJFRS5NZXNoKGZyZWNrbGVzR2VvbU1lcmdlZCwgZnJlY2tsZXNNYXQpO1xuICAgICAgZnJlY2tsZWRNZXJnZWQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgZnJlY2tsZWRNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmZyZWNrbGVzLmFkZChmcmVja2xlZE1lcmdlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnRmVhdHVyZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBGZWF0dXJlcygpIHtcbiAgICAgIHZhciBlYXJHZW9tID0gbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KDEuNSwgMywgMS41KTtcbiAgICAgIHZhciBza2luTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnNraW4sIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuICAgICAgdmFyIGVhclJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZWFyR2VvbSwgc2tpbk1hdCk7XG4gICAgICBlYXJSaWdodC5wb3NpdGlvbi5zZXQoLTguNSwgMSwgMyk7XG4gICAgICBlYXJSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBlYXJSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHZhciBlYXJMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZWFyR2VvbSwgc2tpbk1hdCk7XG4gICAgICBlYXJMZWZ0LnBvc2l0aW9uLnNldCg4LjUsIDEsIDMpO1xuICAgICAgZWFyTGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBlYXJMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdmFyIG5vc2VHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMiwgNCwgNCk7XG4gICAgICB2YXIgbm9zZSA9IG5ldyBUSFJFRS5NZXNoKG5vc2VHZW9tLCBza2luTWF0KTtcbiAgICAgIG5vc2Uuc2NhbGUuc2V0KC43NSwgMSwgMS4zKTtcbiAgICAgIG5vc2UucG9zaXRpb24uc2V0KDAsIDEsIDgpO1xuICAgICAgbm9zZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBub3NlLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdGhpcy5oZWFkLmFkZChlYXJSaWdodCwgZWFyTGVmdCwgbm9zZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgc2NlbmUucmVtb3ZlKHRoaXMuaGVhZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlSGVhZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUhlYWQoKSB7XG4gICAgICB0aGlzLmhlYWQgPSBuZXcgSGVhZCgpO1xuICAgICAgdGhpcy5oZWFkLm5hbWUgPSBcIkhlYWRcIjtcbiAgICAgIHRoaXMuaGVhZC5zZW5kZXIoKTtcbiAgICAgIHNjZW5lLmFkZCh0aGlzLmhlYWQubWVzaCk7XG4gICAgfVxuICAgIC8vXG4gICAgLy8gYWRkKCkge1xuICAgIC8vICAgc2NlbmUuYWRkKHRoaXMubWVzaCk7XG4gICAgLy8gfVxuXG4gIH1dKTtcblxuICByZXR1cm4gSGVhZDtcbn0oKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChIZWFkKTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xubW9kdWxlLmV4cG9ydHMgPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG5cblxuLyoqKi8gfSksXG4vKiAzICovLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NvbG9yc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIE1hdGVyaWFscyA9IHtcbiAgXCJ3aGl0ZU1hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlLCBmbGF0U2hhZGluZzogdHJ1ZSB9KSxcbiAgXCJ0ZWV0aE1hdFwiOiBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS50ZWV0aCwgZmxhdFNoYWRpbmc6IHRydWUgfSksXG4gIFwiYmxhY2tNYXRcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5ibGFjaywgZmxhdFNoYWRpbmc6IHRydWUgfSksXG4gIFwibm9ybWFsTWF0XCI6IG5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwoe30pXG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKE1hdGVyaWFscyk7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4oZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXVxuXG4gICAgdmFyIGlzRGF0YVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICAgIH1cblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7IGJvZHk6IHRoaXMuX2JvZHlJbml0IH0pXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gICAgcmF3SGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSAnc3RhdHVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXMgOiAyMDBcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2lzb21vcnBoaWNfZmV0Y2hfXyk7XG5cblxudmFyIHVybCA9ICcvYXBpL2NhcmRzJztcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9ICh7XG5cbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciB0ZXh0ID0gX3JlZi50ZXh0LFxuICAgICAgICBpZCA9IF9yZWYuaWQsXG4gICAgICAgIGZyb20gPSBfcmVmLmZyb20sXG4gICAgICAgIGJsb2IgPSBfcmVmLmJsb2IsXG4gICAgICAgIHRvID0gX3JlZi50byxcbiAgICAgICAgYXVkaW9TZXR0aW5ncyA9IF9yZWYuYXVkaW9TZXR0aW5ncyxcbiAgICAgICAgaGVhZENvbG9ycyA9IF9yZWYuaGVhZENvbG9ycztcblxuICAgIHZhciBtZXRob2QgPSAnUE9TVCc7XG4gICAgLy8gY29uc3QgbmV3RmlsZU5hbWUgPSBgJHtpZC5zcGxpdChgIGApLmpvaW4oYF9gKX1gO1xuICAgIHZhciBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ3RleHQnLCB0ZXh0KTtcbiAgICBib2R5LmFwcGVuZCgnaWQnLCBpZCk7XG4gICAgYm9keS5hcHBlbmQoJ2Zyb20nLCBmcm9tKTtcbiAgICBib2R5LmFwcGVuZCgndG8nLCB0byk7XG4gICAgYm9keS5hcHBlbmQoJ2F1ZGlvU2V0dGluZ3MnLCBhdWRpb1NldHRpbmdzKTtcbiAgICBib2R5LmFwcGVuZCgnaGVhZENvbG9ycycsIGhlYWRDb2xvcnMpO1xuXG4gICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX19fZGVmYXVsdCgpKHVybCwgeyBtZXRob2Q6IG1ldGhvZCwgYm9keTogYm9keSB9KS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gci5qc29uKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHtcbiAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2lzb21vcnBoaWNfZmV0Y2hfX19kZWZhdWx0KCkodXJsICsgJz9pc0FjdGl2ZT10cnVlJykudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHIuanNvbigpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlYWRPbmU6IGZ1bmN0aW9uIHJlYWRPbmUoaWQpIHtcbiAgICB2YXIgbWV0aG9kID0gJ0dFVCc7XG4gICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX19fZGVmYXVsdCgpKHVybCArICcvJyArIGlkLCB7IG1ldGhvZDogbWV0aG9kIH0pLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiByLmpzb24oKTtcbiAgICB9KTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShfcmVmMikge1xuICAgIHZhciB0ZXh0ID0gX3JlZjIudGV4dCxcbiAgICAgICAgaWQgPSBfcmVmMi5pZCxcbiAgICAgICAgZnJvbSA9IF9yZWYyLmZyb20sXG4gICAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICAgIGF1ZGlvU2V0dGluZ3MgPSBfcmVmMi5hdWRpb1NldHRpbmdzLFxuICAgICAgICBoZWFkQ29sb3JzID0gX3JlZjIuaGVhZENvbG9ycztcblxuICAgIHZhciBtZXRob2QgPSAnUFVUJztcbiAgICB2YXIgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHkuYXBwZW5kKCd0ZXh0JywgdGV4dCk7XG4gICAgYm9keS5hcHBlbmQoJ2lkJywgaWQpO1xuICAgIGJvZHkuYXBwZW5kKCdmcm9tJywgZnJvbSk7XG4gICAgYm9keS5hcHBlbmQoJ3RvJywgdG8pO1xuICAgIGJvZHkuYXBwZW5kKCdhdWRpb1NldHRpbmdzJywgYXVkaW9TZXR0aW5ncyk7XG4gICAgYm9keS5hcHBlbmQoJ2hlYWRDb2xvcnMnLCBoZWFkQ29sb3JzKTtcblxuICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fX2RlZmF1bHQoKSh1cmwgKyAnLycgKyBpZCwgeyBtZXRob2Q6IG1ldGhvZCwgYm9keTogYm9keSB9KS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gci5qc29uKCk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDcgKi8sXG4vKiA4ICovLFxuLyogOSAqLyxcbi8qIDEwICovLFxuLyogMTEgKi8sXG4vKiAxMiAqLyxcbi8qIDEzICovLFxuLyogMTQgKi8sXG4vKiAxNSAqLyxcbi8qIDE2ICovLFxuLyogMTcgKi8sXG4vKiAxOCAqLyxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19oYW5kbGVTYW50YUF1ZGlvX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2NsYXNzZXNfU2FudGFTY2VuZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19vYmplY3RzX2dldFVybFBhcmFtZXRlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19saWJfY2FyZEFQSV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBBdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG5cblxuXG5cblxudmFyIHRhcmdldElkID0gdm9pZCAwLFxuICAgIGF1ZGlvQ3R4ID0gdm9pZCAwLFxuICAgIHNhbnRhID0gdm9pZCAwO1xuXG52YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgcGFydGljbGVzSlMubG9hZCgncGFydGljbGVzLWpzJywgJy4uL2Fzc2V0cy9wYXJ0aWNsZXMuanNvbicpO1xuXG4gIHRhcmdldElkID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fb2JqZWN0c19nZXRVcmxQYXJhbWV0ZXJfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoXCJpZFwiKTtcbiAgaWYgKCF0YXJnZXRJZCkgd2luZG93LmxvY2F0aW9uID0gXCJodHRwczovL2V4cGVyaW1lbnRhbHdlYi5oZXJva3VhcHAuY29tL1wiO1xuXG4gIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fbGliX2NhcmRBUElfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5yZWFkT25lKHRhcmdldElkKS50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgaWYgKGQuc3RhdHVzQ29kZSkgd2luZG93LmxvY2F0aW9uID0gXCJodHRwczovL2V4cGVyaW1lbnRhbHdlYi5oZXJva3VhcHAuY29tL1wiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmcm9tJykuaW5uZXJIVE1MID0gJycgKyBkLmZyb207XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvJykuaW5uZXJIVE1MID0gJycgKyBkLnRvO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuaW5uZXJIVE1MID0gJycgKyBkLnRleHQ7XG5cbiAgICBzYW50YSA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2NsYXNzZXNfU2FudGFTY2VuZV9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKCk7XG4gICAgc2FudGEuc2V0Q29sb3JzKGQpO1xuICAgIE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfaGFuZGxlU2FudGFBdWRpb19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShkKTtcbiAgICBsb29wKCk7XG4gIH0pO1xufTtcblxudmFyIGxvb3AgPSBmdW5jdGlvbiBsb29wKCkge1xuICBzYW50YS5sb29wKCk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbn07XG5cbmluaXQoKTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NsYXNzZXNfSGVhZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG5cblxudmFyIHRhcmdldElkID0gdm9pZCAwLFxuICAgIGF1ZGlvQ3R4ID0gdm9pZCAwO1xudmFyIHBsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheV9zYW50YScpO1xudmFyICRhdWRpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdWRpbycpO1xuXG52YXIgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yID0gdm9pZCAwO1xudmFyIGlzUGxheWluZyA9IGZhbHNlO1xudmFyIGdyYWluU2l6ZSA9IDUxMixcbiAgICBwaXRjaFJhdGlvID0gMS4wLFxuICAgIG92ZXJsYXBSYXRpbyA9IDAuNTA7XG5cbnZhciBoYW5kbGVTYW50YUF1ZGlvID0gZnVuY3Rpb24gaGFuZGxlU2FudGFBdWRpbyhjYXJ0KSB7XG4gIGF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICB2YXIgYXVkaW9TZXR0aW5ncyA9IEpTT04ucGFyc2UoY2FydC5hdWRpb1NldHRpbmdzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYnVmZmVyTG9hZGVyID0gbmV3IEJ1ZmZlckxvYWRlcihhdWRpb0N0eCwgWycuL3VwbG9hZHMvJyArIGNhcnQuaWQgKyAnLm9nZyddLCBmdW5jdGlvbiAoYnVmZmVyTGlzdCkge1xuXG4gICAgICB2YXIgbG9vcCA9IGZhbHNlO1xuICAgICAgdmFyIHNvdXJjZSA9IHZvaWQgMDtcblxuICAgICAgdmFyICRyZXBlYXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVwZWF0Jyk7XG4gICAgICAkcmVwZWF0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobG9vcCkge1xuICAgICAgICAgICRyZXBlYXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMTEzLCAwLCAyNCwgMC40KSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHJlcGVhdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgxNTAsIDAsIDM5LCAxKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsb29wID0gIWxvb3A7XG4gICAgICAgIGlmIChpc1BsYXlpbmcpIHNvdXJjZS5zdG9wKCk7XG4gICAgICB9KTtcblxuICAgICAgcGl0Y2hSYXRpbyA9IGF1ZGlvU2V0dGluZ3MucGl0Y2g7XG4gICAgICBvdmVybGFwUmF0aW8gPSBhdWRpb1NldHRpbmdzLm92ZXJsYXA7XG5cbiAgICAgICRhdWRpby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgc291cmNlID0gJyc7XG4gICAgICAgIHNvdXJjZSA9IGF1ZGlvQ3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICBzb3VyY2UuYnVmZmVyID0gYnVmZmVyTGlzdFswXTtcbiAgICAgICAgc291cmNlLmxvb3AgPSBsb29wO1xuICAgICAgICBzb3VyY2UuY29ubmVjdChwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IpO1xuICAgICAgICBzb3VyY2Uuc3RhcnQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYnVmZmVyTG9hZGVyLmxvYWQoKTtcbiAgICBpbml0UHJvY2Vzc29yKCk7XG4gIH0sIDEwMDApO1xufTtcblxudmFyIGxpbmVhckludGVycG9sYXRpb24gPSBmdW5jdGlvbiBsaW5lYXJJbnRlcnBvbGF0aW9uKGEsIGIsIHQpIHtcbiAgcmV0dXJuIGEgKyAoYiAtIGEpICogdDtcbn07XG5cbnZhciBpbml0UHJvY2Vzc29yID0gZnVuY3Rpb24gaW5pdFByb2Nlc3NvcigpIHtcblxuICBpZiAocGl0Y2hTaGlmdGVyUHJvY2Vzc29yKSB7XG4gICAgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIGlmIChhdWRpb0N0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IpIHtcbiAgICBwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IgPSBhdWRpb0N0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoZ3JhaW5TaXplLCAxLCAxKTtcbiAgfSBlbHNlIGlmIChhdWRpb0N0eC5jcmVhdGVKYXZhU2NyaXB0Tm9kZSkge1xuICAgIHBpdGNoU2hpZnRlclByb2Nlc3NvciA9IGF1ZGlvQ3R4LmNyZWF0ZUphdmFTY3JpcHROb2RlKGdyYWluU2l6ZSwgMSwgMSk7XG4gIH1cblxuICBwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShncmFpblNpemUgKiAyKTtcbiAgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yLmdyYWluV2luZG93ID0gaGFubldpbmRvdyhncmFpblNpemUpO1xuXG4gIHBpdGNoU2hpZnRlclByb2Nlc3Nvci5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgdmFyIGlucHV0RGF0YSA9IGV2ZW50LmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuICAgIHZhciBvdXRwdXREYXRhID0gZXZlbnQub3V0cHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0RGF0YS5sZW5ndGg7IGkrKykge1xuXG4gICAgICAvLyBBcHBseSB0aGUgd2luZG93IHRvIHRoZSBpbnB1dCBidWZmZXJcbiAgICAgIGlucHV0RGF0YVtpXSAqPSB0aGlzLmdyYWluV2luZG93W2ldO1xuXG4gICAgICAvLyBTaGlmdCBoYWxmIG9mIHRoZSBidWZmZXJcbiAgICAgIHRoaXMuYnVmZmVyW2ldID0gdGhpcy5idWZmZXJbaSArIGdyYWluU2l6ZV07XG5cbiAgICAgIC8vIEVtcHR5IHRoZSBidWZmZXIgdGFpbFxuICAgICAgdGhpcy5idWZmZXJbaSArIGdyYWluU2l6ZV0gPSAwLjA7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBwaXRjaCBzaGlmdGVkIGdyYWluIHJlLXNhbXBsaW5nIGFuZCBsb29waW5nIHRoZSBpbnB1dFxuICAgIHZhciBncmFpbkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGdyYWluU2l6ZSAqIDIpO1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gMC4wOyBpIDwgZ3JhaW5TaXplOyBpKyssIGogKz0gcGl0Y2hSYXRpbykge1xuXG4gICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKGopICUgZ3JhaW5TaXplO1xuICAgICAgdmFyIGEgPSBpbnB1dERhdGFbaW5kZXhdO1xuICAgICAgdmFyIGIgPSBpbnB1dERhdGFbKGluZGV4ICsgMSkgJSBncmFpblNpemVdO1xuICAgICAgZ3JhaW5EYXRhW2ldICs9IGxpbmVhckludGVycG9sYXRpb24oYSwgYiwgaiAlIDEuMCkgKiB0aGlzLmdyYWluV2luZG93W2ldO1xuICAgIH1cblxuICAgIC8vIENvcHkgdGhlIGdyYWluIG11bHRpcGxlIHRpbWVzIG92ZXJsYXBwaW5nIGl0XG4gICAgZm9yIChpID0gMDsgaSA8IGdyYWluU2l6ZTsgaSArPSBNYXRoLnJvdW5kKGdyYWluU2l6ZSAqICgxIC0gb3ZlcmxhcFJhdGlvKSkpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPD0gZ3JhaW5TaXplOyBqKyspIHtcbiAgICAgICAgdGhpcy5idWZmZXJbaSArIGpdICs9IGdyYWluRGF0YVtqXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPdXRwdXQgdGhlIGZpcnN0IGhhbGYgb2YgdGhlIGJ1ZmZlclxuICAgIGZvciAoaSA9IDA7IGkgPCBncmFpblNpemU7IGkrKykge1xuICAgICAgb3V0cHV0RGF0YVtpXSA9IHRoaXMuYnVmZmVyW2ldO1xuICAgIH1cbiAgfTtcblxuICBwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IuY29ubmVjdChhdWRpb0N0eC5kZXN0aW5hdGlvbik7XG59O1xuXG52YXIgaGFubldpbmRvdyA9IGZ1bmN0aW9uIGhhbm5XaW5kb3cobGVuZ3RoKSB7XG4gIHZhciB3aW5kb3cgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB3aW5kb3dbaV0gPSAwLjUgKiAoMSAtIE1hdGguY29zKDIgKiBNYXRoLlBJICogaSAvIChsZW5ndGggLSAxKSkpO1xuICB9XG4gIHJldHVybiB3aW5kb3c7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKGhhbmRsZVNhbnRhQXVkaW8pO1xuXG4vKioqLyB9KSxcbi8qIDIxICovLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZ2V0VXJsUGFyYW1ldGVyID0gZnVuY3Rpb24gZ2V0VXJsUGFyYW1ldGVyKG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdbXFxcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpO1xuICB2YXIgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyBmYWxzZSA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoZ2V0VXJsUGFyYW1ldGVyKTtcblxuLyoqKi8gfSksXG4vKiAyMyAqLyxcbi8qIDI0ICovLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19IZWFkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19IZWFydHNHcm91cF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cblxuXG5cbnZhciBzY2VuZSA9IHZvaWQgMCxcbiAgICBjYW1lcmEgPSB2b2lkIDAsXG4gICAgZmllbGRPZlZpZXcgPSB2b2lkIDAsXG4gICAgYXNwZWN0UmF0aW8gPSB2b2lkIDAsXG4gICAgbmVhclBsYW5lID0gdm9pZCAwLFxuICAgIGZhclBsYW5lID0gdm9pZCAwLFxuICAgIEhFSUdIVCA9IHZvaWQgMCxcbiAgICBXSURUSCA9IHZvaWQgMDtcbnZhciBnbG9iYWxMaWdodCA9IHZvaWQgMCxcbiAgICBzaGFkb3dMaWdodCA9IHZvaWQgMCxcbiAgICBiYWNrTGlnaHQgPSB2b2lkIDAsXG4gICAgbGlnaHQgPSB2b2lkIDAsXG4gICAgcmVuZGVyZXIgPSB2b2lkIDAsXG4gICAgY29udGFpbmVyID0gdm9pZCAwLFxuICAgIGxvYWRlZCA9IHZvaWQgMDtcbnZhciBoZWFkID0gdm9pZCAwLFxuICAgIHdpbmRvd0hhbGZYID0gdm9pZCAwLFxuICAgIHdpbmRvd0hhbGZZID0gdm9pZCAwO1xudmFyIHNwaW5uaW5nU2hhcGVzID0gdm9pZCAwO1xuXG52YXIgbW91c2VQb3MgPSB7IHg6IDAsIHk6IDAgfTtcbnZhciBvbkVycm9yUGFnZSA9IGZhbHNlO1xudmFyIG9uSG9tZSA9IHZvaWQgMCxcbiAgICBpc0JsaW5raW5nID0gZmFsc2U7XG5cbnZhciBsb2FkZXJNYW5hZ2VyID0gbmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyKCk7XG52YXIgaXNNb2JpbGUgPSAvaVBob25lfEFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG52YXIgU2FudGFTY2VuZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2FudGFTY2VuZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FudGFTY2VuZSk7XG5cbiAgICB0aGlzLmNyZWF0ZVNjZW5lKCk7XG4gICAgdGhpcy5jcmVhdGVMaWdodHMoKTtcblxuICAgIGhlYWQgPSBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19IZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10oKTsgLy8gc2hvdyBhbmQgaGFuZGxlIGhlYWRcbiAgICBzY2VuZS5hZGQoaGVhZC5tZXNoKTtcblxuICAgIHdpbmRvdy5zY2VuZSA9IHNjZW5lO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhbnRhU2NlbmUsIFt7XG4gICAga2V5OiAnY3JlYXRlU2hhcGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2hhcGVzKCkge1xuICAgICAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdoZWFydHMnO1xuXG4gICAgICBzcGlubmluZ1NoYXBlcyA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX0hlYXJ0c0dyb3VwX19bXCJhXCIgLyogZGVmYXVsdCAqL10odHlwZSk7XG4gICAgICBzY2VuZS5hZGQoc3Bpbm5pbmdTaGFwZXMubWVzaCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RhcnRTcGlubmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0U3Bpbm5pbmcoKSB7XG4gICAgICBzcGlubmluZ1NoYXBlcy5zcGluU2NhbGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRDb2xvcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb2xvcnMoZGF0YSkge1xuICAgICAgdmFyIGhlYWRDb2xvcnMgPSBKU09OLnBhcnNlKGRhdGEuaGVhZENvbG9ycyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5za2luID0gaGVhZENvbG9ycy5za2luO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmZyZWNrbGVzID0gaGVhZENvbG9ycy5mcmVja2xlcztcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5leWUgPSBoZWFkQ29sb3JzLmV5ZTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5nbGFzc2VzID0gaGVhZENvbG9ycy5nbGFzc2VzO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmhhdCA9IGhlYWRDb2xvcnMuaGF0O1xuXG4gICAgICB0aGlzLmNyZWF0ZUhlYWQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlcnJvclRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvclRleHQoKSB7XG4gICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZvbnRMb2FkZXIoKTtcbiAgICAgIHZhciBtZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG5cbiAgICAgIGxvYWRlci5sb2FkKCcvYXNzZXRzL2hlbHZldGlrZXJfYm9sZC50eXBlZmFjZS5qc29uJywgZnVuY3Rpb24gKGZvbnQpIHtcblxuICAgICAgICB2YXIgc2tpbk1hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IDB4ZTllYmVlLCBmbGF0U2hhZGluZzogdHJ1ZSB9KTtcbiAgICAgICAgdmFyIGZvbnRTZXR0aW5ncyA9IHtcbiAgICAgICAgICBmb250OiBmb250LFxuICAgICAgICAgIHNpemU6IDQsXG4gICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgIGN1cnZlU2VnbWVudHM6IDEyLFxuICAgICAgICAgIGJldmVsRW5hYmxlZDogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZmlyc3RHZW9tID0gbmV3IFRIUkVFLlRleHRHZW9tZXRyeSgnNDA0IFNhbnRhJywgZm9udFNldHRpbmdzKTtcbiAgICAgICAgdmFyIHNlY29uZEdlb20gPSBuZXcgVEhSRUUuVGV4dEdlb21ldHJ5KCd3ZW50IG1pc3NpbmcnLCBmb250U2V0dGluZ3MpO1xuXG4gICAgICAgIHZhciBmaXJzdCA9IG5ldyBUSFJFRS5NZXNoKGZpcnN0R2VvbSwgc2tpbk1hdCk7XG4gICAgICAgIHZhciBzZWNvbmQgPSBuZXcgVEhSRUUuTWVzaChzZWNvbmRHZW9tLCBza2luTWF0KTtcblxuICAgICAgICBtZXNoLmFkZChmaXJzdCk7XG4gICAgICAgIG1lc2guYWRkKHNlY29uZCk7XG5cbiAgICAgICAgZmlyc3QucG9zaXRpb24ueSA9IDU7XG4gICAgICAgIGZpcnN0LnBvc2l0aW9uLnggPSA0O1xuICAgICAgICBtZXNoLnBvc2l0aW9uLnkgPSAtNDtcbiAgICAgICAgbWVzaC5yb3RhdGlvbi55ID0gLTAuMztcbiAgICAgICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlU2NlbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTY2VuZSgpIHtcbiAgICAgIDtcbiAgICAgIEhFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICAgIHdpbmRvd0hhbGZYID0gV0lEVEggLyAyO1xuICAgICAgd2luZG93SGFsZlkgPSBIRUlHSFQgLyAyO1xuXG4gICAgICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgICAgYXNwZWN0UmF0aW8gPSBXSURUSCAvIEhFSUdIVDtcbiAgICAgIGZpZWxkT2ZWaWV3ID0gNTA7XG4gICAgICBuZWFyUGxhbmUgPSAxO1xuICAgICAgZmFyUGxhbmUgPSAyMDAwO1xuXG4gICAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoZmllbGRPZlZpZXcsIGFzcGVjdFJhdGlvLCBuZWFyUGxhbmUsIGZhclBsYW5lKTtcbiAgICAgIGNhbWVyYS5wb3NpdGlvbi54ID0gMDtcbiAgICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gNzA7XG4gICAgICBjYW1lcmEucG9zaXRpb24ueSA9IC01O1xuXG4gICAgICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgYWxwaGE6IHRydWUsIGFudGlhbGlhczogdHJ1ZSB9KTtcbiAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8gPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA6IDEpO1xuICAgICAgcmVuZGVyZXIuc2V0U2l6ZShXSURUSCwgSEVJR0hUKTtcbiAgICAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIHJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcblxuICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25XaW5kb3dSZXNpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICAgIEhFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGggLyAxLjY3O1xuICAgICAgd2luZG93SGFsZlggPSBXSURUSCAvIDI7XG4gICAgICB3aW5kb3dIYWxmWSA9IEhFSUdIVCAvIDI7XG4gICAgICByZW5kZXJlci5zZXRTaXplKFdJRFRILCBIRUlHSFQpO1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IFdJRFRIIC8gSEVJR0hUO1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVNb3VzZU1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZSkge1xuICAgICAgbW91c2VQb3MgPSB7XG4gICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHk6IGV2ZW50LmNsaWVudFlcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlV2luZG93UmVzaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKGUpIHtcbiAgICAgIEhFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICByZW5kZXJlci5zZXRTaXplKFdJRFRILCBIRUlHSFQpO1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IFdJRFRIIC8gSEVJR0hUO1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVMaWdodHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVMaWdodHMoKSB7XG5cbiAgICAgIGdsb2JhbExpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCgweGZmZmZmZiwgMHg1NTU1NTUsIC45KTtcblxuICAgICAgc2hhZG93TGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgLjMpO1xuICAgICAgc2hhZG93TGlnaHQucG9zaXRpb24uc2V0KDEwMCwgMjUwLCAxNzUpO1xuICAgICAgc2hhZG93TGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG5cbiAgICAgIGJhY2tMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAuMik7XG4gICAgICBiYWNrTGlnaHQucG9zaXRpb24uc2V0KC0xMDAsIDIwMCwgMTUwKTtcbiAgICAgIGJhY2tMaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzTW9iaWxlKSBzaGFkb3dMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDEwMjQ7XG4gICAgICBpZiAoIWlzTW9iaWxlKSBzaGFkb3dMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDIwNDg7XG5cbiAgICAgIHNjZW5lLmFkZChnbG9iYWxMaWdodCk7XG4gICAgICBzY2VuZS5hZGQoc2hhZG93TGlnaHQpO1xuICAgICAgc2NlbmUuYWRkKGJhY2tMaWdodCk7XG4gICAgICBzY2VuZS5hZGQobmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGVhZGVhZCwgMC4xKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYmxpbmtMb29wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmxpbmtMb29wKCkge1xuICAgICAgaXNCbGlua2luZyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIWlzQmxpbmtpbmcgJiYgTWF0aC5yYW5kb20oKSA+IDAuOTkpIHtcbiAgICAgICAgaXNCbGlua2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxpbmsoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdibGluaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgICAgaGVhZC5leWVzLnNjYWxlLnkgPSAxO1xuICAgICAgVHdlZW5NYXgudG8oaGVhZC5leWVzLnNjYWxlLCAuMDcsIHtcbiAgICAgICAgeTogMCxcbiAgICAgICAgeW95bzogdHJ1ZSxcbiAgICAgICAgcmVwZWF0OiAxLFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgIGlzQmxpbmtpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVyZW5kZXIgaGVhZFxuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVIZWFkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSGVhZCgpIHtcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgaGVhZC5uYW1lID0gXCJIZWFkXCI7XG4gICAgICBoZWFkID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fSGVhZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKCk7XG4gICAgICBzY2VuZS5hZGQoaGVhZC5tZXNoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsb29wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgIHZhciB4VGFyZ2V0ID0gbW91c2VQb3MueCAtIHdpbmRvd0hhbGZYO1xuICAgICAgdmFyIHlUYXJnZXQgPSBtb3VzZVBvcy55IC0gd2luZG93SGFsZlk7XG5cbiAgICAgIHRoaXMuYmxpbmtMb29wKCk7XG4gICAgICBoZWFkLnNlbmRlcih4VGFyZ2V0LCB5VGFyZ2V0KTtcblxuICAgICAgLy9oZWFkLnJlY2lldmVyKHhUYXJnZXQsIHlUYXJnZXQpO1xuXG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhbnRhU2NlbmU7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoU2FudGFTY2VuZSk7XG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1N0YXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fSGVhcnRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXG5cblxudmFyIGdyb3VwID0gdm9pZCAwO1xudmFyIHN0YXJBcnJheSA9IFtdO1xuXG52YXIgSGVhcnRzR3JvdXAgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhlYXJ0c0dyb3VwKHR5cGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhcnRzR3JvdXApO1xuXG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5uU3RhcnMgPSAxNTtcblxuICAgIHZhciBzdGVwQW5nbGUgPSBNYXRoLlBJICogMiAvIHRoaXMublN0YXJzO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBTdGFyc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uU3RhcnM7IGkrKykge1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3RhcnMnOlxuICAgICAgICAgIHRoaXMucyA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1N0YXJfX1tcImFcIiAvKiBkZWZhdWx0ICovXSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoZWFydHMnOlxuICAgICAgICAgIHRoaXMucyA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX0hlYXJ0X19bXCJhXCIgLyogZGVmYXVsdCAqL10oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIGEgPSBzdGVwQW5nbGUgKiBpO1xuICAgICAgdmFyIHIgPSAxNTtcblxuICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueSA9IE1hdGguc2luKGEpICogcjtcbiAgICAgIHRoaXMucy5tZXNoLnBvc2l0aW9uLnggPSBNYXRoLmNvcyhhKSAqIHI7XG5cbiAgICAgIHRoaXMucy5tZXNoLnJvdGF0aW9uLnogPSBhICsgTWF0aC5QSSAvIDI7XG4gICAgICB0aGlzLnMubWVzaC5wb3NpdGlvbi56ID0gMCAtIE1hdGgucmFuZG9tKCkgKiAzO1xuXG4gICAgICAvLyByYW5kb20gc2NhbGUgZm9yIGVhY2ggY2xvdWRcbiAgICAgIHZhciBzYyA9IDAuNSArIE1hdGgucmFuZG9tKCkgKiAuNjtcbiAgICAgIHRoaXMucy5tZXNoLnNjYWxlLnNldChzYywgc2MsIHNjKTtcblxuICAgICAgdGhpcy5tZXNoLmFkZCh0aGlzLnMubWVzaCk7XG4gICAgICBzdGFyQXJyYXkucHVzaCh0aGlzLnMpO1xuICAgIH1cblxuICAgIHRoaXMubWVzaC5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtMTc7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSA4O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhlYXJ0c0dyb3VwLCBbe1xuICAgIGtleTogJ3NwaW5TY2FsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNwaW5TY2FsZSgpIHtcbiAgICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ICs9IDAuMDI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBzdGFyQXJyYXlbaV0ubWVzaC5yb3RhdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDEpICogTWF0aC5QSSAqIDAuMSA7XG4gICAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnogKz0gMCAtIE1hdGgucmFuZG9tKCkgKiAwLjE1O1xuICAgICAgICBzdGFyQXJyYXlbaV0ubWVzaC5yb3RhdGlvbi54ICs9IDAgLSBNYXRoLnJhbmRvbSgpICogMC4wNTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGVhcnRzR3JvdXA7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoSGVhcnRzR3JvdXApO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fb2JqZWN0c19jb2xvcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cblxudmFyIFN0YXIgPSBmdW5jdGlvbiBTdGFyKCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Rhcik7XG5cbiAgLy8gU1RBUlxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHRoaXMubWVzaCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuXG4gIHZhciBwdHMgPSBbXSxcbiAgICAgIG51bVB0cyA9IDU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtUHRzICogMjsgaSsrKSB7XG4gICAgdmFyIGwgPSBpICUgMiA9PSAxID8gMSA6IDI7XG4gICAgdmFyIGEgPSBpIC8gbnVtUHRzICogTWF0aC5QSTtcbiAgICBwdHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihNYXRoLmNvcyhhKSAqIGwsIE1hdGguc2luKGEpICogbCkpO1xuICB9XG4gIHZhciBzdGFyU2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUocHRzKTtcblxuICB2YXIgZXh0cnVkZVNldHRpbmdzID0ge1xuICAgIGFtb3VudDogMC41LFxuICAgIHN0ZXBzOiAxLFxuICAgIGJldmVsRW5hYmxlZDogZmFsc2VcbiAgfTtcbiAgdmFyIHN0YXJHZW9tID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeShzdGFyU2hhcGUsIGV4dHJ1ZGVTZXR0aW5ncyk7XG4gIHZhciBtYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uYmxhY2ssIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuICB2YXIgc3RhciA9IG5ldyBUSFJFRS5NZXNoKHN0YXJHZW9tLCBtYXQpO1xuICBzdGFyLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcbiAgdGhpcy5tZXNoLmFkZChzdGFyKTtcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoU3Rhcik7XG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSGVhcnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhlYXJ0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWFydCk7XG5cbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcblxuICAgIHZhciB4ID0gMCxcbiAgICAgICAgeSA9IDA7XG4gICAgdmFyIGhlYXJ0U2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUoKTtcblxuICAgIGhlYXJ0U2hhcGUubW92ZVRvKHggKyAyNSwgeSArIDI1KTtcbiAgICBoZWFydFNoYXBlLmJlemllckN1cnZlVG8oeCArIDI1LCB5ICsgMjUsIHggKyAyMCwgeSwgeCwgeSk7XG4gICAgaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKHggLSAzMCwgeSwgeCAtIDMwLCB5ICsgMzUsIHggLSAzMCwgeSArIDM1KTtcbiAgICBoZWFydFNoYXBlLmJlemllckN1cnZlVG8oeCAtIDMwLCB5ICsgNTUsIHggLSAxMCwgeSArIDc3LCB4ICsgMjUsIHkgKyA5NSk7XG4gICAgaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKHggKyA2MCwgeSArIDc3LCB4ICsgODAsIHkgKyA1NSwgeCArIDgwLCB5ICsgMzUpO1xuICAgIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyh4ICsgODAsIHkgKyAzNSwgeCArIDgwLCB5LCB4ICsgNTAsIHkpO1xuICAgIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyh4ICsgMzUsIHksIHggKyAyNSwgeSArIDI1LCB4ICsgMjUsIHkgKyAyNSk7XG5cbiAgICB2YXIgZXh0cnVkZVNldHRpbmdzID0ge1xuICAgICAgYW1vdW50OiAyMCxcbiAgICAgIGJldmVsRW5hYmxlZDogdHJ1ZSxcbiAgICAgIGJldmVsU2VnbWVudHM6IDIsXG4gICAgICBzdGVwczogMixcbiAgICAgIGJldmVsU2l6ZTogMSxcbiAgICAgIGJldmVsVGhpY2tuZXNzOiAxXG4gICAgfTtcblxuICAgIHRoaXMuYWRkU2hhcGUoaGVhcnRTaGFwZSwgZXh0cnVkZVNldHRpbmdzLCAweGY5YzQyMSwgMCwgMCwgMCwgMCwgMSwgTWF0aC5QSSwgMC4wMyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGVhcnQsIFt7XG4gICAga2V5OiBcImFkZFNoYXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNoYXBlKHNoYXBlLCBleHRydWRlU2V0dGluZ3MsIGNvbG9yLCB4LCB5LCB6LCByeCwgcnksIHJ6LCBzKSB7XG4gICAgICAvLyBleHRydWRlZCBzaGFwZVxuXG4gICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuRXh0cnVkZUdlb21ldHJ5KHNoYXBlLCBleHRydWRlU2V0dGluZ3MpO1xuXG4gICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogY29sb3IgfSkpO1xuICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoeCwgeSwgeik7XG4gICAgICBtZXNoLnJvdGF0aW9uLnNldChyeCwgcnksIHJ6KTtcbiAgICAgIG1lc2guc2NhbGUuc2V0KHMsIHMsIHMpO1xuICAgICAgdGhpcy5tZXNoLmFkZChtZXNoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGVhcnQ7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoSGVhcnQpO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGpzL3NhbnRhLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDMyOGU0N2NkYmM5N2UzMGQ5MTAzIiwiY29uc3QgQ29sb3JzID0ge1xuICBza2luOiAweGZmZTBiZCxcbiAgZnJlY2tsZXM6IDB4Y2ZiYTk2LFxuICB3aGl0ZTogMHhlOWViZWUsXG4gIGdsYXNzZXM6IDB4ZjljNDIxLFxuICB0ZWV0aDogMHhmZmZmZmYsXG4gIGJsYWNrOiAweDJlMmUyZSxcbiAgZXllOiAweDYyOTVhOCxcbiAgaGF0OiAweDcyMDMxNFxufTtcbmV4cG9ydCBkZWZhdWx0IENvbG9ycztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9vYmplY3RzL2NvbG9ycy5qcyIsImltcG9ydCBDb2xvcnMgZnJvbSAnLi4vb2JqZWN0cy9jb2xvcnMnO1xuaW1wb3J0IE1hdCBmcm9tICcuLi9vYmplY3RzL01hdGVyaWFscyc7XG5cbmxldCBpc0JsaW5raW5nID0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLm1lc2gubmFtZSA9IFwiSGVhZFwiO1xuXG4gICAgbGV0IGhlYWRHZW9tID0gbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KDE2LCAxNiwgMTYpO1xuICAgIGxldCBza2luTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuc2tpbiwgZmxhdFNoYWRpbmc6IHRydWV9KTtcbiAgICBsZXQgZXllTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmV5ZSwgZmxhdFNoYWRpbmc6IHRydWV9KTtcblxuICAgIHRoaXMuaGVhZCA9IG5ldyBUSFJFRS5NZXNoKGhlYWRHZW9tLHNraW5NYXQpO1xuICAgIHRoaXMuaGVhZC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICB0aGlzLmhlYWQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMubWVzaC5hZGQodGhpcy5oZWFkKTtcblxuICAgIHRoaXMuYmVhcmQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmJlYXJkLnBvc2l0aW9uLnkgPSAtNztcbiAgICB0aGlzLmJlYXJkLnBvc2l0aW9uLnogPSAwLjU7XG4gICAgdGhpcy5oZWFkLmFkZCh0aGlzLmJlYXJkKTtcbiAgICBsZXQgc3RhcnM7XG5cbiAgICB0aGlzLkJlYXJkKCk7XG4gICAgdGhpcy5HbGFzc2VzKCk7XG4gICAgdGhpcy5IYWlyKCk7XG4gICAgdGhpcy5FeWVzKCk7XG4gICAgdGhpcy5FeWVCcm93cygpO1xuICAgIHRoaXMuSGF0KCk7XG4gICAgdGhpcy5GcmVja2xlcygpO1xuICAgIHRoaXMuRmVhdHVyZXMoKTtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtMTc7XG4gIH1cblxuICBub3JtYWxpemUodiwgdm1pbiwgdm1heCwgdG1pbiwgdG1heCkge1xuICAgIGNvbnN0IG52ID0gTWF0aC5tYXgoTWF0aC5taW4odiwgdm1heCksIHZtaW4pO1xuICAgIGNvbnN0IGR2ID0gdm1heCAtIHZtaW47XG4gICAgY29uc3QgcGMgPSAobnYgLSB2bWluKSAvIGR2O1xuICAgIGNvbnN0IGR0ID0gdG1heCAtIHRtaW47XG4gICAgY29uc3QgdHYgPSB0bWluICsgKHBjICogZHQpO1xuICAgIHJldHVybiB0djtcbiAgfVxuXG4gIHVwZGF0ZVJlY2lldmVyKHNwZWVkLCBoZWFkUG9zWSwgaGVhZFBvc1gsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZLCBleWVCcm93UmlnaHRQb3NZLCBleWVCcm93TGVmdFBvc1kpIHtcbiAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54ICs9IChleWVCbHVlUmlnaHRQb3NYIC0gdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueCkgLyBzcGVlZDtcbiAgICB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnggKz0gKGV5ZUJsdWVMZWZ0UG9zWCAtIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCkgLyBzcGVlZDtcblxuICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJsdWVSaWdodFBvc1kgLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueSArPSAoZXllQmx1ZUxlZnRQb3NZIC0gdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuXG4gICAgdGhpcy5leWVCcm93UmlnaHQucG9zaXRpb24ueSArPSAoZXllQnJvd1JpZ2h0UG9zWSAtIHRoaXMuZXllQnJvd1JpZ2h0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgdGhpcy5leWVCcm93TGVmdC5wb3NpdGlvbi55ICs9IChleWVCcm93TGVmdFBvc1kgLSB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgdGhpcy5oZWFkLnJvdGF0aW9uLnggKz0gKGhlYWRQb3NYIC0gdGhpcy5oZWFkLnJvdGF0aW9uLngpIC8gc3BlZWQ7XG4gICAgdGhpcy5oZWFkLnJvdGF0aW9uLnkgKz0gKGhlYWRQb3NZIC0gdGhpcy5oZWFkLnJvdGF0aW9uLnkpIC8gc3BlZWQ7XG4gIH1cblxuICByZWNpZXZlcih4VGFyZ2V0ID0gMCwgeVRhcmdldCA9IDApIHtcblxuICAgIGxldCBkaXN0YW5jZSA9IDE7XG5cbiAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIE1hdGguUEkgKiAwLjA1O1xuICAgIHRoaXMubW91c3RhY2hlLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDI7XG5cbiAgICBjb25zdCBoZWFkUG9zWCA9IHRoaXMubm9ybWFsaXplKHlUYXJnZXQsIC0yMDAsIDIwMCwgLTAuMSwgMC4xKTtcbiAgICBjb25zdCBoZWFkUG9zWSA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTAuMSwgMC4xKTtcblxuICAgIGNvbnN0IGV5ZUJsdWVSaWdodFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjYsIDAuNik7XG4gICAgY29uc3QgZXllQmx1ZUxlZnRQb3NYID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMC42LCAwLjYpO1xuXG4gICAgY29uc3QgZXllQmx1ZVJpZ2h0UG9zWSA9IHRoaXMubm9ybWFsaXplKHlUYXJnZXQsIC0yMDAsIDIwMCwgMC42LCAtMC42KTtcbiAgICBjb25zdCBleWVCbHVlTGVmdFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh5VGFyZ2V0LCAtMjAwLCAyMDAsIDAuNiwgLTAuNik7XG5cbiAgICBjb25zdCBleWVCcm93UmlnaHRQb3NZID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMSwgMC44KTtcbiAgICBjb25zdCBleWVCcm93TGVmdFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0xLCAwLjgpO1xuXG4gICAgdGhpcy5tb3VzdGFjaGUucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAxKSAqIGRpc3RhbmNlIC8gNDtcbiAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDEpICogTWF0aC5QSSAqIDAuMDE7XG5cbiAgICB0aGlzLnVwZGF0ZVJlY2lldmVyKDEwLCBoZWFkUG9zWSwgaGVhZFBvc1gsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZLCBleWVCcm93UmlnaHRQb3NZLCBleWVCcm93TGVmdFBvc1kpO1xuICB9XG5cbiAgdXBkYXRlU2VuZGVyKHNwZWVkLCBleWVCbHVlUmlnaHRQb3NYLCBleWVCbHVlTGVmdFBvc1gsIGV5ZUJsdWVSaWdodFBvc1ksIGV5ZUJsdWVMZWZ0UG9zWSwgZXllQnJvd1JpZ2h0UG9zWSwgZXllQnJvd0xlZnRQb3NZKSB7XG4gICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueCArPSAoZXllQmx1ZVJpZ2h0UG9zWCAtIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLngpIC8gc3BlZWQ7XG4gICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi54ICs9IChleWVCbHVlTGVmdFBvc1ggLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLngpIC8gc3BlZWQ7XG5cbiAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55ICs9IChleWVCbHVlUmlnaHRQb3NZIC0gdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueSkgLyBzcGVlZDtcbiAgICB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnkgKz0gKGV5ZUJsdWVMZWZ0UG9zWSAtIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueSkgLyBzcGVlZDtcblxuICAgIHRoaXMuZXllQnJvd1JpZ2h0LnBvc2l0aW9uLnkgKz0gKGV5ZUJyb3dSaWdodFBvc1kgLSB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICAgIHRoaXMuZXllQnJvd0xlZnQucG9zaXRpb24ueSArPSAoZXllQnJvd0xlZnRQb3NZIC0gdGhpcy5leWVCcm93TGVmdC5wb3NpdGlvbi55KSAvIHNwZWVkO1xuICB9XG5cbiAgc2VuZGVyKHhUYXJnZXQgPSAwLCB5VGFyZ2V0ID0gMCkge1xuICAgIGxldCBkaXN0YW5jZSA9IDE7XG5cbiAgICB0aGlzLmhlYWQucm90YXRpb24ueiA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwNSkgKiBNYXRoLlBJICogMC4wMDU7XG4gICAgdGhpcy5oZWFkLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDQpICogTWF0aC5QSSAqIDAuMDM7XG5cbiAgICBjb25zdCBleWVCbHVlUmlnaHRQb3NYID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMC42LCAwLjYpO1xuICAgIGNvbnN0IGV5ZUJsdWVMZWZ0UG9zWCA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTAuNiwgMC42KTtcblxuICAgIGNvbnN0IGV5ZUJsdWVSaWdodFBvc1kgPSB0aGlzLm5vcm1hbGl6ZSh5VGFyZ2V0LCAtMjAwLCAyMDAsIDAuNiwgLTAuNik7XG4gICAgY29uc3QgZXllQmx1ZUxlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgY29uc3QgZXllQnJvd1JpZ2h0UG9zWSA9IHRoaXMubm9ybWFsaXplKHhUYXJnZXQsIC0yMDAsIDIwMCwgLTEsIDAuOCk7XG4gICAgY29uc3QgZXllQnJvd0xlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeFRhcmdldCwgLTIwMCwgMjAwLCAtMSwgMC44KTtcblxuICAgIHRoaXMubW91c3RhY2hlLnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMSkgKiBkaXN0YW5jZSAvIDQ7XG4gICAgdGhpcy5tb3VzdGFjaGUucm90YXRpb24ueiA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAxKSAqIE1hdGguUEkgKiAwLjAxO1xuXG4gICAgdGhpcy5tZXNoLnJvdGF0aW9uLnkgPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDIpICogTWF0aC5QSSAqIDAuMDUgKyAwLjI1O1xuICAgIHRoaXMudXBkYXRlU2VuZGVyKDEwLCBleWVCbHVlUmlnaHRQb3NYLCBleWVCbHVlTGVmdFBvc1gsIGV5ZUJsdWVSaWdodFBvc1ksIGV5ZUJsdWVMZWZ0UG9zWSwgZXllQnJvd1JpZ2h0UG9zWSwgZXllQnJvd0xlZnRQb3NZKTtcbiAgfVxuXG4gIEJlYXJkKCkge1xuICAgIGxldCBiZWFyZEdlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgIGxldCBiZWFyZDFHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDIsIDEwLCAxNik7XG5cbiAgICBsZXQgYmVhcmQxID0gbmV3IFRIUkVFLk1lc2goYmVhcmQxR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oOSwgMCwgMCkpO1xuICAgIGJlYXJkMS51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQxLmdlb21ldHJ5LCBiZWFyZDEubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDIgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDFHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig3LCAtMiwgMikpO1xuICAgIGJlYXJkMi5zY2FsZS56ID0gMC44O1xuICAgIGJlYXJkMi51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQyLmdlb21ldHJ5LCBiZWFyZDIubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDMgPSBiZWFyZDEuY2xvbmUoKTtcbiAgICBiZWFyZDMucG9zaXRpb24ueCA9IC1iZWFyZDEucG9zaXRpb24ueDtcbiAgICBiZWFyZDMudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMy5nZW9tZXRyeSwgYmVhcmQzLm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQ0ID0gYmVhcmQyLmNsb25lKCk7XG4gICAgYmVhcmQ0LnBvc2l0aW9uLnggPSAtYmVhcmQyLnBvc2l0aW9uLng7XG4gICAgYmVhcmQ0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDQuZ2VvbWV0cnksIGJlYXJkNC5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkMkdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMywgMTQsIDEwKTtcbiAgICBiZWFyZDJHZW9tLnZlcnRpY2VzWzJdLnogLT0gMjtcbiAgICBiZWFyZDJHZW9tLnZlcnRpY2VzWzddLnogLT0gMjtcblxuICAgIGxldCBiZWFyZDUgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDJHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkNS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig1LCAtNSwgNCkpO1xuICAgIGJlYXJkNS51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ1Lmdlb21ldHJ5LCBiZWFyZDUubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDNHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDIuNSwgMTQsIDEwKTtcbiAgICBiZWFyZDNHZW9tLnZlcnRpY2VzWzJdLnogLT0gMjtcbiAgICBiZWFyZDNHZW9tLnZlcnRpY2VzWzddLnogLT0gMjtcblxuICAgIGxldCBiZWFyZDYgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDNHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkNi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigyLjUsIC02LCA2KSk7XG4gICAgYmVhcmQ2LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDYuZ2VvbWV0cnksIGJlYXJkNi5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkNyA9IGJlYXJkNS5jbG9uZSgpO1xuICAgIGJlYXJkNy5wb3NpdGlvbi54ID0gLWJlYXJkNS5wb3NpdGlvbi54O1xuICAgIGJlYXJkNy51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ3Lmdlb21ldHJ5LCBiZWFyZDcubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDggPSBiZWFyZDYuY2xvbmUoKTtcbiAgICBiZWFyZDgucG9zaXRpb24ueCA9IC1iZWFyZDYucG9zaXRpb24ueDtcbiAgICBiZWFyZDgudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkOC5nZW9tZXRyeSwgYmVhcmQ4Lm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQ0R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLjUsIDE0LjUsIDEwKTtcbiAgICBiZWFyZDRHZW9tLnZlcnRpY2VzWzJdLnogLT0gMTtcbiAgICBiZWFyZDRHZW9tLnZlcnRpY2VzWzddLnogLT0gMTtcblxuICAgIGxldCBiZWFyZDkgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDRHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkOS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAtNywgNS43NSkpO1xuICAgIGJlYXJkOS51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ5Lmdlb21ldHJ5LCBiZWFyZDkubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDVHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDQsIDgsIDgpO1xuICAgIGxldCBiZWFyZDEwID0gbmV3IFRIUkVFLk1lc2goYmVhcmQ1R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDEwLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC02LCAtMSwgLTIpKTtcbiAgICBiZWFyZDEwLnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDEwLmdlb21ldHJ5LCBiZWFyZDEwLm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQxMSA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkNUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgYmVhcmQxMS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAtNSwgLTIpKTtcbiAgICBiZWFyZDExLnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDExLmdlb21ldHJ5LCBiZWFyZDExLm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmRNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChiZWFyZEdlb21NZXJnZWQsIE1hdC53aGl0ZU1hdCk7XG4gICAgYmVhcmRNZXJnZWQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgYmVhcmRNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICBsZXQgbW91dGhHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEwLCA0LCAxKTtcbiAgICBsZXQgbW91dGggPSBuZXcgVEhSRUUuTWVzaChtb3V0aEdlb20sIE1hdC5ibGFja01hdCk7XG4gICAgbW91dGgucG9zaXRpb24uc2V0KDAsIDIsIDgpO1xuICAgIG1vdXRoLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBtb3V0aC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgIGxldCB0ZWV0aEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTAsIDEsIDEpO1xuICAgIGxldCB0ZWV0aCA9IG5ldyBUSFJFRS5NZXNoKHRlZXRoR2VvbSwgTWF0LnRlZXRoTWF0KTtcbiAgICB0ZWV0aC5wb3NpdGlvbi5zZXQoMCwgMC41LCAwLjEpO1xuICAgIHRlZXRoLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0ZWV0aC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICBtb3V0aC5hZGQodGVldGgpXG5cbiAgICB0aGlzLmJlYXJkLmFkZChiZWFyZE1lcmdlZCwgbW91dGgpO1xuXG4gICAgbGV0IG1vdXN0YWNoZUdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTQsIDMsIDMsIDMpO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbMF0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbMV0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbMl0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbM10ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbNF0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbNV0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbNl0ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbN10ueSAtPSAyO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbOF0ueCAtPSAxO1xuICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbOV0ueCArPSAxO1xuXG4gICAgbW91c3RhY2hlR2VvbS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCA0LCAwKSk7XG4gICAgdGhpcy5tb3VzdGFjaGUgPSBuZXcgVEhSRUUuTWVzaChtb3VzdGFjaGVHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIHRoaXMubW91c3RhY2hlLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIHRoaXMubW91c3RhY2hlLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgdGhpcy5tb3VzdGFjaGUucG9zaXRpb24uc2V0KDAsIDAsIDkpO1xuICAgIHRoaXMuYmVhcmQuYWRkKHRoaXMubW91c3RhY2hlKTtcbiAgfVxuXG4gIEdsYXNzZXMoKSB7XG5cbiAgICB0aGlzLmdsYXNzZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmdsYXNzZXMucG9zaXRpb24uc2V0KDAsIDAsIDkpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5nbGFzc2VzKTtcbiAgICBsZXQgZ2xhc3Nlc01hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5nbGFzc2VzLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuXG4gICAgbGV0IGZyYW1lR2VvbU1lcmdlZCA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXG4gICAgbGV0IGZyYW1lT3V0ZXJHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMywgMywgMC41LCAzMilcbiAgICBsZXQgZnJhbWVJbm5lckdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgyLjcsIDIuNywgMC41LCAzMilcblxuICAgIGZyYW1lT3V0ZXJHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSSAvIDIpKTtcbiAgICBmcmFtZUlubmVyR2VvbS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoLU1hdGguUEkgLyAyKSk7XG5cbiAgICBsZXQgZnJhbWVCU1AgPSBuZXcgVGhyZWVCU1AoZnJhbWVPdXRlckdlb20pO1xuICAgIGxldCBmcmFtZUN1dEJTUCA9IG5ldyBUaHJlZUJTUChmcmFtZUlubmVyR2VvbSk7XG5cbiAgICBsZXQgZnJhbWVpbnRlcnNlY3Rpb25CU1AgPSBmcmFtZUJTUC5zdWJ0cmFjdChmcmFtZUN1dEJTUCk7XG4gICAgbGV0IGZyYW1lTGVmdCA9IGZyYW1laW50ZXJzZWN0aW9uQlNQLnRvTWVzaChnbGFzc2VzTWF0KTtcblxuICAgIGZyYW1lTGVmdC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig0LCAzLCAwKSk7XG4gICAgZnJhbWVMZWZ0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZUxlZnQuZ2VvbWV0cnksIGZyYW1lTGVmdC5tYXRyaXgpO1xuXG4gICAgbGV0IGZyYW1lUmlnaHQgPSBmcmFtZUxlZnQuY2xvbmUoKTtcbiAgICBmcmFtZVJpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWihNYXRoLlBJIC8gMzApKTtcbiAgICBmcmFtZVJpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC03LjUsIC0wLjI1LCAwKSk7XG4gICAgZnJhbWVSaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVSaWdodC5nZW9tZXRyeSwgZnJhbWVSaWdodC5tYXRyaXgpO1xuXG4gICAgbGV0IGZyYW1lTWlkR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLCAuMywgLjUpO1xuICAgIGxldCBmcmFtZU1pZCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lTWlkR2VvbSwgZ2xhc3Nlc01hdCk7XG4gICAgZnJhbWVNaWQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgMy4zLCAtMC4zKSk7XG4gICAgZnJhbWVNaWQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lTWlkLmdlb21ldHJ5LCBmcmFtZU1pZC5tYXRyaXgpO1xuXG4gICAgbGV0IGZyYW1lRW5kR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLjUsIC41LCAxKTtcbiAgICBsZXQgZnJhbWVFbmRSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lRW5kR2VvbSwgZ2xhc3Nlc01hdCk7XG4gICAgZnJhbWVFbmRSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig3LjUsIDMsIDApKTtcbiAgICBmcmFtZUVuZFJpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZUVuZFJpZ2h0Lmdlb21ldHJ5LCBmcmFtZUVuZFJpZ2h0Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVFbmRMZWZ0ID0gZnJhbWVFbmRSaWdodC5jbG9uZSgpO1xuICAgIGZyYW1lRW5kTGVmdC5wb3NpdGlvbi54ID0gLWZyYW1lRW5kUmlnaHQucG9zaXRpb24ueDtcbiAgICBmcmFtZUVuZExlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lRW5kTGVmdC5nZW9tZXRyeSwgZnJhbWVFbmRMZWZ0Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVTcG9rZUdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMC41LCAxMik7XG4gICAgbGV0IGZyYW1lU3Bva2VSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lU3Bva2VHZW9tLCBnbGFzc2VzTWF0KTtcbiAgICBmcmFtZVNwb2tlUmlnaHQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oOCwgMywgLTUuNSkpO1xuICAgIGZyYW1lU3Bva2VSaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVTcG9rZVJpZ2h0Lmdlb21ldHJ5LCBmcmFtZVNwb2tlUmlnaHQubWF0cml4KTtcblxuICAgIGxldCBmcmFtZVNwb2tlTGVmdCA9IGZyYW1lU3Bva2VSaWdodC5jbG9uZSgpO1xuICAgIGZyYW1lU3Bva2VMZWZ0LnBvc2l0aW9uLnggPSAtZnJhbWVTcG9rZVJpZ2h0LnBvc2l0aW9uLng7XG4gICAgZnJhbWVTcG9rZUxlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lU3Bva2VMZWZ0Lmdlb21ldHJ5LCBmcmFtZVNwb2tlTGVmdC5tYXRyaXgpO1xuXG4gICAgbGV0IGZyYW1lTWVyZ2VkID0gbmV3IFRIUkVFLk1lc2goZnJhbWVHZW9tTWVyZ2VkLCBnbGFzc2VzTWF0KTtcbiAgICBmcmFtZU1lcmdlZC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgZnJhbWVNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICB0aGlzLmdsYXNzZXMuYWRkKGZyYW1lTWVyZ2VkKTtcbiAgfVxuXG4gIEhhaXIoKSB7XG5cbiAgICB0aGlzLmhhaXIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmhhaXIucG9zaXRpb24uc2V0KDAsIDksIDApO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5oYWlyKTtcblxuICAgIGxldCBoYWlyR2VvbU1lcmdlZCA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXG4gICAgbGV0IGhhaXJGbGF0R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgMiwgMTgpO1xuXG4gICAgbGV0IGhhaXIxID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGhhaXIxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDQwKSk7XG4gICAgaGFpcjEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTQsIC0wLjUsIDApKTtcbiAgICBoYWlyMS51cGRhdGVNYXRyaXgoKTtcbiAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyMS5nZW9tZXRyeSwgaGFpcjEubWF0cml4KTtcblxuICAgIGxldCBoYWlyMiA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyAxMCkpO1xuICAgIGhhaXIyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC0yLCAxLCAwKSk7XG4gICAgaGFpcjIudXBkYXRlTWF0cml4KCk7XG4gICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjIuZ2VvbWV0cnksIGhhaXIyLm1hdHJpeCk7XG5cbiAgICBsZXQgaGFpcjMgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgaGFpcjMuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNSkpO1xuICAgIGhhaXIzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDIsIDEsIDApKTtcbiAgICBoYWlyMy51cGRhdGVNYXRyaXgoKTtcbiAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyMy5nZW9tZXRyeSwgaGFpcjMubWF0cml4KTtcblxuICAgIGxldCBoYWlyNCA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyNC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyA0KSk7XG4gICAgaGFpcjQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oNiwgMCwgMCkpO1xuICAgIGhhaXI0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXI0Lmdlb21ldHJ5LCBoYWlyNC5tYXRyaXgpO1xuXG4gICAgbGV0IGhhaXI2ID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGhhaXI2LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIC0zKSk7XG4gICAgaGFpcjYuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTcuNzUsIC0uNSwgMCkpO1xuICAgIGhhaXI2LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXI2Lmdlb21ldHJ5LCBoYWlyNi5tYXRyaXgpO1xuXG4gICAgbGV0IGhhaXJGbGF0QmFja0dlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTgsIDcsIDYpO1xuICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbMF0ueCAtPSAxO1xuICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbMV0ueCAtPSAxO1xuICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbNF0ueCArPSAxO1xuICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbNV0ueCArPSAxO1xuXG4gICAgbGV0IGhhaXI1ID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRCYWNrR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyNS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAtNC41LCAtNikpO1xuICAgIGhhaXI1LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXI1Lmdlb21ldHJ5LCBoYWlyNS5tYXRyaXgpO1xuXG4gICAgbGV0IGhhaXJNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChoYWlyR2VvbU1lcmdlZCwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyTWVyZ2VkLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBoYWlyTWVyZ2VkLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgdGhpcy5oYWlyLmFkZChoYWlyTWVyZ2VkKTtcblxuICB9XG5cbiAgRXllcygpIHtcblxuICAgIHRoaXMuZXllcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMuZXllcy5wb3NpdGlvbi5zZXQoMCwgMywgOSk7XG4gICAgdGhpcy5oZWFkLmFkZCh0aGlzLmV5ZXMpO1xuXG4gICAgbGV0IGV5ZVdoaXRlR2VvbSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDIuNSwgMi41KTtcblxuICAgIGxldCBleWVXaGl0ZVJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllV2hpdGVHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGV5ZVdoaXRlUmlnaHQucG9zaXRpb24uc2V0KC0zLjc1LCAwLCAwKTtcbiAgICBleWVXaGl0ZVJpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBleWVXaGl0ZVJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIGxldCBleWVCbHVlR2VvbSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEuNSwgMS41KTtcblxuICAgIGxldCBleWVNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuZXllLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuXG4gICAgdGhpcy5leWVCbHVlUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChleWVCbHVlR2VvbSwgZXllTWF0KTtcbiAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAxKTtcbiAgICB0aGlzLmV5ZUJsdWVSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5leWVCbHVlUmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgZXllV2hpdGVSaWdodC5hZGQodGhpcy5leWVCbHVlUmlnaHQpO1xuXG4gICAgbGV0IGV5ZVB1cGlsR2VvbSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEpO1xuXG4gICAgdGhpcy5leWVQdXBpbFJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllUHVwaWxHZW9tLCBNYXQuYmxhY2tNYXQpO1xuICAgIHRoaXMuZXllUHVwaWxSaWdodC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAyKTtcbiAgICB0aGlzLmV5ZVB1cGlsUmlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuZXllUHVwaWxSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmV5ZUJsdWVSaWdodC5hZGQodGhpcy5leWVQdXBpbFJpZ2h0KTtcblxuICAgIGxldCBleWVXaGl0ZUxlZnQgPSBuZXcgVEhSRUUuTWVzaChleWVXaGl0ZUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgZXllV2hpdGVMZWZ0LnBvc2l0aW9uLnNldCgzLjc1LCAwLCAwKTtcbiAgICBleWVXaGl0ZUxlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIGV5ZVdoaXRlTGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmV5ZUJsdWVMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZXllQmx1ZUdlb20sIGV5ZU1hdCk7XG4gICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAxKTtcbiAgICB0aGlzLmV5ZUJsdWVMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmV5ZUJsdWVMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIGV5ZVdoaXRlTGVmdC5hZGQodGhpcy5leWVCbHVlTGVmdCk7XG5cbiAgICB0aGlzLmV5ZVB1cGlsTGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVB1cGlsR2VvbSwgTWF0LmJsYWNrTWF0KTtcbiAgICB0aGlzLmV5ZVB1cGlsTGVmdC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAyKTtcbiAgICB0aGlzLmV5ZVB1cGlsTGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5leWVQdXBpbExlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5leWVCbHVlTGVmdC5hZGQodGhpcy5leWVQdXBpbExlZnQpO1xuXG4gICAgdGhpcy5leWVzLmFkZChleWVXaGl0ZVJpZ2h0LCBleWVXaGl0ZUxlZnQpO1xuICB9XG5cbiAgRXllQnJvd3MoKSB7XG4gICAgdGhpcy5leWVCcm93cyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMuZXllQnJvd3MucG9zaXRpb24uc2V0KDAsIDYsIDgpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5leWVCcm93cyk7XG5cbiAgICBsZXQgZXllQnJvd0dlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoNCwgMSwgMSk7XG5cbiAgICB0aGlzLmV5ZUJyb3dSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGV5ZUJyb3dHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIHRoaXMuZXllQnJvd1JpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWihNYXRoLlBJIC8gNDUpKTtcbiAgICB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi5zZXQoLTMuNzUsIDAsIDApO1xuICAgIHRoaXMuZXllQnJvd1JpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmV5ZUJyb3dSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmV5ZUJyb3dMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZXllQnJvd0dlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgdGhpcy5leWVCcm93TGVmdC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyA0NSkpO1xuICAgIHRoaXMuZXllQnJvd0xlZnQucG9zaXRpb24uc2V0KDMuNzUsIDAsIDApO1xuICAgIHRoaXMuZXllQnJvd0xlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuZXllQnJvd0xlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5leWVCcm93cy5hZGQodGhpcy5leWVCcm93UmlnaHQsIHRoaXMuZXllQnJvd0xlZnQpO1xuICB9XG5cbiAgSGF0KCkge1xuICAgIHRoaXMuaGF0ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5oYXQucG9zaXRpb24uc2V0KC0wLjIsIDExLCAyLjQpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5oYXQpO1xuXG4gICAgbGV0IGhhdE1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5oYXQsIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG5cbiAgICBsZXQgYmFuZEdlb20gPSBuZXcgVEhSRUUuVG9ydXNHZW9tZXRyeSg5LCAyLCAxNiwgMTAwKTtcbiAgICBsZXQgYmlnQ29uZUdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgxLCAxMSwgMTIsIDE1KTtcbiAgICBsZXQgc21hbGxDb25lR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDAuOCwgMywgOSwgMzIpO1xuICAgIGxldCBoYXREaW5nbGVHZW9tID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEuNSwgOCwgOCk7XG5cbiAgICB0aGlzLmJhbmQgPSBuZXcgVEhSRUUuTWVzaChiYW5kR2VvbSwgTWF0LnRlZXRoTWF0KTtcbiAgICB0aGlzLmJhbmQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKE1hdGguUEkgLyAyKSk7XG4gICAgdGhpcy5iYW5kLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICB0aGlzLmJhbmQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuYmFuZC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmJpZ0NvbmUgPSBuZXcgVEhSRUUuTWVzaChiaWdDb25lR2VvbSwgaGF0TWF0KTtcbiAgICB0aGlzLmJpZ0NvbmUucG9zaXRpb24uc2V0KDAsIDYsIDApO1xuICAgIHRoaXMuYmlnQ29uZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5iaWdDb25lLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIHRoaXMuc21hbGxDb25lID0gbmV3IFRIUkVFLk1lc2goc21hbGxDb25lR2VvbSwgaGF0TWF0KTtcbiAgICB0aGlzLnNtYWxsQ29uZS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoTWF0aC5QSSAvIDIpKTtcbiAgICB0aGlzLnNtYWxsQ29uZS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblkoTWF0aC5QSSAvIDIpKTtcbiAgICB0aGlzLnNtYWxsQ29uZS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooTWF0aC5QSSAvIC04KSk7XG4gICAgdGhpcy5zbWFsbENvbmUucG9zaXRpb24uc2V0KDQsIDcuOCwgLTEpO1xuICAgIHRoaXMuc21hbGxDb25lLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLnNtYWxsQ29uZS5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmhhdERpbmdsZSA9IG5ldyBUSFJFRS5NZXNoKGhhdERpbmdsZUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgdGhpcy5oYXREaW5nbGUucG9zaXRpb24uc2V0KDksIDUuNSwgLTEpO1xuICAgIHRoaXMuaGF0RGluZ2xlLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmhhdERpbmdsZS5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmhhdC5hZGQodGhpcy5iYW5kLCB0aGlzLmJpZ0NvbmUsIHRoaXMuc21hbGxDb25lLCB0aGlzLmhhdERpbmdsZSk7XG4gIH1cblxuICBGcmVja2xlcygpIHtcbiAgICB0aGlzLmZyZWNrbGVzID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5mcmVja2xlcy5wb3NpdGlvbi5zZXQoMCwgMCwgOCk7XG4gICAgdGhpcy5oZWFkLmFkZCh0aGlzLmZyZWNrbGVzKTtcblxuICAgIGxldCBmcmVja2xlc01hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmZyZWNrbGVzLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuICAgIGxldCBmcmVja2xlc0dlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgIGxldCBmcmVja2xlc0dlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgwLjUsIDAuNSk7XG5cbiAgICBsZXQgZnJlY2tsZTEgPSBuZXcgVEhSRUUuTWVzaChmcmVja2xlc0dlb20sIGZyZWNrbGVzTWF0KTtcbiAgICBmcmVja2xlMS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtNSwgMCwgMC4wMSkpO1xuICAgIGZyZWNrbGUxLnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlMS5nZW9tZXRyeSwgZnJlY2tsZTEubWF0cml4KTtcblxuICAgIGxldCBmcmVja2xlMiA9IGZyZWNrbGUxLmNsb25lKCk7XG4gICAgZnJlY2tsZTIuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTAuNSwgLTEsIDApKTtcbiAgICBmcmVja2xlMi51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTIuZ2VvbWV0cnksIGZyZWNrbGUyLm1hdHJpeCk7XG5cbiAgICBsZXQgZnJlY2tsZTMgPSBmcmVja2xlMS5jbG9uZSgpO1xuICAgIGZyZWNrbGUzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDEsIC0wLjUsIDApKTtcbiAgICBmcmVja2xlMy51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTMuZ2VvbWV0cnksIGZyZWNrbGUzLm1hdHJpeCk7XG5cbiAgICBsZXQgZnJlY2tsZTQgPSBmcmVja2xlMS5jbG9uZSgpO1xuICAgIGZyZWNrbGU0LnBvc2l0aW9uLnggPSAtZnJlY2tsZTEucG9zaXRpb24ueDtcbiAgICBmcmVja2xlNC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTQuZ2VvbWV0cnksIGZyZWNrbGU0Lm1hdHJpeCk7XG4gICAgbGV0IGZyZWNrbGU1ID0gZnJlY2tsZTIuY2xvbmUoKTtcbiAgICBmcmVja2xlNS5wb3NpdGlvbi54ID0gLWZyZWNrbGUyLnBvc2l0aW9uLng7XG4gICAgZnJlY2tsZTUudXBkYXRlTWF0cml4KCk7XG4gICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGU1Lmdlb21ldHJ5LCBmcmVja2xlNS5tYXRyaXgpO1xuICAgIGxldCBmcmVja2xlNiA9IGZyZWNrbGUzLmNsb25lKCk7XG4gICAgZnJlY2tsZTYucG9zaXRpb24ueCA9IC1mcmVja2xlMy5wb3NpdGlvbi54O1xuICAgIGZyZWNrbGU2LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlNi5nZW9tZXRyeSwgZnJlY2tsZTYubWF0cml4KTtcblxuICAgIGxldCBmcmVja2xlZE1lcmdlZCA9IG5ldyBUSFJFRS5NZXNoKGZyZWNrbGVzR2VvbU1lcmdlZCwgZnJlY2tsZXNNYXQpO1xuICAgIGZyZWNrbGVkTWVyZ2VkLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBmcmVja2xlZE1lcmdlZC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLmZyZWNrbGVzLmFkZChmcmVja2xlZE1lcmdlZCk7XG4gIH1cblxuICBGZWF0dXJlcygpIHtcbiAgICBsZXQgZWFyR2VvbSA9IG5ldyBUSFJFRS5Cb3hCdWZmZXJHZW9tZXRyeSgxLjUsIDMsIDEuNSk7XG4gICAgbGV0IHNraW5NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5za2luLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuICAgIGxldCBlYXJSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGVhckdlb20sIHNraW5NYXQpO1xuICAgIGVhclJpZ2h0LnBvc2l0aW9uLnNldCgtOC41LCAxLCAzKTtcbiAgICBlYXJSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgZWFyUmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgbGV0IGVhckxlZnQgPSBuZXcgVEhSRUUuTWVzaChlYXJHZW9tLCBza2luTWF0KTtcbiAgICBlYXJMZWZ0LnBvc2l0aW9uLnNldCg4LjUsIDEsIDMpO1xuICAgIGVhckxlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIGVhckxlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgbGV0IG5vc2VHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMiwgNCwgNCk7XG4gICAgbGV0IG5vc2UgPSBuZXcgVEhSRUUuTWVzaChub3NlR2VvbSwgc2tpbk1hdCk7XG4gICAgbm9zZS5zY2FsZS5zZXQoLjc1LCAxLCAxLjMpO1xuICAgIG5vc2UucG9zaXRpb24uc2V0KDAsIDEsIDgpO1xuICAgIG5vc2UuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIG5vc2UucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5oZWFkLmFkZChlYXJSaWdodCwgZWFyTGVmdCwgbm9zZSk7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgc2NlbmUucmVtb3ZlKHRoaXMuaGVhZCk7XG4gIH1cblxuICBjcmVhdGVIZWFkKCkge1xuICAgIHRoaXMuaGVhZCA9IG5ldyBIZWFkKCk7XG4gICAgdGhpcy5oZWFkLm5hbWUgPSBcIkhlYWRcIjtcbiAgICB0aGlzLmhlYWQuc2VuZGVyKCk7XG4gICAgc2NlbmUuYWRkKHRoaXMuaGVhZC5tZXNoKTtcbiAgfVxuICAvL1xuICAvLyBhZGQoKSB7XG4gIC8vICAgc2NlbmUuYWRkKHRoaXMubWVzaCk7XG4gIC8vIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jbGFzc2VzL0hlYWQuanMiLCIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgQ29sb3JzIGZyb20gJy4vY29sb3JzJztcbmNvbnN0IE1hdGVyaWFscyA9IHtcbiAgXCJ3aGl0ZU1hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy53aGl0ZSwgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgXCJ0ZWV0aE1hdFwiOiBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMudGVldGgsIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIFwiYmxhY2tNYXRcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuYmxhY2ssIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIFwibm9ybWFsTWF0XCI6IG5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwoe30pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXRlcmlhbHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvb2JqZWN0cy9NYXRlcmlhbHMuanMiLCIoZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXVxuXG4gICAgdmFyIGlzRGF0YVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICAgIH1cblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7IGJvZHk6IHRoaXMuX2JvZHlJbml0IH0pXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gICAgcmF3SGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSAnc3RhdHVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXMgOiAyMDBcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtZmV0Y2gnO1xuXG5jb25zdCB1cmwgPSBgL2FwaS9jYXJkc2A7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBjcmVhdGU6ICh7dGV4dCwgaWQsIGZyb20sIGJsb2IsIHRvLCBhdWRpb1NldHRpbmdzLCBoZWFkQ29sb3JzfSkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZCA9IGBQT1NUYDtcbiAgICAvLyBjb25zdCBuZXdGaWxlTmFtZSA9IGAke2lkLnNwbGl0KGAgYCkuam9pbihgX2ApfWA7XG4gICAgY29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHkuYXBwZW5kKGB0ZXh0YCwgdGV4dCk7XG4gICAgYm9keS5hcHBlbmQoYGlkYCwgaWQpO1xuICAgIGJvZHkuYXBwZW5kKGBmcm9tYCwgZnJvbSk7XG4gICAgYm9keS5hcHBlbmQoYHRvYCwgdG8pO1xuICAgIGJvZHkuYXBwZW5kKGBhdWRpb1NldHRpbmdzYCwgYXVkaW9TZXR0aW5ncyk7XG4gICAgYm9keS5hcHBlbmQoYGhlYWRDb2xvcnNgLCBoZWFkQ29sb3JzKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHttZXRob2QsIGJvZHl9KVxuICAgICAgLnRoZW4ociA9PiByLmpzb24oKSk7XG4gIH0sXG5cbiAgcmVhZDogKCkgPT4ge1xuICAgIHJldHVybiBmZXRjaChgJHt1cmx9P2lzQWN0aXZlPXRydWVgKVxuICAgICAgLnRoZW4ociA9PiByLmpzb24oKSk7XG4gIH0sXG5cbiAgcmVhZE9uZTogaWQgPT4ge1xuICAgIGNvbnN0IG1ldGhvZCA9IGBHRVRgO1xuICAgIHJldHVybiBmZXRjaChgJHt1cmx9LyR7aWR9YCwge21ldGhvZH0pLnRoZW4ociA9PiByLmpzb24oKSk7XG4gIH0sXG5cbiAgdXBkYXRlOiAoe3RleHQsIGlkLCBmcm9tLCB0bywgYXVkaW9TZXR0aW5ncywgaGVhZENvbG9yc30pID0+wqB7XG4gICAgY29uc3QgbWV0aG9kID0gYFBVVGA7XG4gICAgY29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHkuYXBwZW5kKGB0ZXh0YCwgdGV4dCk7XG4gICAgYm9keS5hcHBlbmQoYGlkYCwgaWQpO1xuICAgIGJvZHkuYXBwZW5kKGBmcm9tYCwgZnJvbSk7XG4gICAgYm9keS5hcHBlbmQoYHRvYCwgdG8pO1xuICAgIGJvZHkuYXBwZW5kKGBhdWRpb1NldHRpbmdzYCwgYXVkaW9TZXR0aW5ncyk7XG4gICAgYm9keS5hcHBlbmQoYGhlYWRDb2xvcnNgLCBoZWFkQ29sb3JzKTtcblxuICAgIHJldHVybiBmZXRjaChgJHt1cmx9LyR7aWR9YCwge21ldGhvZCwgYm9keX0pLnRoZW4ociA9PiByLmpzb24oKSk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbGliL2NhcmRBUEkuanMiLCJjb25zdCBBdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG5pbXBvcnQgaGFuZGxlU2FudGFBdWRpbyBmcm9tICcuL29iamVjdHMvaGFuZGxlU2FudGFBdWRpbyc7XG5pbXBvcnQgU2FudGFTY2VuZSBmcm9tICcuL2NsYXNzZXMvU2FudGFTY2VuZSc7XG5pbXBvcnQgZ2V0VXJsUGFyYW1ldGVyIGZyb20gJy4vb2JqZWN0cy9nZXRVcmxQYXJhbWV0ZXInO1xuaW1wb3J0IENhcmRBUEkgZnJvbSAnLi9saWIvY2FyZEFQSSc7XG5cbmxldCB0YXJnZXRJZCwgYXVkaW9DdHgsIHNhbnRhO1xuXG5jb25zdCBpbml0ID0gKCkgPT4ge1xuXG4gIHBhcnRpY2xlc0pTLmxvYWQoJ3BhcnRpY2xlcy1qcycsICcuLi9hc3NldHMvcGFydGljbGVzLmpzb24nKTtcblxuICB0YXJnZXRJZCA9IGdldFVybFBhcmFtZXRlcihcImlkXCIpO1xuICBpZiAoIXRhcmdldElkKSB3aW5kb3cubG9jYXRpb24gPSBcImh0dHBzOi8vZXhwZXJpbWVudGFsd2ViLmhlcm9rdWFwcC5jb20vXCI7XG5cbiAgQ2FyZEFQSS5yZWFkT25lKHRhcmdldElkKS50aGVuKGQgPT4ge1xuICAgIGlmIChkLnN0YXR1c0NvZGUpIHdpbmRvdy5sb2NhdGlvbiA9IFwiaHR0cHM6Ly9leHBlcmltZW50YWx3ZWIuaGVyb2t1YXBwLmNvbS9cIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZnJvbWApLmlubmVySFRNTCA9IGAke2QuZnJvbX1gO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB0b2ApLmlubmVySFRNTCA9IGAke2QudG99YDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbWVzc2FnZWApLmlubmVySFRNTCA9IGAke2QudGV4dH1gO1xuXG4gICAgc2FudGEgPSBuZXcgU2FudGFTY2VuZSgpO1xuICAgIHNhbnRhLnNldENvbG9ycyhkKTtcbiAgICBoYW5kbGVTYW50YUF1ZGlvKGQpO1xuICAgIGxvb3AoKTtcbiAgfSk7XG59XG5cbmNvbnN0IGxvb3AgPSAoKSA9PiB7XG4gIHNhbnRhLmxvb3AoKTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xufVxuXG5pbml0KCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc2FudGFTY3JpcHQuanMiLCJjb25zdCBBdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG5pbXBvcnQgSGVhZCBmcm9tICcuLi9jbGFzc2VzL0hlYWQnO1xuXG5sZXQgdGFyZ2V0SWQsIGF1ZGlvQ3R4O1xuY29uc3QgcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwbGF5X3NhbnRhYCk7XG5jb25zdCAkYXVkaW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgYXVkaW9gKTtcblxubGV0IHBpdGNoU2hpZnRlclByb2Nlc3NvcjtcbmxldCBpc1BsYXlpbmcgPSBmYWxzZTtcbmxldCBncmFpblNpemUgPSA1MTIsXG4gICAgcGl0Y2hSYXRpbyA9IDEuMCxcbiAgICBvdmVybGFwUmF0aW8gPSAwLjUwO1xuXG5jb25zdCBoYW5kbGVTYW50YUF1ZGlvID0gY2FydCA9PiB7XG4gIGF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICBjb25zdCBhdWRpb1NldHRpbmdzID0gSlNPTi5wYXJzZShjYXJ0LmF1ZGlvU2V0dGluZ3MpO1xuXG4gIHNldFRpbWVvdXQoKCkgPT7CoHtcbiAgICBjb25zdCBidWZmZXJMb2FkZXIgPSBuZXcgQnVmZmVyTG9hZGVyKFxuICAgICAgYXVkaW9DdHgsIFtgLi91cGxvYWRzLyR7Y2FydC5pZH0ub2dnYF0sIGJ1ZmZlckxpc3QgPT4ge1xuXG4gICAgICAgIGxldCBsb29wID0gZmFsc2U7XG4gICAgICAgIGxldCBzb3VyY2U7XG5cbiAgICAgICAgY29uc3QgJHJlcGVhdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZXBlYXRgKTtcbiAgICAgICAgJHJlcGVhdC5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsICAoKSA9PiB7XG4gICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICRyZXBlYXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMTEzLCAwLCAyNCwgMC40KSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRyZXBlYXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMTUwLCAwLCAzOSwgMSknO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvb3AgPSAhbG9vcDtcbiAgICAgICAgICBpZiAoaXNQbGF5aW5nKSBzb3VyY2Uuc3RvcCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwaXRjaFJhdGlvID0gYXVkaW9TZXR0aW5ncy5waXRjaDtcbiAgICAgICAgb3ZlcmxhcFJhdGlvID0gYXVkaW9TZXR0aW5ncy5vdmVybGFwO1xuXG4gICAgICAgICRhdWRpby5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsICgpID0+IHtcbiAgICAgICAgICBpc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSA9ICcnO1xuICAgICAgICAgIHNvdXJjZSA9IGF1ZGlvQ3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICAgIHNvdXJjZS5idWZmZXIgPSBidWZmZXJMaXN0WzBdO1xuICAgICAgICAgIHNvdXJjZS5sb29wID0gbG9vcDtcbiAgICAgICAgICBzb3VyY2UuY29ubmVjdChwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IpO1xuICAgICAgICAgIHNvdXJjZS5zdGFydCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgICk7XG5cbiAgICBidWZmZXJMb2FkZXIubG9hZCgpO1xuICAgIGluaXRQcm9jZXNzb3IoKTtcblxuICB9LCAxMDAwKTtcbn1cblxuY29uc3QgbGluZWFySW50ZXJwb2xhdGlvbiA9IChhLCBiLCB0KSA9PiB7XG4gIHJldHVybiBhICsgKGIgLSBhKSAqIHQ7XG59O1xuXG5jb25zdCBpbml0UHJvY2Vzc29yID0gKCkgPT4ge1xuXG4gIGlmIChwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IpIHtcbiAgICBwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgaWYgKGF1ZGlvQ3R4LmNyZWF0ZVNjcmlwdFByb2Nlc3Nvcikge1xuICAgIHBpdGNoU2hpZnRlclByb2Nlc3NvciA9IGF1ZGlvQ3R4LmNyZWF0ZVNjcmlwdFByb2Nlc3NvcihncmFpblNpemUsIDEsIDEpO1xuICB9IGVsc2UgaWYgKGF1ZGlvQ3R4LmNyZWF0ZUphdmFTY3JpcHROb2RlKSB7XG4gICAgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yID0gYXVkaW9DdHguY3JlYXRlSmF2YVNjcmlwdE5vZGUoZ3JhaW5TaXplLCAxLCAxKTtcbiAgfVxuXG4gIHBpdGNoU2hpZnRlclByb2Nlc3Nvci5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGdyYWluU2l6ZSAqIDIpO1xuICBwaXRjaFNoaWZ0ZXJQcm9jZXNzb3IuZ3JhaW5XaW5kb3cgPSBoYW5uV2luZG93KGdyYWluU2l6ZSk7XG5cbiAgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yLm9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgIHZhciBpbnB1dERhdGEgPSBldmVudC5pbnB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcbiAgICB2YXIgb3V0cHV0RGF0YSA9IGV2ZW50Lm91dHB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dERhdGEubGVuZ3RoOyBpKyspIHtcblxuICAgICAgLy8gQXBwbHkgdGhlIHdpbmRvdyB0byB0aGUgaW5wdXQgYnVmZmVyXG4gICAgICBpbnB1dERhdGFbaV0gKj0gdGhpcy5ncmFpbldpbmRvd1tpXTtcblxuICAgICAgLy8gU2hpZnQgaGFsZiBvZiB0aGUgYnVmZmVyXG4gICAgICB0aGlzLmJ1ZmZlcltpXSA9IHRoaXMuYnVmZmVyW2kgKyBncmFpblNpemVdO1xuXG4gICAgICAvLyBFbXB0eSB0aGUgYnVmZmVyIHRhaWxcbiAgICAgIHRoaXMuYnVmZmVyW2kgKyBncmFpblNpemVdID0gMC4wO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcGl0Y2ggc2hpZnRlZCBncmFpbiByZS1zYW1wbGluZyBhbmQgbG9vcGluZyB0aGUgaW5wdXRcbiAgICB2YXIgZ3JhaW5EYXRhID0gbmV3IEZsb2F0MzJBcnJheShncmFpblNpemUgKiAyKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDAuMDsgaSA8IGdyYWluU2l6ZTsgaSsrLCBqICs9IHBpdGNoUmF0aW8pIHtcblxuICAgICAgdmFyIGluZGV4ID0gTWF0aC5mbG9vcihqKSAlIGdyYWluU2l6ZTtcbiAgICAgIHZhciBhID0gaW5wdXREYXRhW2luZGV4XTtcbiAgICAgIHZhciBiID0gaW5wdXREYXRhWyhpbmRleCArIDEpICUgZ3JhaW5TaXplXTtcbiAgICAgIGdyYWluRGF0YVtpXSArPSBsaW5lYXJJbnRlcnBvbGF0aW9uKGEsIGIsIGogJSAxLjApICogdGhpcy5ncmFpbldpbmRvd1tpXTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHRoZSBncmFpbiBtdWx0aXBsZSB0aW1lcyBvdmVybGFwcGluZyBpdFxuICAgIGZvciAoaSA9IDA7IGkgPCBncmFpblNpemU7IGkgKz0gTWF0aC5yb3VuZChncmFpblNpemUgKiAoMSAtIG92ZXJsYXBSYXRpbykpKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDw9IGdyYWluU2l6ZTsgaisrKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyW2kgKyBqXSArPSBncmFpbkRhdGFbal07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3V0cHV0IHRoZSBmaXJzdCBoYWxmIG9mIHRoZSBidWZmZXJcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ3JhaW5TaXplOyBpKyspIHtcbiAgICAgIG91dHB1dERhdGFbaV0gPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICB9XG4gIH07XG5cbiAgcGl0Y2hTaGlmdGVyUHJvY2Vzc29yLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pO1xuXG59O1xuXG5jb25zdCBoYW5uV2luZG93ID0gbGVuZ3RoID0+IHtcbiAgY29uc3Qgd2luZG93ID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB3aW5kb3dbaV0gPSAwLjUgKiAoMSAtIE1hdGguY29zKDIgKiBNYXRoLlBJICogaSAvIChsZW5ndGggLSAxKSkpO1xuICB9XG4gIHJldHVybiB3aW5kb3c7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVTYW50YUF1ZGlvO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL29iamVjdHMvaGFuZGxlU2FudGFBdWRpby5qcyIsImNvbnN0IGdldFVybFBhcmFtZXRlciA9IG5hbWUgPT4ge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxdJyk7XG4gIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnW1xcXFw/Jl0nICsgbmFtZSArICc9KFteJiNdKiknKTtcbiAgY29uc3QgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyBmYWxzZSA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFVybFBhcmFtZXRlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9vYmplY3RzL2dldFVybFBhcmFtZXRlci5qcyIsImltcG9ydCBIZWFkIGZyb20gJy4vSGVhZCc7XG5pbXBvcnQgQ29sb3JzIGZyb20gJy4uL29iamVjdHMvY29sb3JzJztcbmltcG9ydCBIZWFydHNHcm91cCBmcm9tICcuL0hlYXJ0c0dyb3VwJztcblxubGV0IHNjZW5lLCBjYW1lcmEsIGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgbmVhclBsYW5lLCBmYXJQbGFuZSwgSEVJR0hULCBXSURUSDtcbmxldCBnbG9iYWxMaWdodCwgc2hhZG93TGlnaHQsIGJhY2tMaWdodCwgbGlnaHQsIHJlbmRlcmVyLCBjb250YWluZXIsIGxvYWRlZDtcbmxldCBoZWFkLCB3aW5kb3dIYWxmWCwgd2luZG93SGFsZlk7XG5sZXQgc3Bpbm5pbmdTaGFwZXM7XG5cbmxldCBtb3VzZVBvcyA9IHsgeDogMCwgeTogMH07XG5sZXQgb25FcnJvclBhZ2UgPSBmYWxzZTtcbmxldCBvbkhvbWUsIGlzQmxpbmtpbmcgPSBmYWxzZTtcblxubGV0IGxvYWRlck1hbmFnZXIgPSBuZXcgVEhSRUUuTG9hZGluZ01hbmFnZXIoKTtcbmxldCBpc01vYmlsZSA9IC9pUGhvbmV8QW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbmNsYXNzIFNhbnRhU2NlbmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNyZWF0ZVNjZW5lKCk7XG4gICAgdGhpcy5jcmVhdGVMaWdodHMoKTtcblxuICAgIGhlYWQgPSBuZXcgSGVhZCgpOyAvLyBzaG93IGFuZCBoYW5kbGUgaGVhZFxuICAgIHNjZW5lLmFkZChoZWFkLm1lc2gpO1xuXG4gICAgd2luZG93LnNjZW5lID0gc2NlbmU7XG4gIH1cblxuICBjcmVhdGVTaGFwZXModHlwZSA9ICdoZWFydHMnKSB7XG4gICAgc3Bpbm5pbmdTaGFwZXMgPSBuZXcgSGVhcnRzR3JvdXAodHlwZSk7XG4gICAgc2NlbmUuYWRkKHNwaW5uaW5nU2hhcGVzLm1lc2gpO1xuICB9XG5cbiAgc3RhcnRTcGlubmluZygpIHtcbiAgICBzcGlubmluZ1NoYXBlcy5zcGluU2NhbGUoKVxuICB9O1xuXG4gIHNldENvbG9ycyhkYXRhKSB7XG4gICAgY29uc3QgaGVhZENvbG9ycyA9IEpTT04ucGFyc2UoZGF0YS5oZWFkQ29sb3JzKTtcblxuICAgIENvbG9ycy5za2luID0gaGVhZENvbG9ycy5za2luO1xuICAgIENvbG9ycy5mcmVja2xlcyA9IGhlYWRDb2xvcnMuZnJlY2tsZXM7XG4gICAgQ29sb3JzLmV5ZSA9IGhlYWRDb2xvcnMuZXllO1xuICAgIENvbG9ycy5nbGFzc2VzID0gaGVhZENvbG9ycy5nbGFzc2VzO1xuICAgIENvbG9ycy5oYXQgPSBoZWFkQ29sb3JzLmhhdDtcblxuICAgIHRoaXMuY3JlYXRlSGVhZCgpO1xuICB9XG5cbiAgZXJyb3JUZXh0KCkge1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBUSFJFRS5Gb250TG9hZGVyKCk7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuXG4gICAgbG9hZGVyLmxvYWQoJy9hc3NldHMvaGVsdmV0aWtlcl9ib2xkLnR5cGVmYWNlLmpzb24nLCBmdW5jdGlvbihmb250KSB7XG5cbiAgICAgIGNvbnN0IHNraW5NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IDB4ZTllYmVlLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuICAgICAgY29uc3QgZm9udFNldHRpbmdzID0ge1xuICAgICAgICBmb250OiBmb250LFxuICAgICAgICBzaXplOiA0LFxuICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgIGN1cnZlU2VnbWVudHM6IDEyLFxuICAgICAgICBiZXZlbEVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpcnN0R2VvbSA9IG5ldyBUSFJFRS5UZXh0R2VvbWV0cnkoJzQwNCBTYW50YScsIGZvbnRTZXR0aW5ncyk7XG4gICAgICBjb25zdCBzZWNvbmRHZW9tID0gbmV3IFRIUkVFLlRleHRHZW9tZXRyeSgnd2VudCBtaXNzaW5nJywgZm9udFNldHRpbmdzKTtcblxuICAgICAgY29uc3QgZmlyc3QgPSBuZXcgVEhSRUUuTWVzaChmaXJzdEdlb20sIHNraW5NYXQpO1xuICAgICAgY29uc3Qgc2Vjb25kID0gbmV3IFRIUkVFLk1lc2goc2Vjb25kR2VvbSwgc2tpbk1hdCk7XG5cbiAgICAgIG1lc2guYWRkKGZpcnN0KTtcbiAgICAgIG1lc2guYWRkKHNlY29uZCk7XG5cbiAgICAgIGZpcnN0LnBvc2l0aW9uLnkgPSA1O1xuICAgICAgZmlyc3QucG9zaXRpb24ueCA9IDQ7XG4gICAgICBtZXNoLnBvc2l0aW9uLnkgPSAtNDtcbiAgICAgIG1lc2gucm90YXRpb24ueSA9IC0wLjM7XG4gICAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVTY2VuZSgpeztcbiAgICBIRUlHSFQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgV0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblxuICAgIHdpbmRvd0hhbGZYID0gV0lEVEggLyAyO1xuICAgIHdpbmRvd0hhbGZZID0gSEVJR0hUIC8gMjtcblxuICAgIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgYXNwZWN0UmF0aW8gPSBXSURUSCAvIEhFSUdIVDtcbiAgICBmaWVsZE9mVmlldyA9IDUwO1xuICAgIG5lYXJQbGFuZSA9IDE7XG4gICAgZmFyUGxhbmUgPSAyMDAwO1xuXG4gICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgbmVhclBsYW5lLCBmYXJQbGFuZSk7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnggPSAwO1xuICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gNzA7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnkgPSAtNTtcblxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FscGhhOiB0cnVlLCBhbnRpYWxpYXM6IHRydWV9KTtcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbzogMSlcbiAgICByZW5kZXJlci5zZXRTaXplKFdJRFRILCBIRUlHSFQpO1xuICAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICByZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNvZnRTaGFkb3dNYXA7XG5cbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJylcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xuICB9XG5cbiAgb25XaW5kb3dSZXNpemUoKSB7XG4gICAgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGggIC8gMS42NztcbiAgICB3aW5kb3dIYWxmWCA9IFdJRFRIIC8gMjtcbiAgICB3aW5kb3dIYWxmWSA9IEhFSUdIVCAvIDI7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXSURUSCwgSEVJR0hUKTtcbiAgICBjYW1lcmEuYXNwZWN0ID0gV0lEVEggLyBIRUlHSFQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlTW92ZShlKSB7XG4gICAgbW91c2VQb3MgPSB7XG4gICAgICB4OiBldmVudC5jbGllbnRYLFxuICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgIH07XG4gIH1cblxuICBoYW5kbGVXaW5kb3dSZXNpemUoZSkge1xuICAgIEhFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBXSURUSCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHJlbmRlcmVyLnNldFNpemUoV0lEVEgsIEhFSUdIVCk7XG4gICAgY2FtZXJhLmFzcGVjdCA9IFdJRFRIIC8gSEVJR0hUO1xuICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gIH1cblxuXG4gIGNyZWF0ZUxpZ2h0cygpIHtcblxuICAgIGdsb2JhbExpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCgweGZmZmZmZiwgMHg1NTU1NTUsIC45KTtcblxuICAgIHNoYWRvd0xpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIC4zKTtcbiAgICBzaGFkb3dMaWdodC5wb3NpdGlvbi5zZXQoMTAwLCAyNTAsIDE3NSk7XG4gICAgc2hhZG93TGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG5cbiAgICBiYWNrTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgLjIpO1xuICAgIGJhY2tMaWdodC5wb3NpdGlvbi5zZXQoLTEwMCwgMjAwLCAxNTApO1xuICAgIGJhY2tMaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcblxuICAgIGlmIChpc01vYmlsZSkgc2hhZG93TGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSBzaGFkb3dMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAxMDI0O1xuICAgIGlmICghaXNNb2JpbGUpIHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gc2hhZG93TGlnaHQuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMjA0ODtcblxuICAgIHNjZW5lLmFkZChnbG9iYWxMaWdodCk7XG4gICAgc2NlbmUuYWRkKHNoYWRvd0xpZ2h0KTtcbiAgICBzY2VuZS5hZGQoYmFja0xpZ2h0KTtcbiAgICBzY2VuZS5hZGQoIG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoIDB4ZWFkZWFkLCAwLjEgKSk7XG4gIH1cblxuXG4gIGJsaW5rTG9vcCgpIHtcbiAgICBpc0JsaW5raW5nID0gZmFsc2U7XG5cbiAgICBpZiAoKCFpc0JsaW5raW5nKSAmJiAoTWF0aC5yYW5kb20oKSA+IDAuOTkpKSB7XG4gICAgICBpc0JsaW5raW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuYmxpbmsoKTtcbiAgICB9XG4gIH1cblxuICBibGluaygpIHtcbiAgICBoZWFkLmV5ZXMuc2NhbGUueSA9IDE7XG4gICAgVHdlZW5NYXgudG8oaGVhZC5leWVzLnNjYWxlLCAuMDcsIHtcbiAgICAgIHk6IDAsXG4gICAgICB5b3lvOiB0cnVlLFxuICAgICAgcmVwZWF0OiAxLFxuICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlzQmxpbmtpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIHJlcmVuZGVyIGhlYWRcbiAgY3JlYXRlSGVhZCgpIHtcbiAgICBzY2VuZS5yZW1vdmUoaGVhZC5tZXNoKTtcbiAgICBoZWFkLm5hbWUgPSBcIkhlYWRcIjtcbiAgICBoZWFkID0gbmV3IEhlYWQoKTtcbiAgICBzY2VuZS5hZGQoaGVhZC5tZXNoKTtcbiAgfVxuXG4gIGxvb3AoKSB7XG4gICAgbGV0IHhUYXJnZXQgPSAobW91c2VQb3MueCAtIHdpbmRvd0hhbGZYKTtcbiAgICBsZXQgeVRhcmdldCA9IChtb3VzZVBvcy55IC0gd2luZG93SGFsZlkpO1xuXG4gICAgdGhpcy5ibGlua0xvb3AoKTtcbiAgICBoZWFkLnNlbmRlcih4VGFyZ2V0LCB5VGFyZ2V0KTtcblxuICAgIC8vaGVhZC5yZWNpZXZlcih4VGFyZ2V0LCB5VGFyZ2V0KTtcblxuICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTYW50YVNjZW5lO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2NsYXNzZXMvU2FudGFTY2VuZS5qcyIsImltcG9ydCBDb2xvcnMgZnJvbSAnLi4vb2JqZWN0cy9jb2xvcnMnO1xuaW1wb3J0IFN0YXIgZnJvbSAnLi9TdGFyJztcbmltcG9ydCBIZWFydCBmcm9tICcuL0hlYXJ0JztcbmxldCBncm91cDtcbmxldCBzdGFyQXJyYXkgPSBbXTtcblxuY2xhc3MgSGVhcnRzR3JvdXAge1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5uU3RhcnMgPSAxNTtcblxuICAgIGxldCBzdGVwQW5nbGUgPSBNYXRoLlBJICogMiAvIHRoaXMublN0YXJzO1xuXG4gICAgIC8vIENyZWF0ZSB0aGUgU3RhcnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMublN0YXJzOyBpKyspIHtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJzJzpcbiAgICAgICAgdGhpcy5zID0gbmV3IFN0YXIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaGVhcnRzJzpcbiAgICAgICAgdGhpcy5zID0gbmV3IEhlYXJ0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBhID0gc3RlcEFuZ2xlICogaTtcbiAgICAgIGxldCByID0gMTU7XG5cbiAgICAgIHRoaXMucy5tZXNoLnBvc2l0aW9uLnkgPSBNYXRoLnNpbihhKSAqIHI7XG4gICAgICB0aGlzLnMubWVzaC5wb3NpdGlvbi54ID0gTWF0aC5jb3MoYSkgKiByO1xuXG4gICAgICB0aGlzLnMubWVzaC5yb3RhdGlvbi56ID0gYSArIE1hdGguUEkgLyAyO1xuICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueiA9IDAgLSBNYXRoLnJhbmRvbSgpICogMztcblxuICAgICAgICAvLyByYW5kb20gc2NhbGUgZm9yIGVhY2ggY2xvdWRcbiAgICAgIGxldCBzYyA9IDAuNSArIE1hdGgucmFuZG9tKCkgKiAuNjtcbiAgICAgIHRoaXMucy5tZXNoLnNjYWxlLnNldChzYywgc2MsIHNjKTtcblxuICAgICAgdGhpcy5tZXNoLmFkZCh0aGlzLnMubWVzaCk7XG4gICAgICBzdGFyQXJyYXkucHVzaCh0aGlzLnMpO1xuICAgIH1cblxuICAgIHRoaXMubWVzaC5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtMTc7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSA4O1xuICB9XG5cbiAgc3BpblNjYWxlKCkge1xuICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ICs9IDAuMDI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMSkgKiBNYXRoLlBJICogMC4xIDtcbiAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnogKz0gMCAtIE1hdGgucmFuZG9tKCkgKiAwLjE1O1xuICAgICAgc3RhckFycmF5W2ldLm1lc2gucm90YXRpb24ueCArPSAwIC0gTWF0aC5yYW5kb20oKSAqIDAuMDU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYXJ0c0dyb3VwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2NsYXNzZXMvSGVhcnRzR3JvdXAuanMiLCJpbXBvcnQgQ29sb3JzIGZyb20gJy4uL29iamVjdHMvY29sb3JzJzsgXG5jbGFzcyBTdGFyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gU1RBUlxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcblxuICAgIGxldCBwdHMgPSBbXSxcbiAgICAgIG51bVB0cyA9IDU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1QdHMgKiAyOyBpKyspIHtcbiAgICAgIGxldCBsID0gaSAlIDIgPT0gMVxuICAgICAgICA/IDFcbiAgICAgICAgOiAyO1xuICAgICAgbGV0IGEgPSBpIC8gbnVtUHRzICogTWF0aC5QSTtcbiAgICAgIHB0cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKE1hdGguY29zKGEpICogbCwgTWF0aC5zaW4oYSkgKiBsKSk7XG4gICAgfVxuICAgIGxldCBzdGFyU2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUocHRzKTtcblxuICAgIGxldCBleHRydWRlU2V0dGluZ3MgPSB7XG4gICAgICBhbW91bnQ6IDAuNSxcbiAgICAgIHN0ZXBzOiAxLFxuICAgICAgYmV2ZWxFbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHN0YXJHZW9tID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeShzdGFyU2hhcGUsIGV4dHJ1ZGVTZXR0aW5ncyk7XG4gICAgbGV0IG1hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmJsYWNrLCBmbGF0U2hhZGluZzogdHJ1ZX0pXG4gICAgbGV0IHN0YXIgPSBuZXcgVEhSRUUuTWVzaChzdGFyR2VvbSwgbWF0KTtcbiAgICBzdGFyLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcbiAgICB0aGlzLm1lc2guYWRkKHN0YXIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvY2xhc3Nlcy9TdGFyLmpzIiwiY2xhc3MgSGVhcnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcblxuICAgIGNvbnN0IHggPSAwLCB5ID0gMDtcbiAgICBjb25zdCBoZWFydFNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKCk7XG5cbiAgICBoZWFydFNoYXBlLm1vdmVUbyh4ICsgMjUsIHkgKyAyNSk7XG4gICAgaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKHggKyAyNSwgeSArIDI1LCB4ICsgMjAsIHksIHgsIHkpO1xuICAgIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyh4IC0gMzAsIHksIHggLSAzMCwgeSArIDM1LCB4IC0gMzAsIHkgKyAzNSk7XG4gICAgaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKHggLSAzMCwgeSArIDU1LCB4IC0gMTAsIHkgKyA3NywgeCArIDI1LCB5ICsgOTUpO1xuICAgIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyh4ICsgNjAsIHkgKyA3NywgeCArIDgwLCB5ICsgNTUsIHggKyA4MCwgeSArIDM1KTtcbiAgICBoZWFydFNoYXBlLmJlemllckN1cnZlVG8oeCArIDgwLCB5ICsgMzUsIHggKyA4MCwgeSwgeCArIDUwLCB5KTtcbiAgICBoZWFydFNoYXBlLmJlemllckN1cnZlVG8oeCArIDM1LCB5LCB4ICsgMjUsIHkgKyAyNSwgeCArIDI1LCB5ICsgMjUpO1xuXG4gICAgY29uc3QgZXh0cnVkZVNldHRpbmdzID0ge1xuICAgICAgYW1vdW50OiAyMCxcbiAgICAgIGJldmVsRW5hYmxlZDogdHJ1ZSxcbiAgICAgIGJldmVsU2VnbWVudHM6IDIsXG4gICAgICBzdGVwczogMixcbiAgICAgIGJldmVsU2l6ZTogMSxcbiAgICAgIGJldmVsVGhpY2tuZXNzOiAxXG4gICAgfTtcblxuICAgIHRoaXMuYWRkU2hhcGUoaGVhcnRTaGFwZSwgZXh0cnVkZVNldHRpbmdzLCAweGY5YzQyMSwgMCwgMCwgMCwgMCwgMSwgTWF0aC5QSSwgMC4wMyk7XG4gIH1cblxuXG4gIGFkZFNoYXBlKHNoYXBlLCBleHRydWRlU2V0dGluZ3MsIGNvbG9yLCB4LCB5LCB6LCByeCwgcnksIHJ6LCBzKSB7XG4gICAgLy8gZXh0cnVkZWQgc2hhcGVcblxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeShzaGFwZSwgZXh0cnVkZVNldHRpbmdzKTtcblxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogY29sb3J9KSk7XG4gICAgbWVzaC5wb3NpdGlvbi5zZXQoeCwgeSwgeik7XG4gICAgbWVzaC5yb3RhdGlvbi5zZXQocngsIHJ5LCByeik7XG4gICAgbWVzaC5zY2FsZS5zZXQocywgcywgcyk7XG4gICAgdGhpcy5tZXNoLmFkZChtZXNoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFydDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jbGFzc2VzL0hlYXJ0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==