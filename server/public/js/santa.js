!function(e){function t(r){if(a[r])return a[r].exports;var i=a[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,r){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=19)}([function(e,t,a){"use strict";var r={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=r},function(e,t,a){"use strict";var r=a(5),i=a.n(r),o="/api/cart";t.a={create:function(e){var t=e.text,a=e.id,r=e.name,n=e.blob,s=""+a.split(" ").join("_"),h=new FormData;return h.append("text",t),h.append("id",a),h.append("name",r),h.append("sound",n,s),i()(o,{method:"POST",body:h}).then(function(e){return e.json()})},read:function(){return i()(o+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return i()(o+"/"+e,{method:"GET"}).then(function(e){return e.json()})}}},,function(e,t,a){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=a(0),o=a(4),n=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),s=function(){function e(){r(this,e),this.mesh=new THREE.Object3D;var t=new THREE.BoxBufferGeometry(16,16,16),a=new THREE.MeshLambertMaterial({color:i.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:i.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,a),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard),this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.idle(),this.normalize()}return n(e,[{key:"normalize",value:function(e,t,a,r,i){return r+(Math.max(Math.min(e,a),t)-t)/(a-t)*(i-r)}},{key:"updateBody",value:function(e,t,a,r,i){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(a-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(r-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(i-this.eyeBlueLeft.position.y)/e}},{key:"idle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var a=this.normalize(e,-200,200,-.6,.6),r=this.normalize(e,-200,200,-.6,.6),i=this.normalize(t,-200,200,.6,-.6),o=this.normalize(t,-200,200,.6,-.6);this.eyeBrowRight.position.y=1*Math.sin(.004*Date.now())/2,this.eyeBrowLeft.position.y=1*Math.cos(.004*Date.now())/2,this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05,this.updateBody(10,a,r,i,o)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),a=new THREE.Mesh(t,o.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=new THREE.Mesh(t,o.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),r.scale.z=.8,r.updateMatrix(),e.merge(r.geometry,r.matrix);var i=a.clone();i.position.x=-a.position.x,i.updateMatrix(),e.merge(i.geometry,i.matrix);var n=r.clone();n.position.x=-r.position.x,n.updateMatrix(),e.merge(n.geometry,n.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,o.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var l=new THREE.BoxGeometry(2.5,14,10);l.vertices[2].z-=2,l.vertices[7].z-=2;var d=new THREE.Mesh(l,o.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var u=h.clone();u.position.x=-h.position.x,u.updateMatrix(),e.merge(u.geometry,u.matrix);var y=d.clone();y.position.x=-d.position.x,y.updateMatrix(),e.merge(y.geometry,y.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var c=new THREE.Mesh(p,o.a.whiteMat);c.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),c.updateMatrix(),e.merge(c.geometry,c.matrix);var w=new THREE.BoxGeometry(4,8,8),E=new THREE.Mesh(w,o.a.whiteMat);E.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),E.updateMatrix(),e.merge(E.geometry,E.matrix);var m=new THREE.Mesh(w,o.a.whiteMat);m.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),m.updateMatrix(),e.merge(m.geometry,m.matrix);var f=new THREE.Mesh(e,o.a.whiteMat);f.castShadow=!0,f.receiveShadow=!0;var M=new THREE.BoxGeometry(10,4,1),x=new THREE.Mesh(M,o.a.blackMat);x.position.set(0,2,8),x.castShadow=!1,x.receiveShadow=!0;var T=new THREE.BoxGeometry(10,1,1),R=new THREE.Mesh(T,o.a.teethMat);R.position.set(0,.5,.1),R.castShadow=!1,R.receiveShadow=!0,x.add(R),this.beard.add(f,x);var v=new THREE.BoxGeometry(14,3,3,3);v.vertices[0].y-=2,v.vertices[1].y-=2,v.vertices[2].y-=2,v.vertices[3].y-=2,v.vertices[4].y-=2,v.vertices[5].y-=2,v.vertices[6].y-=2,v.vertices[7].y-=2,v.vertices[8].x-=1,v.vertices[9].x+=1,v.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(v,o.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:i.a.glasses,flatShading:!0}),t=new THREE.Geometry,a=new THREE.CylinderGeometry(3,3,.5,32),r=new THREE.CylinderGeometry(2.7,2.7,.5,32);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),r.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var o=new ThreeBSP(a),n=new ThreeBSP(r),s=o.subtract(n),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var l=h.clone();l.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),l.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),l.updateMatrix(),t.merge(l.geometry,l.matrix);var d=new THREE.BoxGeometry(2,.3,.5),u=new THREE.Mesh(d,e);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var y=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(y,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var c=p.clone();c.position.x=-p.position.x,c.updateMatrix(),t.merge(c.geometry,c.matrix);var w=new THREE.BoxGeometry(1,.5,12),E=new THREE.Mesh(w,e);E.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),E.updateMatrix(),t.merge(E.geometry,E.matrix);var m=E.clone();m.position.x=-E.position.x,m.updateMatrix(),t.merge(m.geometry,m.matrix);var f=new THREE.Mesh(t,e);f.castShadow=!1,f.receiveShadow=!0,this.glasses.add(f)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),a=new THREE.Mesh(t,o.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=new THREE.Mesh(t,o.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),r.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var i=new THREE.Mesh(t,o.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),i.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var n=new THREE.Mesh(t,o.a.whiteMat);n.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),n.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),n.updateMatrix(),e.merge(n.geometry,n.matrix);var s=new THREE.Mesh(t,o.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var l=new THREE.Mesh(h,o.a.whiteMat);l.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),l.updateMatrix(),e.merge(l.geometry,l.matrix);var d=new THREE.Mesh(e,o.a.whiteMat);d.castShadow=!1,d.receiveShadow=!0,this.hair.add(d)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,o.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var a=new THREE.PlaneGeometry(1.5,1.5),r=new THREE.MeshPhongMaterial({color:i.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(a,r),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var n=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(n,o.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,o.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(a,r),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(n,o.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,o.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,o.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:i.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),a=new THREE.CylinderGeometry(1,11,12,15),r=new THREE.CylinderGeometry(.8,3,9,32),n=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,o.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(a,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(r,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(n,o.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.Geometry,t=new THREE.PlaneGeometry(.5,.5),a=new THREE.MeshLambertMaterial({color:i.a.freckles,flatShading:!0}),r=new THREE.Mesh(t,a);r.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=r.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var n=r.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),n.updateMatrix(),e.merge(n.geometry,n.matrix);var s=r.clone();s.position.x=-r.position.x,s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=o.clone();h.position.x=-o.position.x,h.updateMatrix(),e.merge(h.geometry,h.matrix);var l=n.clone();l.position.x=-n.position.x,l.updateMatrix(),e.merge(l.geometry,l.matrix);var d=new THREE.Mesh(e,a);d.castShadow=!1,d.receiveShadow=!1,this.freckles.add(d)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:i.a.skin,flatShading:!0}),a=new THREE.Mesh(e,t);a.position.set(-8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var r=new THREE.Mesh(e,t);r.position.set(8.5,1,3),r.castShadow=!1,r.receiveShadow=!1;var o=new THREE.CylinderGeometry(1,2,4,4),n=new THREE.Mesh(o,t);n.scale.set(.75,1,1.3),n.position.set(0,1,8),n.castShadow=!1,n.receiveShadow=!1,this.head.add(a,r,n)}}]),e}();t.a=s},function(e,t,a){"use strict";var r=a(0),i={whiteMat:new THREE.MeshLambertMaterial({color:r.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:r.a.teeth,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:r.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=i},function(e,t,a){a(6),e.exports=self.fetch.bind(self)},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!=typeof e&&(e=String(e)),e}function r(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return m.iterable&&(t[Symbol.iterator]=function(){return t}),t}function i(e){this.map={},e instanceof i?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function o(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function n(e){return new Promise(function(t,a){e.onload=function(){t(e.result)},e.onerror=function(){a(e.error)}})}function s(e){var t=new FileReader,a=n(t);return t.readAsArrayBuffer(e),a}function h(e){var t=new FileReader,a=n(t);return t.readAsText(e),a}function l(e){for(var t=new Uint8Array(e),a=new Array(t.length),r=0;r<t.length;r++)a[r]=String.fromCharCode(t[r]);return a.join("")}function d(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function u(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(m.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(m.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(m.arrayBuffer&&m.blob&&M(e))this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!x(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var e=o(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?o(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=o(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(l(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(c)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(e){var t=e.toUpperCase();return T.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var a=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new i(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new i(t.headers)),this.method=y(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a)}function c(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var a=e.split("="),r=a.shift().replace(/\+/g," "),i=a.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(i))}}),t}function w(e){var t=new i;return e.split(/\r?\n/).forEach(function(e){var a=e.split(":"),r=a.shift().trim();if(r){var i=a.join(":").trim();t.append(r,i)}}),t}function E(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new i(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var m={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(m.arrayBuffer)var f=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],M=function(e){return e&&DataView.prototype.isPrototypeOf(e)},x=ArrayBuffer.isView||function(e){return e&&f.indexOf(Object.prototype.toString.call(e))>-1};i.prototype.append=function(e,r){e=t(e),r=a(r);var i=this.map[e];this.map[e]=i?i+","+r:r},i.prototype.delete=function(e){delete this.map[t(e)]},i.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},i.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},i.prototype.set=function(e,r){this.map[t(e)]=a(r)},i.prototype.forEach=function(e,t){for(var a in this.map)this.map.hasOwnProperty(a)&&e.call(t,this.map[a],a,this)},i.prototype.keys=function(){var e=[];return this.forEach(function(t,a){e.push(a)}),r(e)},i.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),r(e)},i.prototype.entries=function(){var e=[];return this.forEach(function(t,a){e.push([a,t])}),r(e)},m.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var T=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},u.call(p.prototype),u.call(E.prototype),E.prototype.clone=function(){return new E(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},E.error=function(){var e=new E(null,{status:0,statusText:""});return e.type="error",e};var R=[301,302,303,307,308];E.redirect=function(e,t){if(-1===R.indexOf(t))throw new RangeError("Invalid status code");return new E(null,{status:t,headers:{location:e}})},e.Headers=i,e.Request=p,e.Response=E,e.fetch=function(e,t){return new Promise(function(a,r){var i=new p(e,t),o=new XMLHttpRequest;o.onload=function(){var e={status:o.status,statusText:o.statusText,headers:w(o.getAllResponseHeaders()||"")};e.url="responseURL"in o?o.responseURL:e.headers.get("X-Request-URL");var t="response"in o?o.response:o.responseText;a(new E(t,e))},o.onerror=function(){r(new TypeError("Network request failed"))},o.ontimeout=function(){r(new TypeError("Network request failed"))},o.open(i.method,i.url,!0),"include"===i.credentials&&(o.withCredentials=!0),"responseType"in o&&m.blob&&(o.responseType="blob"),i.headers.forEach(function(e,t){o.setRequestHeader(t,e)}),o.send(void 0===i._bodyInit?null:i._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},,,,,,,,,,,,,function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(1),i=(a(3),window.AudioContext||window.webkitAudioContext),o=void 0,n=void 0,s=(document.getElementById("play_santa"),function(e){e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var t=new RegExp("[\\?&]"+e+"=([^&#]*)"),a=t.exec(location.search);return null!==a&&decodeURIComponent(a[1].replace(/\+/g," "))});!function(){n=new i,o=s("id"),o||(window.location="https://localhost:8080"),r.a.readOne(o).then(function(e){console.log(e),e.statusCode?window.location="https://localhost:8080":(document.getElementById("name").innerHTML=e.name,document.getElementById("santa_audio").src="./uploads/"+e.sound+".ogg")})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,