!function(e){function t(a){if(i[a])return i[a].exports;var r=i[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var i={};t.m=e,t.c=i,t.d=function(e,i,a){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,i){"use strict";var a={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=a},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=i(0),n=i(4),o=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),s=function(){function e(){a(this,e),this.mesh=new THREE.Object3D;var t=new THREE.BoxBufferGeometry(16,16,16),i=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,i),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard);this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.idle(),this.normalize()}return o(e,[{key:"normalize",value:function(e,t,i,a,r){return a+(Math.max(Math.min(e,i),t)-t)/(i-t)*(r-a)}},{key:"updateBody",value:function(e,t,i,a,r,n,o){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(i-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(a-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(r-this.eyeBlueLeft.position.y)/e,this.eyeBrowRight.position.y+=(n-this.eyeBrowRight.position.y)/e,this.eyeBrowLeft.position.y+=(o-this.eyeBrowLeft.position.y)/e}},{key:"idle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var i=this.normalize(e,-200,200,-.6,.6),a=this.normalize(e,-200,200,-.6,.6),r=this.normalize(t,-200,200,.6,-.6),n=this.normalize(t,-200,200,.6,-.6),o=this.normalize(e,-200,200,-1,.8),s=this.normalize(e,-200,200,-1,.8);this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05,this.updateBody(10,i,a,r,n,o,s)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),a.scale.z=.8,a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=i.clone();r.position.x=-i.position.x,r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=a.clone();o.position.x=-a.position.x,o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,n.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var u=new THREE.BoxGeometry(2.5,14,10);u.vertices[2].z-=2,u.vertices[7].z-=2;var d=new THREE.Mesh(u,n.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var c=h.clone();c.position.x=-h.position.x,c.updateMatrix(),e.merge(c.geometry,c.matrix);var l=d.clone();l.position.x=-d.position.x,l.updateMatrix(),e.merge(l.geometry,l.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var f=new THREE.Mesh(p,n.a.whiteMat);f.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),f.updateMatrix(),e.merge(f.geometry,f.matrix);var y=new THREE.BoxGeometry(4,8,8),w=new THREE.Mesh(y,n.a.whiteMat);w.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),w.updateMatrix(),e.merge(w.geometry,w.matrix);var m=new THREE.Mesh(y,n.a.whiteMat);m.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),m.updateMatrix(),e.merge(m.geometry,m.matrix);var E=new THREE.Mesh(e,n.a.whiteMat);E.castShadow=!0,E.receiveShadow=!0;var v=new THREE.BoxGeometry(10,4,1),x=new THREE.Mesh(v,n.a.blackMat);x.position.set(0,2,8),x.castShadow=!1,x.receiveShadow=!0;var M=new THREE.BoxGeometry(10,1,1),g=new THREE.Mesh(M,n.a.teethMat);g.position.set(0,.5,.1),g.castShadow=!1,g.receiveShadow=!0,x.add(g),this.beard.add(E,x);var R=new THREE.BoxGeometry(14,3,3,3);R.vertices[0].y-=2,R.vertices[1].y-=2,R.vertices[2].y-=2,R.vertices[3].y-=2,R.vertices[4].y-=2,R.vertices[5].y-=2,R.vertices[6].y-=2,R.vertices[7].y-=2,R.vertices[8].x-=1,R.vertices[9].x+=1,R.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(R,n.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:r.a.glasses,flatShading:!0}),t=new THREE.Geometry,i=new THREE.CylinderGeometry(3,3,.5,32),a=new THREE.CylinderGeometry(2.7,2.7,.5,32);i.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var n=new ThreeBSP(i),o=new ThreeBSP(a),s=n.subtract(o),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var u=h.clone();u.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),u.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var d=new THREE.BoxGeometry(2,.3,.5),c=new THREE.Mesh(d,e);c.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),c.updateMatrix(),t.merge(c.geometry,c.matrix);var l=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(l,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var f=p.clone();f.position.x=-p.position.x,f.updateMatrix(),t.merge(f.geometry,f.matrix);var y=new THREE.BoxGeometry(1,.5,12),w=new THREE.Mesh(y,e);w.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),w.updateMatrix(),t.merge(w.geometry,w.matrix);var m=w.clone();m.position.x=-w.position.x,m.updateMatrix(),t.merge(m.geometry,m.matrix);var E=new THREE.Mesh(t,e);E.castShadow=!1,E.receiveShadow=!0,this.glasses.add(E)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),i.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var r=new THREE.Mesh(t,n.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),r.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=new THREE.Mesh(t,n.a.whiteMat);o.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),o.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.Mesh(t,n.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var u=new THREE.Mesh(h,n.a.whiteMat);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),u.updateMatrix(),e.merge(u.geometry,u.matrix);var d=new THREE.Mesh(e,n.a.whiteMat);d.castShadow=!1,d.receiveShadow=!0,this.hair.add(d)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,n.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var i=new THREE.PlaneGeometry(1.5,1.5),a=new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(i,a),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var o=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(o,n.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,n.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(i,a),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(o,n.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:r.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),i=new THREE.CylinderGeometry(1,11,12,15),a=new THREE.CylinderGeometry(.8,3,9,32),o=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,n.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(i,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(a,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(o,n.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.MeshLambertMaterial({color:r.a.freckles,flatShading:!0}),t=new THREE.Geometry,i=new THREE.PlaneGeometry(.5,.5),a=new THREE.Mesh(i,e);a.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),a.updateMatrix(),t.merge(a.geometry,a.matrix);var n=a.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),n.updateMatrix(),t.merge(n.geometry,n.matrix);var o=a.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),o.updateMatrix(),t.merge(o.geometry,o.matrix);var s=a.clone();s.position.x=-a.position.x,s.updateMatrix(),t.merge(s.geometry,s.matrix);var h=n.clone();h.position.x=-n.position.x,h.updateMatrix(),t.merge(h.geometry,h.matrix);var u=o.clone();u.position.x=-o.position.x,u.updateMatrix(),t.merge(u.geometry,u.matrix);var d=new THREE.Mesh(t,e);d.castShadow=!1,d.receiveShadow=!1,this.freckles.add(d)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0}),i=new THREE.Mesh(e,t);i.position.set(-8.5,1,3),i.castShadow=!1,i.receiveShadow=!1;var a=new THREE.Mesh(e,t);a.position.set(8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var n=new THREE.CylinderGeometry(1,2,4,4),o=new THREE.Mesh(n,t);o.scale.set(.75,1,1.3),o.position.set(0,1,8),o.castShadow=!1,o.receiveShadow=!1,this.head.add(i,a,o)}}]),e}();t.a=s},function(e,t,i){i(5),e.exports=self.fetch.bind(self)},function(e,t,i){"use strict";function a(){l=!1}function r(e){if(!e)return void(d!==f&&(d=f,a()));if(e!==d){if(e.length!==f.length)throw new Error("Custom alphabet for shortid must be "+f.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter(function(e,t,i){return t!==i.lastIndexOf(e)});if(t.length)throw new Error("Custom alphabet for shortid must be "+f.length+" unique characters. These characters were not unique: "+t.join(", "));d=e,a()}}function n(e){return r(e),d}function o(e){p.seed(e),c!==e&&(a(),c=e)}function s(){d||r(f);for(var e,t=d.split(""),i=[],a=p.nextValue();t.length>0;)a=p.nextValue(),e=Math.floor(a*t.length),i.push(t.splice(e,1)[0]);return i.join("")}function h(){return l||(l=s())}function u(e){return h()[e]}var d,c,l,p=i(13),f="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";e.exports={characters:n,seed:o,lookup:u,shuffled:h}},function(e,t,i){"use strict";var a=i(0),r={whiteMat:new THREE.MeshLambertMaterial({color:a.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:a.a.teeth,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:a.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=r},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function i(e){return"string"!=typeof e&&(e=String(e)),e}function a(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return m.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function n(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function o(e){return new Promise(function(t,i){e.onload=function(){t(e.result)},e.onerror=function(){i(e.error)}})}function s(e){var t=new FileReader,i=o(t);return t.readAsArrayBuffer(e),i}function h(e){var t=new FileReader,i=o(t);return t.readAsText(e),i}function u(e){for(var t=new Uint8Array(e),i=new Array(t.length),a=0;a<t.length;a++)i[a]=String.fromCharCode(t[a]);return i.join("")}function d(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function c(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(m.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(m.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(m.arrayBuffer&&m.blob&&v(e))this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!x(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?n(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(u(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(f)}),this.json=function(){return this.text().then(JSON.parse)},this}function l(e){var t=e.toUpperCase();return M.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var i=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,i||null==e._bodyInit||(i=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=l(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function f(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var i=e.split("="),a=i.shift().replace(/\+/g," "),r=i.join("=").replace(/\+/g," ");t.append(decodeURIComponent(a),decodeURIComponent(r))}}),t}function y(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var i=e.split(":"),a=i.shift().trim();if(a){var r=i.join(":").trim();t.append(a,r)}}),t}function w(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var m={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(m.arrayBuffer)var E=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],v=function(e){return e&&DataView.prototype.isPrototypeOf(e)},x=ArrayBuffer.isView||function(e){return e&&E.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,a){e=t(e),a=i(a);var r=this.map[e];this.map[e]=r?r+","+a:a},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,a){this.map[t(e)]=i(a)},r.prototype.forEach=function(e,t){for(var i in this.map)this.map.hasOwnProperty(i)&&e.call(t,this.map[i],i,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,i){e.push(i)}),a(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),a(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,i){e.push([i,t])}),a(e)},m.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var M=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},c.call(p.prototype),c.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var g=[301,302,303,307,308];w.redirect=function(e,t){if(-1===g.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=p,e.Response=w,e.fetch=function(e,t){return new Promise(function(i,a){var r=new p(e,t),n=new XMLHttpRequest;n.onload=function(){var e={status:n.status,statusText:n.statusText,headers:y(n.getAllResponseHeaders()||"")};e.url="responseURL"in n?n.responseURL:e.headers.get("X-Request-URL");var t="response"in n?n.response:n.responseText;i(new w(t,e))},n.onerror=function(){a(new TypeError("Network request failed"))},n.ontimeout=function(){a(new TypeError("Network request failed"))},n.open(r.method,r.url,!0),"include"===r.credentials&&(n.withCredentials=!0),"responseType"in n&&m.blob&&(n.responseType="blob"),r.headers.forEach(function(e,t){n.setRequestHeader(t,e)}),n.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,i){"use strict";var a=i(2),r=i.n(a),n="/api/cards";t.a={create:function(e){var t=e.text,i=e.id,a=e.from,o=(e.blob,e.to),s=e.audioSettings,h=e.headColors,u=new FormData;return u.append("text",t),u.append("id",i),u.append("from",a),u.append("to",o),u.append("audioSettings",s),u.append("headColors",h),r()(n,{method:"POST",body:u}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})},update:function(e){var t=e.text,i=e.id,a=e.from,o=e.to,s=e.audioSettings,h=e.headColors,u=new FormData;return u.append("text",t),u.append("id",i),u.append("from",a),u.append("to",o),u.append("audioSettings",s),u.append("headColors",h),r()(n+"/"+i,{method:"PUT",body:u}).then(function(e){return e.json()})}}},function(e,t,i){"use strict";function a(e,t){for(var i,a=0,n="";!i;)n+=e(t>>4*a&15|r()),i=t<Math.pow(16,a+1),a++;return n}var r=i(14);e.exports=a},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=i(1),n=i(0),o=i(9),s=i(6),h=void 0,u=void 0,d=void 0,c=void 0,l=void 0,p=void 0,f=void 0,y=void 0,w=void 0,m=void 0,E=void 0,v=void 0,x=void 0,M=void 0,g=void 0,R=void 0,T=void 0,b=void 0,H=void 0,B=document.getElementById("save"),k={x:0,y:0},S=/iPhone|Android/i.test(navigator.userAgent),P=(new THREE.LoadingManager,!1),L=function(e){e.forEach(function(e){H.addColor(b,e).onChange(function(){switch(e){case"skin":n.a.skin=b.skin;case"freckles":n.a.freckles=b.freckles;case"eye":n.a.eye=b.eye;case"glasses":n.a.glasses=b.glasses;case"hat":n.a.hat=b.hat}h.remove(M.mesh),createHead()})})},A=function(){f=window.innerHeight,y=window.innerWidth/1.67,g=y/2,R=f/2,h=new THREE.Scene,c=y/f,d=50,l=1,p=2e3,u=new THREE.PerspectiveCamera(d,c,l,p),u.position.x=0,u.position.z=70,u.position.y=-5,v=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),v.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),v.setSize(y,f),v.shadowMap.enabled=!0,v.shadowMap.type=THREE.PCFSoftShadowMap,x=document.getElementById("container"),x.appendChild(v.domElement),window.addEventListener("resize",C,!1),document.addEventListener("mousemove",I,!1)},C=function(){f=window.innerHeight,y=window.innerWidth/1.67,g=y/2,R=f/2,v.setSize(y,f),u.aspect=y/f,u.updateProjectionMatrix()},I=function(e){k={x:event.clientX,y:event.clientY}},_=function(){w=new THREE.HemisphereLight(16777215,5592405,.9),m=new THREE.DirectionalLight(16777215,.3),m.position.set(100,250,175),m.castShadow=!0,E=new THREE.DirectionalLight(16777215,.2),E.position.set(-100,200,150),E.castShadow=!0,S&&(m.shadow.mapSize.width=m.shadow.mapSize.height=1024),S||(m.shadow.mapSize.width=m.shadow.mapSize.height=2048),h.add(w),h.add(m),h.add(E),h.add(new THREE.AmbientLight(15392429,.1))},O=!1,j=function(){!(O=!1)&&Math.random()>.99&&(O=!0,D())},D=function(){M.eyes.scale.y=1,TweenMax.to(M.eyes.scale,.07,{y:0,yoyo:!0,repeat:1,onComplete:function(){O=!1}})},G=function e(){a(this,e),this.skin=n.a.skin,this.freckles=n.a.freckles,this.eye=n.a.eye,this.glasses=n.a.glasses,this.hat=n.a.hat},F=function e(){j(),M.idle(t,i);var t=k.x-g,i=k.y-R;v.render(h,u),requestAnimationFrame(e)};!function(){particlesJS.load("particles-js","../assets/particles.json",function(){console.log("callback - particles.js config loaded")}),A(),_(),T=new o.a,M=new r.a,h.add(M.mesh),console.log(T.id),B.addEventListener("click",function(){var e=document.getElementById("name_input"),t=document.getElementById("recipient_input"),i=document.querySelector(".unique_link"),a={pitch:T.pitchRatio,overlap:T.overlap},r={skin:n.a.skin,freckles:n.a.freckles,eye:n.a.eye,glasses:n.a.glasses,hat:n.a.hat};P?s.a.update({text:T.text,id:T.id,from:e.value||"Human",to:t.value||"Fellow Human",audioSettings:JSON.stringify(a),headColors:JSON.stringify(r)}):(P=!0,s.a.create({text:T.text,id:T.id,from:e.value||"Human",to:t.value||"Fellow Human",audioSettings:JSON.stringify(a),headColors:JSON.stringify(r)})),i.innerHTML="https://experimentalweb.herokuapp.com/santa.html?id="+T.id,i.setAttribute("href","https://experimentalweb.herokuapp.com/santa.html?id="+T.id),i.setAttribute("target","_blank")}),H=new dat.GUI,H.domElement.id="gui",H.closed=!0,b=new G,L(["skin","freckles","eye","glasses","hat"]),window.scene=h,F()}()},function(e,t,i){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=i(10),n=i(11),o=i.n(n),s=function(){function e(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,i,a){return i&&e(t.prototype,i),a&&e(t,a),t}}(),h=h||webkitSpeechRecognition,u=u||webkitSpeechGrammarList,d=d||webkitSpeechRecognitionEvent,c=window.AudioContext||window.webkitAudioContext,l=void 0,p=void 0,f="",y=[],w=void 0,m=document.getElementById("field"),E=document.getElementById("record"),v=document.getElementById("audio_controls"),x=(document.getElementById("stop"),void 0),M=!1,g=1,R=.5,T=function(){function e(){var t=this;a(this,e),this.id=o.a.generate(),this.pitchRatio=1,this.overlap=.5,l=new c,p=new h,this.speechSettings(),p.onresult=function(e){return t.gotResult(e)},p.onspeechend=function(e){return t.onSpeechEnd(e)},m.addEventListener("blur",function(){return t.txt=m.value}),navigator.mediaDevices.getUserMedia({audio:!0}).then(function(e){t.mediaRecorder=new MediaRecorder(e),E.addEventListener("click",function(){t.mediaRecorder.start(),p.start(),E.disabled=!0}),t.mediaRecorder.addEventListener("dataavailable",function(e){y.push(e.data)}),t.mediaRecorder.addEventListener("stop",function(){t.blob=new Blob(y,{type:"audio/ogg"}),r.a.create({id:t.id,blob:t.blob}),setTimeout(function(){new BufferLoader(l,["./uploads/"+t.id+".ogg"],function(e){E.addEventListener("click",function(){return e=[]});var i=document.getElementById("repeat");i.addEventListener("click",function(){i.style.backgroundColor=M?"rgba(113, 0, 24, 0.4)":"rgba(150, 0, 39, 1)",M=!M,w.stop()});var a=document.getElementById("pitch");a.addEventListener("change",function(){g=parseFloat(a.value),t.pitchRatio=g}),v.addEventListener("click",function(){w="",w=l.createBufferSource(),w.buffer=e[0],w.connect(x),w.loop=M,w.start()})}).load(),t.initProcessor()},1e3);var e=document.getElementById("overlap");e.addEventListener("change",function(){R=e.value,t.overlap=R}),y=[]})})}return s(e,[{key:"onSpeechEnd",value:function(e){this.mediaRecorder.stop(),p.stop(),E.disabled=!1,E.textContent="Want to try again?",this.txt=m.value}},{key:"gotResult",value:function(e){var t=e.results.length-1;f=e.results[t][0].transcript,m.value=f}},{key:"speechSettings",value:function(){p.continuous=!1,p.lang="en-US",p.interimResults=!1,p.maxAlternatives=1}},{key:"initProcessor",value:function(){var e=function(e,t,i){return e+(t-e)*i};x&&x.disconnect(),l.createScriptProcessor?x=l.createScriptProcessor(512,1,1):l.createJavaScriptNode&&(x=l.createJavaScriptNode(512,1,1)),x.buffer=new Float32Array(1024),x.grainWindow=this.hannWindow(512),x.onaudioprocess=function(t){var i=t.inputBuffer.getChannelData(0),a=t.outputBuffer.getChannelData(0);for(n=0;n<i.length;n++)i[n]*=this.grainWindow[n],this.buffer[n]=this.buffer[n+512],this.buffer[n+512]=0;for(var r=new Float32Array(1024),n=0,o=0;n<512;n++,o+=g){var s=Math.floor(o)%512,h=i[s],u=i[(s+1)%512];r[n]+=e(h,u,o%1)*this.grainWindow[n]}for(n=0;n<512;n+=Math.round(512*(1-R)))for(o=0;o<=512;o++)this.buffer[n+o]+=r[o];for(n=0;n<512;n++)a[n]=this.buffer[n]},x.connect(l.destination)}},{key:"hannWindow",value:function(e){for(var t=new Float32Array(e),i=0;i<e;i++)t[i]=.5*(1-Math.cos(2*Math.PI*i/(e-1)));return t}}]),e}();t.a=T},function(e,t,i){"use strict";var a=i(2),r=i.n(a),n="/api/sounds";t.a={create:function(e){var t=e.id,i=e.blob,a=""+t.split(" ").join("_"),o=new FormData;return o.append("id",t),o.append("sound",i,a),r()(n,{method:"POST",body:o}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})}}},function(e,t,i){"use strict";e.exports=i(12)},function(e,t,i){"use strict";function a(t){return s.seed(t),e.exports}function r(t){return c=t,e.exports}function n(e){return void 0!==e&&s.characters(e),s.shuffled()}function o(){return u(c)}var s=i(3),h=(i(7),i(15)),u=i(16),d=i(17),c=i(18)||0;e.exports=o,e.exports.generate=o,e.exports.seed=a,e.exports.worker=r,e.exports.characters=n,e.exports.decode=h,e.exports.isValid=d},function(e,t,i){"use strict";function a(){return(n=(9301*n+49297)%233280)/233280}function r(e){n=e}var n=1;e.exports={nextValue:a,seed:r}},function(e,t,i){"use strict";function a(){if(!r||!r.getRandomValues)return 48&Math.floor(256*Math.random());var e=new Uint8Array(1);return r.getRandomValues(e),48&e[0]}var r="object"==typeof window&&(window.crypto||window.msCrypto);e.exports=a},function(e,t,i){"use strict";function a(e){var t=r.shuffled();return{version:15&t.indexOf(e.substr(0,1)),worker:15&t.indexOf(e.substr(1,1))}}var r=i(3);e.exports=a},function(e,t,i){"use strict";function a(e){var t="",i=Math.floor(.001*(Date.now()-h));return i===n?r++:(r=0,n=i),t+=o(s.lookup,u),t+=o(s.lookup,e),r>0&&(t+=o(s.lookup,r)),t+=o(s.lookup,i)}var r,n,o=i(7),s=i(3),h=1459707606518,u=6;e.exports=a},function(e,t,i){"use strict";function a(e){if(!e||"string"!=typeof e||e.length<6)return!1;for(var t=r.characters(),i=e.length,a=0;a<i;a++)if(-1===t.indexOf(e[a]))return!1;return!0}var r=i(3);e.exports=a},function(e,t,i){"use strict";e.exports=0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,