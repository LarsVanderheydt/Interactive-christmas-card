!function(e){function t(i){if(a[i])return a[i].exports;var r=a[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,i){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,a){"use strict";var i={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=i},function(e,t,a){"use strict";var i=a(5),r=a.n(i),n="/api/cart";t.a={create:function(e){var t=e.text,a=e.id,i=e.name,o=e.blob,s=""+a.split(" ").join("_"),h=new FormData;return h.append("text",t),h.append("id",a),h.append("name",i),h.append("sound",o,s),r()(n,{method:"POST",body:h}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})}}},function(e,t,a){"use strict";function i(){c=!1}function r(e){if(!e)return void(d!==f&&(d=f,i()));if(e!==d){if(e.length!==f.length)throw new Error("Custom alphabet for shortid must be "+f.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter(function(e,t,a){return t!==a.lastIndexOf(e)});if(t.length)throw new Error("Custom alphabet for shortid must be "+f.length+" unique characters. These characters were not unique: "+t.join(", "));d=e,i()}}function n(e){return r(e),d}function o(e){p.seed(e),l!==e&&(i(),l=e)}function s(){d||r(f);for(var e,t=d.split(""),a=[],i=p.nextValue();t.length>0;)i=p.nextValue(),e=Math.floor(i*t.length),a.push(t.splice(e,1)[0]);return a.join("")}function h(){return c||(c=s())}function u(e){return h()[e]}var d,l,c,p=a(13),f="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";e.exports={characters:n,seed:o,lookup:u,shuffled:h}},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=a(0),n=a(4),o=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),s=function(){function e(){i(this,e),this.mesh=new THREE.Object3D;var t=new THREE.BoxBufferGeometry(16,16,16),a=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,a),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard),this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.idle(),this.normalize()}return o(e,[{key:"normalize",value:function(e,t,a,i,r){return i+(Math.max(Math.min(e,a),t)-t)/(a-t)*(r-i)}},{key:"updateBody",value:function(e,t,a,i,r){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(a-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(i-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(r-this.eyeBlueLeft.position.y)/e}},{key:"idle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var a=this.normalize(e,-200,200,-.6,.6),i=this.normalize(e,-200,200,-.6,.6),r=this.normalize(t,-200,200,.6,-.6),n=this.normalize(t,-200,200,.6,-.6);this.eyeBrowRight.position.y=1*Math.sin(.004*Date.now())/2,this.eyeBrowLeft.position.y=1*Math.cos(.004*Date.now())/2,this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05,this.updateBody(10,a,i,r,n)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),i.scale.z=.8,i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=a.clone();r.position.x=-a.position.x,r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=i.clone();o.position.x=-i.position.x,o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,n.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var u=new THREE.BoxGeometry(2.5,14,10);u.vertices[2].z-=2,u.vertices[7].z-=2;var d=new THREE.Mesh(u,n.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var l=h.clone();l.position.x=-h.position.x,l.updateMatrix(),e.merge(l.geometry,l.matrix);var c=d.clone();c.position.x=-d.position.x,c.updateMatrix(),e.merge(c.geometry,c.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var f=new THREE.Mesh(p,n.a.whiteMat);f.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),f.updateMatrix(),e.merge(f.geometry,f.matrix);var y=new THREE.BoxGeometry(4,8,8),w=new THREE.Mesh(y,n.a.whiteMat);w.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),w.updateMatrix(),e.merge(w.geometry,w.matrix);var m=new THREE.Mesh(y,n.a.whiteMat);m.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),m.updateMatrix(),e.merge(m.geometry,m.matrix);var E=new THREE.Mesh(e,n.a.whiteMat);E.castShadow=!0,E.receiveShadow=!0;var x=new THREE.BoxGeometry(10,4,1),v=new THREE.Mesh(x,n.a.blackMat);v.position.set(0,2,8),v.castShadow=!1,v.receiveShadow=!0;var M=new THREE.BoxGeometry(10,1,1),R=new THREE.Mesh(M,n.a.teethMat);R.position.set(0,.5,.1),R.castShadow=!1,R.receiveShadow=!0,v.add(R),this.beard.add(E,v);var g=new THREE.BoxGeometry(14,3,3,3);g.vertices[0].y-=2,g.vertices[1].y-=2,g.vertices[2].y-=2,g.vertices[3].y-=2,g.vertices[4].y-=2,g.vertices[5].y-=2,g.vertices[6].y-=2,g.vertices[7].y-=2,g.vertices[8].x-=1,g.vertices[9].x+=1,g.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(g,n.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:r.a.glasses,flatShading:!0}),t=new THREE.Geometry,a=new THREE.CylinderGeometry(3,3,.5,32),i=new THREE.CylinderGeometry(2.7,2.7,.5,32);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),i.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var n=new ThreeBSP(a),o=new ThreeBSP(i),s=n.subtract(o),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var u=h.clone();u.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),u.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var d=new THREE.BoxGeometry(2,.3,.5),l=new THREE.Mesh(d,e);l.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),l.updateMatrix(),t.merge(l.geometry,l.matrix);var c=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(c,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var f=p.clone();f.position.x=-p.position.x,f.updateMatrix(),t.merge(f.geometry,f.matrix);var y=new THREE.BoxGeometry(1,.5,12),w=new THREE.Mesh(y,e);w.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),w.updateMatrix(),t.merge(w.geometry,w.matrix);var m=w.clone();m.position.x=-w.position.x,m.updateMatrix(),t.merge(m.geometry,m.matrix);var E=new THREE.Mesh(t,e);E.castShadow=!1,E.receiveShadow=!0,this.glasses.add(E)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),i.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=new THREE.Mesh(t,n.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),r.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=new THREE.Mesh(t,n.a.whiteMat);o.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),o.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.Mesh(t,n.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var u=new THREE.Mesh(h,n.a.whiteMat);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),u.updateMatrix(),e.merge(u.geometry,u.matrix);var d=new THREE.Mesh(e,n.a.whiteMat);d.castShadow=!1,d.receiveShadow=!0,this.hair.add(d)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,n.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var a=new THREE.PlaneGeometry(1.5,1.5),i=new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(a,i),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var o=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(o,n.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,n.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(a,i),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(o,n.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:r.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),a=new THREE.CylinderGeometry(1,11,12,15),i=new THREE.CylinderGeometry(.8,3,9,32),o=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,n.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(a,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(i,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(o,n.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.Geometry,t=new THREE.PlaneGeometry(.5,.5),a=new THREE.MeshLambertMaterial({color:r.a.freckles,flatShading:!0}),i=new THREE.Mesh(t,a);i.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var n=i.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),n.updateMatrix(),e.merge(n.geometry,n.matrix);var o=i.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=i.clone();s.position.x=-i.position.x,s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=n.clone();h.position.x=-n.position.x,h.updateMatrix(),e.merge(h.geometry,h.matrix);var u=o.clone();u.position.x=-o.position.x,u.updateMatrix(),e.merge(u.geometry,u.matrix);var d=new THREE.Mesh(e,a);d.castShadow=!1,d.receiveShadow=!1,this.freckles.add(d)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0}),a=new THREE.Mesh(e,t);a.position.set(-8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var i=new THREE.Mesh(e,t);i.position.set(8.5,1,3),i.castShadow=!1,i.receiveShadow=!1;var n=new THREE.CylinderGeometry(1,2,4,4),o=new THREE.Mesh(n,t);o.scale.set(.75,1,1.3),o.position.set(0,1,8),o.castShadow=!1,o.receiveShadow=!1,this.head.add(a,i,o)}}]),e}();t.a=s},function(e,t,a){"use strict";var i=a(0),r={whiteMat:new THREE.MeshLambertMaterial({color:i.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:i.a.teeth,flatShading:!0}),brownMat:new THREE.MeshLambertMaterial({color:i.a.brown,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:i.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=r},function(e,t,a){a(6),e.exports=self.fetch.bind(self)},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!=typeof e&&(e=String(e)),e}function i(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return m.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function n(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function o(e){return new Promise(function(t,a){e.onload=function(){t(e.result)},e.onerror=function(){a(e.error)}})}function s(e){var t=new FileReader,a=o(t);return t.readAsArrayBuffer(e),a}function h(e){var t=new FileReader,a=o(t);return t.readAsText(e),a}function u(e){for(var t=new Uint8Array(e),a=new Array(t.length),i=0;i<t.length;i++)a[i]=String.fromCharCode(t[i]);return a.join("")}function d(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(m.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(m.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(m.arrayBuffer&&m.blob&&x(e))this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!v(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?n(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(u(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(f)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(e){var t=e.toUpperCase();return M.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var a=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=c(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a)}function f(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var a=e.split("="),i=a.shift().replace(/\+/g," "),r=a.join("=").replace(/\+/g," ");t.append(decodeURIComponent(i),decodeURIComponent(r))}}),t}function y(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var a=e.split(":"),i=a.shift().trim();if(i){var r=a.join(":").trim();t.append(i,r)}}),t}function w(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var m={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(m.arrayBuffer)var E=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],x=function(e){return e&&DataView.prototype.isPrototypeOf(e)},v=ArrayBuffer.isView||function(e){return e&&E.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,i){e=t(e),i=a(i);var r=this.map[e];this.map[e]=r?r+","+i:i},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,i){this.map[t(e)]=a(i)},r.prototype.forEach=function(e,t){for(var a in this.map)this.map.hasOwnProperty(a)&&e.call(t,this.map[a],a,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,a){e.push(a)}),i(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),i(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,a){e.push([a,t])}),i(e)},m.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var M=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},l.call(p.prototype),l.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var R=[301,302,303,307,308];w.redirect=function(e,t){if(-1===R.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=p,e.Response=w,e.fetch=function(e,t){return new Promise(function(a,i){var r=new p(e,t),n=new XMLHttpRequest;n.onload=function(){var e={status:n.status,statusText:n.statusText,headers:y(n.getAllResponseHeaders()||"")};e.url="responseURL"in n?n.responseURL:e.headers.get("X-Request-URL");var t="response"in n?n.response:n.responseText;a(new w(t,e))},n.onerror=function(){i(new TypeError("Network request failed"))},n.ontimeout=function(){i(new TypeError("Network request failed"))},n.open(r.method,r.url,!0),"include"===r.credentials&&(n.withCredentials=!0),"responseType"in n&&m.blob&&(n.responseType="blob"),r.headers.forEach(function(e,t){n.setRequestHeader(t,e)}),n.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,a){"use strict";function i(e,t){for(var a,i=0,n="";!a;)n+=e(t>>4*i&15|r()),a=t<Math.pow(16,i+1),i++;return n}var r=a(14);e.exports=i},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=a(3),n=a(0),o=a(9),s=a(10),h=(a(1),this),u=void 0,d=void 0,l=void 0,c=void 0,p=void 0,f=void 0,y=void 0,w=void 0,m=void 0,E=void 0,x=void 0,v=void 0,M=void 0,R=void 0,g=void 0,T=void 0,b=void 0,H=document.getElementById("save"),B={x:0,y:0},k=function(){y=window.innerHeight,w=window.innerWidth,g=w/2,T=y/2,u=new THREE.Scene,c=w/y,l=50,p=1,f=2e3,d=new THREE.PerspectiveCamera(l,c,p,f),d.position.x=0,d.position.z=70,d.position.y=0,v=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),v.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),v.setSize(w,y),v.shadowMap.enabled=!0,v.shadowMap.type=THREE.PCFSoftShadowMap,M=document.getElementById("container"),M.appendChild(v.domElement),window.addEventListener("resize",S,!1),document.addEventListener("mousemove",P,!1)},S=function(){y=window.innerHeight,w=window.innerWidth,g=w/2,T=y/2,v.setSize(w,y),d.aspect=w/y,d.updateProjectionMatrix()},P=function(e){B={x:event.clientX,y:event.clientY}},L=(new THREE.LoadingManager,/iPhone|Android/i.test(navigator.userAgent)),C=function(){m=new THREE.HemisphereLight(16777215,5592405,.9),E=new THREE.DirectionalLight(16777215,.3),E.position.set(100,250,175),E.castShadow=!0,x=new THREE.DirectionalLight(16777215,.2),x.position.set(-100,200,150),x.castShadow=!0,L&&(E.shadow.mapSize.width=E.shadow.mapSize.height=1024),L||(E.shadow.mapSize.width=E.shadow.mapSize.height=2048),u.add(m),u.add(E),u.add(x),u.add(new THREE.AmbientLight(15392429,.1))},A=function(){R.name="Head",R=new r.a,R.idle(),u.add(R.mesh)},_=!1,I=function(){!(_=!1)&&Math.random()>.99&&(_=!0,j())},j=function(){R.eyes.scale.y=1,TweenMax.to(R.eyes.scale,.07,{y:0,yoyo:!0,repeat:1,onComplete:function(){_=!1}})},D=function e(){i(this,e),this.skin=n.a.skin,this.freckles=n.a.freckles,this.eye=n.a.eye,this.glasses=n.a.glasses,this.hat=n.a.hat},O=function e(){I();var t=B.x-g,a=B.y-T;R.idle(t,a),v.render(u,d),requestAnimationFrame(e)};!function(){particlesJS.load("particles-js","../assets/particles.json",function(){console.log("callback - particles.js config loaded")}),k(),C(),b=new o.a,R=new r.a,u.add(R.mesh),H.addEventListener("click",function(){console.log(b.blob),Object(s.a)({text:b.txt,blob:b.blob})});var e=new D(h.skin,h.freckles,h.eye,h.glasses,h.hat),t=new dat.GUI;t.addColor(e,"skin").onChange(function(){n.a.skin=e.skin,u.remove(R.mesh),A()}),t.addColor(e,"freckles").onChange(function(){n.a.freckles=e.freckles,u.remove(R.mesh),A()}),t.addColor(e,"eye").onChange(function(){n.a.eye=e.eye,u.remove(R.mesh),A()}),t.addColor(e,"glasses").onChange(function(){n.a.glasses=e.glasses,u.remove(R.mesh),A()}),t.addColor(e,"hat").onChange(function(){n.a.hat=e.hat,u.remove(R.mesh),A()}),window.scene=u,O()}()},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),n=n||webkitSpeechRecognition,o=o||webkitSpeechGrammarList,s=s||webkitSpeechRecognitionEvent,h=window.AudioContext||window.webkitAudioContext,u=void 0,d=void 0,l="",c=[],p=document.getElementById("field"),f=document.getElementById("record"),y=function(){function e(){var t=this;i(this,e),d=new n,this.speechSettings(),d.onresult=function(e){return t.gotResult(e)},d.onspeechend=function(e){return t.onSpeechEnd(e)},p.addEventListener("blur",function(){return t.txt=p.value}),this.text="",u=new h,navigator.mediaDevices.getUserMedia({audio:!0}).then(function(e){t.mediaRecorder=new MediaRecorder(e),f.addEventListener("click",function(){t.mediaRecorder.start(),d.start(),f.disabled=!0}),t.mediaRecorder.addEventListener("dataavailable",function(e){return c.push(e.data)}),t.mediaRecorder.addEventListener("stop",function(){t.blob=new Blob(c,{type:"audio/ogg"});var e=URL.createObjectURL(t.blob);document.getElementById("audio_controls").src=e,c=[]})})}return r(e,[{key:"onSpeechEnd",value:function(e){this.mediaRecorder.stop(),d.stop(),f.disabled=!1,f.textContent="Opnieuw proberen?",this.txt=p.value}},{key:"gotResult",value:function(e){var t=e.results.length-1;l=e.results[t][0].transcript,p.value=l}},{key:"speechSettings",value:function(){d.continuous=!1,d.lang="nl-BE",d.interimResults=!1,d.maxAlternatives=1}}]),e}();t.a=y},function(e,t,a){"use strict";var i=a(1),r=a(11),n=a.n(r),o=document.getElementById("name_input"),s=document.querySelector(".unique_link"),h=function(e){var t=e.text,a=e.blob,r=n.a.generate();console.log(o.value),i.a.create({text:t,id:r,name:o.value,blob:a}),s.innerHTML="https://localhost:8080/santa.html?id="+r,s.setAttribute("href","https://localhost:8080/santa.html?id="+r),s.setAttribute("target","_blank")};t.a=h},function(e,t,a){"use strict";e.exports=a(12)},function(e,t,a){"use strict";function i(t){return s.seed(t),e.exports}function r(t){return l=t,e.exports}function n(e){return void 0!==e&&s.characters(e),s.shuffled()}function o(){return u(l)}var s=a(2),h=(a(7),a(15)),u=a(16),d=a(17),l=a(18)||0;e.exports=o,e.exports.generate=o,e.exports.seed=i,e.exports.worker=r,e.exports.characters=n,e.exports.decode=h,e.exports.isValid=d},function(e,t,a){"use strict";function i(){return(n=(9301*n+49297)%233280)/233280}function r(e){n=e}var n=1;e.exports={nextValue:i,seed:r}},function(e,t,a){"use strict";function i(){if(!r||!r.getRandomValues)return 48&Math.floor(256*Math.random());var e=new Uint8Array(1);return r.getRandomValues(e),48&e[0]}var r="object"==typeof window&&(window.crypto||window.msCrypto);e.exports=i},function(e,t,a){"use strict";function i(e){var t=r.shuffled();return{version:15&t.indexOf(e.substr(0,1)),worker:15&t.indexOf(e.substr(1,1))}}var r=a(2);e.exports=i},function(e,t,a){"use strict";function i(e){var t="",a=Math.floor(.001*(Date.now()-h));return a===n?r++:(r=0,n=a),t+=o(s.lookup,u),t+=o(s.lookup,e),r>0&&(t+=o(s.lookup,r)),t+=o(s.lookup,a)}var r,n,o=a(7),s=a(2),h=1459707606518,u=6;e.exports=i},function(e,t,a){"use strict";function i(e){if(!e||"string"!=typeof e||e.length<6)return!1;for(var t=r.characters(),a=e.length,i=0;i<a;i++)if(-1===t.indexOf(e[i]))return!1;return!0}var r=a(2);e.exports=i},function(e,t,a){"use strict";e.exports=0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,