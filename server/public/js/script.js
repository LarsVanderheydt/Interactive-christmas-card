!function(e){function t(i){if(a[i])return a[i].exports;var r=a[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,i){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,a){"use strict";var i={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=i},function(e,t,a){"use strict";var i=a(5),r=a.n(i),n="/api/cart";t.a={create:function(e){var t=e.text,a=e.id,i=e.name,o=e.blob,s=""+a.split(" ").join("_"),h=new FormData;return h.append("text",t),h.append("id",a),h.append("name",i),h.append("sound",o,s),r()(n,{method:"POST",body:h}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})}}},function(e,t,a){"use strict";function i(){c=!1}function r(e){if(!e)return void(d!==y&&(d=y,i()));if(e!==d){if(e.length!==y.length)throw new Error("Custom alphabet for shortid must be "+y.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter(function(e,t,a){return t!==a.lastIndexOf(e)});if(t.length)throw new Error("Custom alphabet for shortid must be "+y.length+" unique characters. These characters were not unique: "+t.join(", "));d=e,i()}}function n(e){return r(e),d}function o(e){p.seed(e),l!==e&&(i(),l=e)}function s(){d||r(y);for(var e,t=d.split(""),a=[],i=p.nextValue();t.length>0;)i=p.nextValue(),e=Math.floor(i*t.length),a.push(t.splice(e,1)[0]);return a.join("")}function h(){return c||(c=s())}function u(e){return h()[e]}var d,l,c,p=a(13),y="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";e.exports={characters:n,seed:o,lookup:u,shuffled:h}},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=a(0),n=a(4),o=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),s=function(){function e(){i(this,e),this.mesh=new THREE.Object3D;var t=new THREE.BoxBufferGeometry(16,16,16),a=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,a),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard),this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.idle(),this.normalize()}return o(e,[{key:"normalize",value:function(e,t,a,i,r){return i+(Math.max(Math.min(e,a),t)-t)/(a-t)*(r-i)}},{key:"updateBody",value:function(e,t,a,i,r){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(a-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(i-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(r-this.eyeBlueLeft.position.y)/e}},{key:"idle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var a=this.normalize(e,-200,200,-.6,.6),i=this.normalize(e,-200,200,-.6,.6),r=this.normalize(t,-200,200,.6,-.6),n=this.normalize(t,-200,200,.6,-.6);this.eyeBrowRight.position.y=1*Math.sin(.004*Date.now())/2,this.eyeBrowLeft.position.y=1*Math.cos(.004*Date.now())/2,this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05,this.updateBody(10,a,i,r,n)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),i.scale.z=.8,i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=a.clone();r.position.x=-a.position.x,r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=i.clone();o.position.x=-i.position.x,o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,n.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var u=new THREE.BoxGeometry(2.5,14,10);u.vertices[2].z-=2,u.vertices[7].z-=2;var d=new THREE.Mesh(u,n.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var l=h.clone();l.position.x=-h.position.x,l.updateMatrix(),e.merge(l.geometry,l.matrix);var c=d.clone();c.position.x=-d.position.x,c.updateMatrix(),e.merge(c.geometry,c.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var y=new THREE.Mesh(p,n.a.whiteMat);y.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),y.updateMatrix(),e.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(4,8,8),w=new THREE.Mesh(f,n.a.whiteMat);w.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),w.updateMatrix(),e.merge(w.geometry,w.matrix);var m=new THREE.Mesh(f,n.a.whiteMat);m.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),m.updateMatrix(),e.merge(m.geometry,m.matrix);var E=new THREE.Mesh(e,n.a.whiteMat);E.castShadow=!0,E.receiveShadow=!0;var x=new THREE.BoxGeometry(10,4,1),v=new THREE.Mesh(x,n.a.blackMat);v.position.set(0,2,8),v.castShadow=!1,v.receiveShadow=!0;var M=new THREE.BoxGeometry(10,1,1),R=new THREE.Mesh(M,n.a.teethMat);R.position.set(0,.5,.1),R.castShadow=!1,R.receiveShadow=!0,v.add(R),this.beard.add(E,v);var g=new THREE.BoxGeometry(14,3,3,3);g.vertices[0].y-=2,g.vertices[1].y-=2,g.vertices[2].y-=2,g.vertices[3].y-=2,g.vertices[4].y-=2,g.vertices[5].y-=2,g.vertices[6].y-=2,g.vertices[7].y-=2,g.vertices[8].x-=1,g.vertices[9].x+=1,g.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(g,n.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:r.a.glasses,flatShading:!0}),t=new THREE.Geometry,a=new THREE.CylinderGeometry(3,3,.5,32),i=new THREE.CylinderGeometry(2.7,2.7,.5,32);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),i.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var n=new ThreeBSP(a),o=new ThreeBSP(i),s=n.subtract(o),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var u=h.clone();u.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),u.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var d=new THREE.BoxGeometry(2,.3,.5),l=new THREE.Mesh(d,e);l.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),l.updateMatrix(),t.merge(l.geometry,l.matrix);var c=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(c,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var y=p.clone();y.position.x=-p.position.x,y.updateMatrix(),t.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(1,.5,12),w=new THREE.Mesh(f,e);w.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),w.updateMatrix(),t.merge(w.geometry,w.matrix);var m=w.clone();m.position.x=-w.position.x,m.updateMatrix(),t.merge(m.geometry,m.matrix);var E=new THREE.Mesh(t,e);E.castShadow=!1,E.receiveShadow=!0,this.glasses.add(E)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),i.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=new THREE.Mesh(t,n.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),r.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=new THREE.Mesh(t,n.a.whiteMat);o.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),o.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.Mesh(t,n.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var u=new THREE.Mesh(h,n.a.whiteMat);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),u.updateMatrix(),e.merge(u.geometry,u.matrix);var d=new THREE.Mesh(e,n.a.whiteMat);d.castShadow=!1,d.receiveShadow=!0,this.hair.add(d)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,n.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var a=new THREE.PlaneGeometry(1.5,1.5),i=new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(a,i),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var o=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(o,n.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,n.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(a,i),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(o,n.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:r.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),a=new THREE.CylinderGeometry(1,11,12,15),i=new THREE.CylinderGeometry(.8,3,9,32),o=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,n.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(a,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(i,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(o,n.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.Geometry,t=new THREE.PlaneGeometry(.5,.5),a=new THREE.MeshLambertMaterial({color:r.a.freckles,flatShading:!0}),i=new THREE.Mesh(t,a);i.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var n=i.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),n.updateMatrix(),e.merge(n.geometry,n.matrix);var o=i.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=i.clone();s.position.x=-i.position.x,s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=n.clone();h.position.x=-n.position.x,h.updateMatrix(),e.merge(h.geometry,h.matrix);var u=o.clone();u.position.x=-o.position.x,u.updateMatrix(),e.merge(u.geometry,u.matrix);var d=new THREE.Mesh(e,a);d.castShadow=!1,d.receiveShadow=!1,this.freckles.add(d)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0}),a=new THREE.Mesh(e,t);a.position.set(-8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var i=new THREE.Mesh(e,t);i.position.set(8.5,1,3),i.castShadow=!1,i.receiveShadow=!1;var n=new THREE.CylinderGeometry(1,2,4,4),o=new THREE.Mesh(n,t);o.scale.set(.75,1,1.3),o.position.set(0,1,8),o.castShadow=!1,o.receiveShadow=!1,this.head.add(a,i,o)}}]),e}();t.a=s},function(e,t,a){"use strict";var i=a(0),r={whiteMat:new THREE.MeshLambertMaterial({color:i.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:i.a.teeth,flatShading:!0}),brownMat:new THREE.MeshLambertMaterial({color:i.a.brown,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:i.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=r},function(e,t,a){a(6),e.exports=self.fetch.bind(self)},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!=typeof e&&(e=String(e)),e}function i(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return m.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function n(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function o(e){return new Promise(function(t,a){e.onload=function(){t(e.result)},e.onerror=function(){a(e.error)}})}function s(e){var t=new FileReader,a=o(t);return t.readAsArrayBuffer(e),a}function h(e){var t=new FileReader,a=o(t);return t.readAsText(e),a}function u(e){for(var t=new Uint8Array(e),a=new Array(t.length),i=0;i<t.length;i++)a[i]=String.fromCharCode(t[i]);return a.join("")}function d(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(m.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(m.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(m.arrayBuffer&&m.blob&&x(e))this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!v(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?n(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(u(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(e){var t=e.toUpperCase();return M.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var a=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=c(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a)}function y(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var a=e.split("="),i=a.shift().replace(/\+/g," "),r=a.join("=").replace(/\+/g," ");t.append(decodeURIComponent(i),decodeURIComponent(r))}}),t}function f(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var a=e.split(":"),i=a.shift().trim();if(i){var r=a.join(":").trim();t.append(i,r)}}),t}function w(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var m={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(m.arrayBuffer)var E=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],x=function(e){return e&&DataView.prototype.isPrototypeOf(e)},v=ArrayBuffer.isView||function(e){return e&&E.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,i){e=t(e),i=a(i);var r=this.map[e];this.map[e]=r?r+","+i:i},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,i){this.map[t(e)]=a(i)},r.prototype.forEach=function(e,t){for(var a in this.map)this.map.hasOwnProperty(a)&&e.call(t,this.map[a],a,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,a){e.push(a)}),i(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),i(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,a){e.push([a,t])}),i(e)},m.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var M=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},l.call(p.prototype),l.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var R=[301,302,303,307,308];w.redirect=function(e,t){if(-1===R.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=p,e.Response=w,e.fetch=function(e,t){return new Promise(function(a,i){var r=new p(e,t),n=new XMLHttpRequest;n.onload=function(){var e={status:n.status,statusText:n.statusText,headers:f(n.getAllResponseHeaders()||"")};e.url="responseURL"in n?n.responseURL:e.headers.get("X-Request-URL");var t="response"in n?n.response:n.responseText;a(new w(t,e))},n.onerror=function(){i(new TypeError("Network request failed"))},n.ontimeout=function(){i(new TypeError("Network request failed"))},n.open(r.method,r.url,!0),"include"===r.credentials&&(n.withCredentials=!0),"responseType"in n&&m.blob&&(n.responseType="blob"),r.headers.forEach(function(e,t){n.setRequestHeader(t,e)}),n.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,a){"use strict";function i(e,t){for(var a,i=0,n="";!a;)n+=e(t>>4*i&15|r()),a=t<Math.pow(16,i+1),i++;return n}var r=a(14);e.exports=i},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=a(3),n=a(0),o=a(9),s=a(10),h=(a(1),this),u=void 0,d=void 0,l=void 0,c=void 0,p=void 0,y=void 0,f=void 0,w=void 0,m=void 0,E=void 0,x=void 0,v=void 0,M=void 0,R=void 0,g=void 0,T=void 0,b=void 0,H=document.getElementById("save"),B={x:0,y:0},k=function(){f=window.innerHeight,w=window.innerWidth,g=w/2,T=f/2,u=new THREE.Scene,c=w/f,l=50,p=1,y=2e3,d=new THREE.PerspectiveCamera(l,c,p,y),d.position.x=0,d.position.z=70,d.position.y=0,v=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),v.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),v.setSize(w,f),v.shadowMap.enabled=!0,v.shadowMap.type=THREE.PCFSoftShadowMap,M=document.getElementById("container"),M.appendChild(v.domElement),window.addEventListener("resize",S,!1),document.addEventListener("mousemove",P,!1)},S=function(){f=window.innerHeight,w=window.innerWidth,g=w/2,T=f/2,v.setSize(w,f),d.aspect=w/f,d.updateProjectionMatrix()},P=function(e){B={x:event.clientX,y:event.clientY}},L=(new THREE.LoadingManager,/iPhone|Android/i.test(navigator.userAgent)),C=function(){m=new THREE.HemisphereLight(16777215,5592405,.9),E=new THREE.DirectionalLight(16777215,.3),E.position.set(100,250,175),E.castShadow=!0,x=new THREE.DirectionalLight(16777215,.2),x.position.set(-100,200,150),x.castShadow=!0,L&&(E.shadow.mapSize.width=E.shadow.mapSize.height=1024),L||(E.shadow.mapSize.width=E.shadow.mapSize.height=2048),u.add(m),u.add(E),u.add(x),u.add(new THREE.AmbientLight(15392429,.1))},A=function(){R.name="Head",R=new r.a,R.idle(),u.add(R.mesh)},_=!1,I=function(){!(_=!1)&&Math.random()>.99&&(_=!0,j())},j=function(){R.eyes.scale.y=1,TweenMax.to(R.eyes.scale,.07,{y:0,yoyo:!0,repeat:1,onComplete:function(){_=!1}})},D=function e(){i(this,e),this.skin=n.a.skin,this.freckles=n.a.freckles,this.eye=n.a.eye,this.glasses=n.a.glasses,this.hat=n.a.hat},O=function e(){I();var t=B.x-g,a=B.y-T;R.idle(t,a),v.render(u,d),requestAnimationFrame(e)};!function(){particlesJS.load("particles-js","../assets/particles.json",function(){console.log("callback - particles.js config loaded")}),k(),C(),b=new o.a,R=new r.a,u.add(R.mesh),H.addEventListener("click",function(){console.log(b.blob),Object(s.a)({text:b.txt,blob:b.blob})});var e=new D(h.skin,h.freckles,h.eye,h.glasses,h.hat),t=new dat.GUI;t.addColor(e,"skin").onChange(function(){n.a.skin=e.skin,u.remove(R.mesh),A()}),t.addColor(e,"freckles").onChange(function(){n.a.freckles=e.freckles,u.remove(R.mesh),A()}),t.addColor(e,"eye").onChange(function(){n.a.eye=e.eye,u.remove(R.mesh),A()}),t.addColor(e,"glasses").onChange(function(){n.a.glasses=e.glasses,u.remove(R.mesh),A()}),t.addColor(e,"hat").onChange(function(){n.a.hat=e.hat,u.remove(R.mesh),A()}),window.scene=u,O()}()},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),n=n||webkitSpeechRecognition,o=o||webkitSpeechGrammarList,s=s||webkitSpeechRecognitionEvent,h=window.AudioContext||window.webkitAudioContext,u=void 0,d=void 0,l="",c=[],p=document.getElementById("field"),y=document.getElementById("record"),f=document.getElementById("audio_controls"),w=function(){function e(){var t=this;i(this,e),d=new n,this.speechSettings(),d.onresult=function(e){return t.gotResult(e)},d.onspeechend=function(e){return t.onSpeechEnd(e)},p.addEventListener("blur",function(){return t.txt=p.value}),navigator.mediaDevices.getUserMedia({audio:!0}).then(function(e){t.mediaRecorder=new MediaRecorder(e),y.addEventListener("click",function(){t.mediaRecorder.start(),d.start(),y.disabled=!0}),t.mediaRecorder.addEventListener("dataavailable",function(e){return c.push(e.data)}),t.mediaRecorder.addEventListener("stop",function(){t.blob=new Blob(c,{type:"audio/ogg"});var e=URL.createObjectURL(t.blob);f.src=e,u=new h;var a=u.createMediaElementSource(f),i=u.createBiquadFilter(),r=document.getElementById("biquadValue"),n=document.getElementById("biquadType");n.addEventListener("change",function(){i.type=n.value}),r.addEventListener("change",function(){i.frequency.value=r.value}),a.connect(i),i.connect(u.destination),c=[]})})}return r(e,[{key:"onSpeechEnd",value:function(e){this.mediaRecorder.stop(),d.stop(),y.disabled=!1,y.textContent="Opnieuw proberen?",this.txt=p.value}},{key:"gotResult",value:function(e){var t=e.results.length-1;l=e.results[t][0].transcript,p.value=l}},{key:"speechSettings",value:function(){d.continuous=!1,d.lang="nl-BE",d.interimResults=!1,d.maxAlternatives=1}}]),e}();t.a=w},function(e,t,a){"use strict";var i=a(1),r=a(11),n=a.n(r),o=document.getElementById("name_input"),s=document.querySelector(".unique_link"),h=function(e){var t=e.text,a=e.blob,r=n.a.generate();console.log(o.value),i.a.create({text:t,id:r,name:o.value,blob:a}),s.innerHTML="https://localhost:8080/santa.html?id="+r,s.setAttribute("href","https://localhost:8080/santa.html?id="+r),s.setAttribute("target","_blank")};t.a=h},function(e,t,a){"use strict";e.exports=a(12)},function(e,t,a){"use strict";function i(t){return s.seed(t),e.exports}function r(t){return l=t,e.exports}function n(e){return void 0!==e&&s.characters(e),s.shuffled()}function o(){return u(l)}var s=a(2),h=(a(7),a(15)),u=a(16),d=a(17),l=a(18)||0;e.exports=o,e.exports.generate=o,e.exports.seed=i,e.exports.worker=r,e.exports.characters=n,e.exports.decode=h,e.exports.isValid=d},function(e,t,a){"use strict";function i(){return(n=(9301*n+49297)%233280)/233280}function r(e){n=e}var n=1;e.exports={nextValue:i,seed:r}},function(e,t,a){"use strict";function i(){if(!r||!r.getRandomValues)return 48&Math.floor(256*Math.random());var e=new Uint8Array(1);return r.getRandomValues(e),48&e[0]}var r="object"==typeof window&&(window.crypto||window.msCrypto);e.exports=i},function(e,t,a){"use strict";function i(e){var t=r.shuffled();return{version:15&t.indexOf(e.substr(0,1)),worker:15&t.indexOf(e.substr(1,1))}}var r=a(2);e.exports=i},function(e,t,a){"use strict";function i(e){var t="",a=Math.floor(.001*(Date.now()-h));return a===n?r++:(r=0,n=a),t+=o(s.lookup,u),t+=o(s.lookup,e),r>0&&(t+=o(s.lookup,r)),t+=o(s.lookup,a)}var r,n,o=a(7),s=a(2),h=1459707606518,u=6;e.exports=i},function(e,t,a){"use strict";function i(e){if(!e||"string"!=typeof e||e.length<6)return!1;for(var t=r.characters(),a=e.length,i=0;i<a;i++)if(-1===t.indexOf(e[i]))return!1;return!0}var r=a(2);e.exports=i},function(e,t,a){"use strict";e.exports=0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvc2NyaXB0LmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAyOWZkOWRiNjVhMzI4ZTg4MjZlZCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvb2JqZWN0cy9jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2xpYi9jYXJ0QVBJLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9hbHBoYWJldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9IZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9vYmplY3RzL01hdGVyaWFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNvbW9ycGhpYy1mZXRjaC9mZXRjaC1ucG0tYnJvd3NlcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9BdWRpby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvb2JqZWN0cy9TYXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9saWIvcmFuZG9tL3JhbmRvbS1mcm9tLXNlZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL3JhbmRvbS9yYW5kb20tYnl0ZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL2J1aWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9pcy12YWxpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9saWIvdXRpbC9jbHVzdGVyLXdvcmtlci1pZC1icm93c2VyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQ29sb3JzIiwic2tpbiIsImZyZWNrbGVzIiwid2hpdGUiLCJnbGFzc2VzIiwidGVldGgiLCJibGFjayIsImV5ZSIsImhhdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fX2RlZmF1bHQiLCJ1cmwiLCJjcmVhdGUiLCJfcmVmIiwidGV4dCIsImlkIiwiYmxvYiIsIm5ld0ZpbGVOYW1lIiwic3BsaXQiLCJqb2luIiwiYm9keSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwibWV0aG9kIiwidGhlbiIsInIiLCJqc29uIiwicmVhZCIsInJlYWRPbmUiLCJyZXNldCIsInNodWZmbGVkIiwic2V0Q2hhcmFjdGVycyIsIl9hbHBoYWJldF8iLCJhbHBoYWJldCIsIk9SSUdJTkFMIiwibGVuZ3RoIiwiRXJyb3IiLCJ1bmlxdWUiLCJmaWx0ZXIiLCJpdGVtIiwiaW5kIiwiYXJyIiwibGFzdEluZGV4T2YiLCJjaGFyYWN0ZXJzIiwic2V0U2VlZCIsInNlZWQiLCJyYW5kb21Gcm9tU2VlZCIsInByZXZpb3VzU2VlZCIsInNodWZmbGUiLCJjaGFyYWN0ZXJJbmRleCIsInNvdXJjZUFycmF5IiwidGFyZ2V0QXJyYXkiLCJuZXh0VmFsdWUiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwic3BsaWNlIiwiZ2V0U2h1ZmZsZWQiLCJsb29rdXAiLCJpbmRleCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJIZWFkIiwidGhpcyIsIm1lc2giLCJUSFJFRSIsIk9iamVjdDNEIiwiaGVhZEdlb20iLCJCb3hCdWZmZXJHZW9tZXRyeSIsInNraW5NYXQiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiY29sb3IiLCJmbGF0U2hhZGluZyIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiaGVhZCIsIk1lc2giLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsImFkZCIsImJlYXJkIiwicG9zaXRpb24iLCJ5IiwieiIsIkJlYXJkIiwiR2xhc3NlcyIsIkhhaXIiLCJFeWVzIiwiRXllQnJvd3MiLCJIYXQiLCJGcmVja2xlcyIsIkZlYXR1cmVzIiwiaWRsZSIsIm5vcm1hbGl6ZSIsInZhbHVlIiwidiIsInZtaW4iLCJ2bWF4IiwidG1pbiIsInRtYXgiLCJtYXgiLCJtaW4iLCJzcGVlZCIsImV5ZUJsdWVSaWdodFBvc1giLCJleWVCbHVlTGVmdFBvc1giLCJleWVCbHVlUmlnaHRQb3NZIiwiZXllQmx1ZUxlZnRQb3NZIiwiZXllQmx1ZVJpZ2h0IiwieCIsImV5ZUJsdWVMZWZ0IiwieFRhcmdldCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInlUYXJnZXQiLCJyb3RhdGlvbiIsInNpbiIsIkRhdGUiLCJub3ciLCJQSSIsImV5ZUJyb3dSaWdodCIsImV5ZUJyb3dMZWZ0IiwiY29zIiwibW91c3RhY2hlIiwidXBkYXRlQm9keSIsImJlYXJkR2VvbU1lcmdlZCIsIkdlb21ldHJ5IiwiYmVhcmQxR2VvbSIsIkJveEdlb21ldHJ5IiwiYmVhcmQxIiwid2hpdGVNYXQiLCJhcHBseU1hdHJpeCIsIk1hdHJpeDQiLCJtYWtlVHJhbnNsYXRpb24iLCJ1cGRhdGVNYXRyaXgiLCJtZXJnZSIsImdlb21ldHJ5IiwibWF0cml4IiwiYmVhcmQyIiwic2NhbGUiLCJiZWFyZDMiLCJjbG9uZSIsImJlYXJkNCIsImJlYXJkMkdlb20iLCJ2ZXJ0aWNlcyIsImJlYXJkNSIsImJlYXJkM0dlb20iLCJiZWFyZDYiLCJiZWFyZDciLCJiZWFyZDgiLCJiZWFyZDRHZW9tIiwiYmVhcmQ5IiwiYmVhcmQ1R2VvbSIsImJlYXJkMTAiLCJiZWFyZDExIiwiYmVhcmRNZXJnZWQiLCJtb3V0aEdlb20iLCJtb3V0aCIsImJsYWNrTWF0Iiwic2V0IiwidGVldGhHZW9tIiwidGVldGhNYXQiLCJtb3VzdGFjaGVHZW9tIiwiZ2xhc3Nlc01hdCIsImZyYW1lR2VvbU1lcmdlZCIsImZyYW1lT3V0ZXJHZW9tIiwiQ3lsaW5kZXJHZW9tZXRyeSIsImZyYW1lSW5uZXJHZW9tIiwibWFrZVJvdGF0aW9uWCIsImZyYW1lQlNQIiwiVGhyZWVCU1AiLCJmcmFtZUN1dEJTUCIsImZyYW1laW50ZXJzZWN0aW9uQlNQIiwic3VidHJhY3QiLCJmcmFtZUxlZnQiLCJ0b01lc2giLCJmcmFtZVJpZ2h0IiwibWFrZVJvdGF0aW9uWiIsImZyYW1lTWlkR2VvbSIsImZyYW1lTWlkIiwiZnJhbWVFbmRHZW9tIiwiZnJhbWVFbmRSaWdodCIsImZyYW1lRW5kTGVmdCIsImZyYW1lU3Bva2VHZW9tIiwiZnJhbWVTcG9rZVJpZ2h0IiwiZnJhbWVTcG9rZUxlZnQiLCJmcmFtZU1lcmdlZCIsImhhaXIiLCJoYWlyR2VvbU1lcmdlZCIsImhhaXJGbGF0R2VvbSIsImhhaXIxIiwiaGFpcjIiLCJoYWlyMyIsImhhaXI0IiwiaGFpcjYiLCJoYWlyRmxhdEJhY2tHZW9tIiwiaGFpcjUiLCJoYWlyTWVyZ2VkIiwiZXllcyIsImV5ZVdoaXRlR2VvbSIsIlBsYW5lR2VvbWV0cnkiLCJleWVXaGl0ZVJpZ2h0IiwiZXllQmx1ZUdlb20iLCJleWVNYXQiLCJleWVQdXBpbEdlb20iLCJleWVQdXBpbFJpZ2h0IiwiZXllV2hpdGVMZWZ0IiwiZXllUHVwaWxMZWZ0IiwiZXllQnJvd3MiLCJleWVCcm93R2VvbSIsImhhdE1hdCIsImJhbmRHZW9tIiwiVG9ydXNHZW9tZXRyeSIsImJpZ0NvbmVHZW9tIiwic21hbGxDb25lR2VvbSIsImhhdERpbmdsZUdlb20iLCJTcGhlcmVHZW9tZXRyeSIsImJhbmQiLCJiaWdDb25lIiwic21hbGxDb25lIiwibWFrZVJvdGF0aW9uWSIsImhhdERpbmdsZSIsImZyZWNrbGVzR2VvbU1lcmdlZCIsImZyZWNrbGVzR2VvbSIsImZyZWNrbGVzTWF0IiwiZnJlY2tsZTEiLCJmcmVja2xlMiIsImZyZWNrbGUzIiwiZnJlY2tsZTQiLCJmcmVja2xlNSIsImZyZWNrbGU2IiwiZnJlY2tsZWRNZXJnZWQiLCJlYXJHZW9tIiwiZWFyUmlnaHQiLCJlYXJMZWZ0Iiwibm9zZUdlb20iLCJub3NlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19jb2xvcnNfXyIsIk1hdGVyaWFscyIsImJyb3duTWF0IiwiYnJvd24iLCJub3JtYWxNYXQiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJzZWxmIiwiZmV0Y2giLCJiaW5kIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsInN1cHBvcnQiLCJpdGVyYWJsZSIsIlN5bWJvbCIsIkhlYWRlcnMiLCJoZWFkZXJzIiwibWFwIiwiZm9yRWFjaCIsIkFycmF5IiwiaXNBcnJheSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiUHJvbWlzZSIsInJlamVjdCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlc29sdmUiLCJvbmxvYWQiLCJyZXN1bHQiLCJvbmVycm9yIiwiZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsImJ1ZmZlckNsb25lIiwic2xpY2UiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIkJsb2IiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiZm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyVmlldyIsInR5cGUiLCJyZWplY3RlZCIsImRlY29kZSIsIkpTT04iLCJwYXJzZSIsIm5vcm1hbGl6ZU1ldGhvZCIsInVwY2FzZWQiLCJ0b1VwcGVyQ2FzZSIsIm1ldGhvZHMiLCJpbmRleE9mIiwiUmVxdWVzdCIsImlucHV0Iiwib3B0aW9ucyIsImNyZWRlbnRpYWxzIiwibW9kZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUhlYWRlcnMiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnRzIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsIm9rIiwic3RhdHVzVGV4dCIsImUiLCJ2aWV3Q2xhc3NlcyIsIm9iaiIsIkRhdGFWaWV3IiwiaXNWaWV3Iiwib2xkVmFsdWUiLCJoYXMiLCJjYWxsYmFjayIsInRoaXNBcmciLCJrZXlzIiwidmFsdWVzIiwiZW50cmllcyIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiaW5pdCIsInJlcXVlc3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib250aW1lb3V0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicG9seWZpbGwiLCJlbmNvZGUiLCJudW1iZXIiLCJsb29wQ291bnRlciIsInN0ciIsInJhbmRvbUJ5dGUiLCJwb3ciLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NsYXNzZXNfSGVhZF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19jbGFzc2VzX0F1ZGlvX2pzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX29iamVjdHNfU2F2ZV9fIiwiX3RoaXMiLCJzY2VuZSIsImNhbWVyYSIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0UmF0aW8iLCJuZWFyUGxhbmUiLCJmYXJQbGFuZSIsIkhFSUdIVCIsIldJRFRIIiwiZ2xvYmFsTGlnaHQiLCJzaGFkb3dMaWdodCIsImJhY2tMaWdodCIsInJlbmRlcmVyIiwiY29udGFpbmVyIiwid2luZG93SGFsZlgiLCJ3aW5kb3dIYWxmWSIsImF1ZGlvIiwic2F2ZUJ0biIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJtb3VzZVBvcyIsImNyZWF0ZVNjZW5lIiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiU2NlbmUiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIldlYkdMUmVuZGVyZXIiLCJhbHBoYSIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsInNoYWRvd01hcCIsImVuYWJsZWQiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uV2luZG93UmVzaXplIiwiaGFuZGxlTW91c2VNb3ZlIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJpc01vYmlsZSIsIkxvYWRpbmdNYW5hZ2VyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY3JlYXRlTGlnaHRzIiwiSGVtaXNwaGVyZUxpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsInNoYWRvdyIsIm1hcFNpemUiLCJ3aWR0aCIsImhlaWdodCIsIkFtYmllbnRMaWdodCIsImNyZWF0ZUhlYWQiLCJpc0JsaW5raW5nIiwiYmxpbmtMb29wIiwicmFuZG9tIiwiYmxpbmsiLCJUd2Vlbk1heCIsInRvIiwieW95byIsInJlcGVhdCIsIm9uQ29tcGxldGUiLCJjb250cm9sbGVyVGV4dCIsImxvb3AiLCJyZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwYXJ0aWNsZXNKUyIsImxvYWQiLCJjb25zb2xlIiwibG9nIiwidHh0IiwiY29udHJvbGxlciIsImd1aSIsImRhdCIsIkdVSSIsImFkZENvbG9yIiwib25DaGFuZ2UiLCJyZW1vdmUiLCJTcGVlY2hSZWNvZ25pdGlvbiIsIndlYmtpdFNwZWVjaFJlY29nbml0aW9uIiwiU3BlZWNoR3JhbW1hckxpc3QiLCJ3ZWJraXRTcGVlY2hHcmFtbWFyTGlzdCIsIlNwZWVjaFJlY29nbml0aW9uRXZlbnQiLCJ3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbkV2ZW50IiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiYXVkaW9DdHgiLCJyZWNvZ25pdGlvbiIsInRyYW5zY3JpcHQiLCJhdWRpb0NodW5rcyIsIiR0ZXh0IiwiJHJlY29yZCIsIiRhdWRpbyIsIkF1ZGlvIiwic3BlZWNoU2V0dGluZ3MiLCJvbnJlc3VsdCIsImdvdFJlc3VsdCIsIm9uc3BlZWNoZW5kIiwib25TcGVlY2hFbmQiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJzdHJlYW0iLCJtZWRpYVJlY29yZGVyIiwiTWVkaWFSZWNvcmRlciIsInN0YXJ0IiwiZGlzYWJsZWQiLCJkYXRhIiwiYmxvYlVybCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInNyYyIsInNvdXJjZSIsImNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSIsImJpcXVhZEZpbHRlciIsImNyZWF0ZUJpcXVhZEZpbHRlciIsIiRiaXF1YWRSYW5nZSIsIiRiaXF1YWRUeXBlIiwiZnJlcXVlbmN5IiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwic3RvcCIsInRleHRDb250ZW50IiwibGFzdCIsInJlc3VsdHMiLCJjb250aW51b3VzIiwibGFuZyIsImludGVyaW1SZXN1bHRzIiwibWF4QWx0ZXJuYXRpdmVzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19saWJfY2FydEFQSV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Nob3J0aWRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9zaG9ydGlkX19fZGVmYXVsdCIsImxpbmsiLCJxdWVyeVNlbGVjdG9yIiwiaGFuZGxlU2F2ZSIsImEiLCJnZW5lcmF0ZSIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsInNlZWRWYWx1ZSIsIndvcmtlciIsIndvcmtlcklkIiwiY2x1c3RlcldvcmtlcklkIiwibmV3Q2hhcmFjdGVycyIsImJ1aWxkIiwiaXNWYWxpZCIsImdldE5leHRWYWx1ZSIsIl9zZWVkXyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImRlc3QiLCJtc0NyeXB0byIsInZlcnNpb24iLCJzdWJzdHIiLCJzZWNvbmRzIiwiUkVEVUNFX1RJTUUiLCJwcmV2aW91c1NlY29uZHMiLCJjb3VudGVyIiwiaXNTaG9ydElkIiwibGVuIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBSSxFQUFBSixFQUNBSyxHQUFBLEVBQ0FILFdBVUEsT0FOQUosR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQTRCQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxTQUFBUCxFQUFBUSxFQUFBQyxHQUNBWixFQUFBYSxFQUFBVixFQUFBUSxJQUNBRyxPQUFBQyxlQUFBWixFQUFBUSxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWYsR0FDQSxHQUFBUSxHQUFBUixLQUFBZ0IsV0FDQSxXQUEyQixNQUFBaEIsR0FBQSxTQUMzQixXQUFpQyxNQUFBQSxHQUVqQyxPQURBSixHQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVEsRUFBQUMsR0FBc0QsTUFBQVIsUUFBQVMsVUFBQUMsZUFBQWpCLEtBQUFjLEVBQUFDLElBR3REdEIsRUFBQXlCLEVBQUEsR0FHQXpCLElBQUEwQixFQUFBLEtETU0sU0FBVXRCLEVBQVF1QixFQUFxQjNCLEdBRTdDLFlFckVBLElBQU00QixJQUNKQyxLQUFNLFNBQ05DLFNBQVUsU0FDVkMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsTUFBTyxRQUNQQyxJQUFL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QXpLLEdBQUFILEVBQUEvVixFQUFBeUIsT0FBQStlLEdBeENBLEdBYUFHLEdBR0FELEVBaEJBM0ssRUFBQTVaLEVBQUEsR0FDQTZELEVBQUE3RCxFQUFBLEdBS0Fza0IsRUFBQSxjQUlBSCxFQUFBLENBbUNBL2pCLEdBQUFELFFBQUF3akIsR2xCOGhFTSxTQUFVdmpCLEVBQVFELEVBQVNILEdBRWpDLFltQjVrRUEsU0FBQXlrQixHQUFBOWhCLEdBQ0EsSUFBQUEsR0FBQSxnQkFBQUEsTUFBQW9CLE9BQUEsRUFDQSxRQUtBLFFBRkFRLEdBQUFWLEVBQUFVLGFBQ0FtZ0IsRUFBQS9oQixFQUFBb0IsT0FDQTFELEVBQUEsRUFBa0JBLEVBQUFxa0IsRUFBU3JrQixJQUMzQixRQUFBa0UsRUFBQWlTLFFBQUE3VCxFQUFBdEMsSUFDQSxRQUdBLFVBZEEsR0FBQXdELEdBQUE3RCxFQUFBLEVBaUJBSSxHQUFBRCxRQUFBc2tCLEduQnFsRU0sU0FBVXJrQixFQUFRRCxFQUFTSCxHQUVqQyxZb0J2bUVBSSxHQUFBRCxRQUFBIiwiZmlsZSI6ImpzL3NjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQ29sb3JzID0ge1xuICBza2luOiAweGZmZTBiZCxcbiAgZnJlY2tsZXM6IDB4Y2ZiYTk2LFxuICB3aGl0ZTogMHhlOWViZWUsXG4gIGdsYXNzZXM6IDB4ZjljNDIxLFxuICB0ZWV0aDogMHhmZmZmZmYsXG4gIGJsYWNrOiAweDJlMmUyZSxcbiAgZXllOiAweDYyOTVhOCxcbiAgaGF0OiAweDcyMDMxNFxufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoQ29sb3JzKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9pc29tb3JwaGljX2ZldGNoX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fKTtcblxuXG52YXIgdXJsID0gJy9hcGkvY2FydCc7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoe1xuXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgdGV4dCA9IF9yZWYudGV4dCxcbiAgICAgICAgaWQgPSBfcmVmLmlkLFxuICAgICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBibG9iID0gX3JlZi5ibG9iO1xuXG4gICAgdmFyIG1ldGhvZCA9ICdQT1NUJztcbiAgICB2YXIgbmV3RmlsZU5hbWUgPSAnJyArIGlkLnNwbGl0KCcgJykuam9pbignXycpO1xuICAgIHZhciBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ3RleHQnLCB0ZXh0KTtcbiAgICBib2R5LmFwcGVuZCgnaWQnLCBpZCk7XG4gICAgYm9keS5hcHBlbmQoJ25hbWUnLCBuYW1lKTtcbiAgICBib2R5LmFwcGVuZCgnc291bmQnLCBibG9iLCBuZXdGaWxlTmFtZSk7XG5cbiAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2lzb21vcnBoaWNfZmV0Y2hfX19kZWZhdWx0KCkodXJsLCB7IG1ldGhvZDogbWV0aG9kLCBib2R5OiBib2R5IH0pLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiByLmpzb24oKTtcbiAgICB9KTtcbiAgfSxcblxuICByZWFkOiBmdW5jdGlvbiByZWFkKCkge1xuICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaXNvbW9ycGhpY19mZXRjaF9fX2RlZmF1bHQoKSh1cmwgKyAnP2lzQWN0aXZlPXRydWUnKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gci5qc29uKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZE9uZTogZnVuY3Rpb24gcmVhZE9uZShpZCkge1xuICAgIHZhciBtZXRob2QgPSAnR0VUJztcbiAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2lzb21vcnBoaWNfZmV0Y2hfX19kZWZhdWx0KCkodXJsICsgJy8nICsgaWQsIHsgbWV0aG9kOiBtZXRob2QgfSkudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHIuanNvbigpO1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciByYW5kb21Gcm9tU2VlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgT1JJR0lOQUwgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfLSc7XG52YXIgYWxwaGFiZXQ7XG52YXIgcHJldmlvdXNTZWVkO1xuXG52YXIgc2h1ZmZsZWQ7XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHNodWZmbGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNldENoYXJhY3RlcnMoX2FscGhhYmV0Xykge1xuICAgIGlmICghX2FscGhhYmV0Xykge1xuICAgICAgICBpZiAoYWxwaGFiZXQgIT09IE9SSUdJTkFMKSB7XG4gICAgICAgICAgICBhbHBoYWJldCA9IE9SSUdJTkFMO1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9hbHBoYWJldF8gPT09IGFscGhhYmV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX2FscGhhYmV0Xy5sZW5ndGggIT09IE9SSUdJTkFMLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N1c3RvbSBhbHBoYWJldCBmb3Igc2hvcnRpZCBtdXN0IGJlICcgKyBPUklHSU5BTC5sZW5ndGggKyAnIHVuaXF1ZSBjaGFyYWN0ZXJzLiBZb3Ugc3VibWl0dGVkICcgKyBfYWxwaGFiZXRfLmxlbmd0aCArICcgY2hhcmFjdGVyczogJyArIF9hbHBoYWJldF8pO1xuICAgIH1cblxuICAgIHZhciB1bmlxdWUgPSBfYWxwaGFiZXRfLnNwbGl0KCcnKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kLCBhcnIpe1xuICAgICAgIHJldHVybiBpbmQgIT09IGFyci5sYXN0SW5kZXhPZihpdGVtKTtcbiAgICB9KTtcblxuICAgIGlmICh1bmlxdWUubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ3VzdG9tIGFscGhhYmV0IGZvciBzaG9ydGlkIG11c3QgYmUgJyArIE9SSUdJTkFMLmxlbmd0aCArICcgdW5pcXVlIGNoYXJhY3RlcnMuIFRoZXNlIGNoYXJhY3RlcnMgd2VyZSBub3QgdW5pcXVlOiAnICsgdW5pcXVlLmpvaW4oJywgJykpO1xuICAgIH1cblxuICAgIGFscGhhYmV0ID0gX2FscGhhYmV0XztcbiAgICByZXNldCgpO1xufVxuXG5mdW5jdGlvbiBjaGFyYWN0ZXJzKF9hbHBoYWJldF8pIHtcbiAgICBzZXRDaGFyYWN0ZXJzKF9hbHBoYWJldF8pO1xuICAgIHJldHVybiBhbHBoYWJldDtcbn1cblxuZnVuY3Rpb24gc2V0U2VlZChzZWVkKSB7XG4gICAgcmFuZG9tRnJvbVNlZWQuc2VlZChzZWVkKTtcbiAgICBpZiAocHJldmlvdXNTZWVkICE9PSBzZWVkKSB7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIHByZXZpb3VzU2VlZCA9IHNlZWQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaHVmZmxlKCkge1xuICAgIGlmICghYWxwaGFiZXQpIHtcbiAgICAgICAgc2V0Q2hhcmFjdGVycyhPUklHSU5BTCk7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZUFycmF5ID0gYWxwaGFiZXQuc3BsaXQoJycpO1xuICAgIHZhciB0YXJnZXRBcnJheSA9IFtdO1xuICAgIHZhciByID0gcmFuZG9tRnJvbVNlZWQubmV4dFZhbHVlKCk7XG4gICAgdmFyIGNoYXJhY3RlckluZGV4O1xuXG4gICAgd2hpbGUgKHNvdXJjZUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgciA9IHJhbmRvbUZyb21TZWVkLm5leHRWYWx1ZSgpO1xuICAgICAgICBjaGFyYWN0ZXJJbmRleCA9IE1hdGguZmxvb3IociAqIHNvdXJjZUFycmF5Lmxlbmd0aCk7XG4gICAgICAgIHRhcmdldEFycmF5LnB1c2goc291cmNlQXJyYXkuc3BsaWNlKGNoYXJhY3RlckluZGV4LCAxKVswXSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRBcnJheS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2h1ZmZsZWQoKSB7XG4gICAgaWYgKHNodWZmbGVkKSB7XG4gICAgICAgIHJldHVybiBzaHVmZmxlZDtcbiAgICB9XG4gICAgc2h1ZmZsZWQgPSBzaHVmZmxlKCk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xufVxuXG4vKipcbiAqIGxvb2t1cCBzaHVmZmxlZCBsZXR0ZXJcbiAqIEBwYXJhbSBpbmRleFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbG9va3VwKGluZGV4KSB7XG4gICAgdmFyIGFscGhhYmV0U2h1ZmZsZWQgPSBnZXRTaHVmZmxlZCgpO1xuICAgIHJldHVybiBhbHBoYWJldFNodWZmbGVkW2luZGV4XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY2hhcmFjdGVyczogY2hhcmFjdGVycyxcbiAgICBzZWVkOiBzZXRTZWVkLFxuICAgIGxvb2t1cDogbG9va3VwLFxuICAgIHNodWZmbGVkOiBnZXRTaHVmZmxlZFxufTtcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXG5cblxudmFyIGlzQmxpbmtpbmcgPSBmYWxzZTtcblxudmFyIEhlYWQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhlYWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWQpO1xuXG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG5cbiAgICB2YXIgaGVhZEdlb20gPSBuZXcgVEhSRUUuQm94QnVmZmVyR2VvbWV0cnkoMTYsIDE2LCAxNik7XG4gICAgdmFyIHNraW5NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uc2tpbiwgZmxhdFNoYWRpbmc6IHRydWUgfSk7XG4gICAgdmFyIGV5ZU1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZXllLCBmbGF0U2hhZGluZzogdHJ1ZSB9KTtcblxuICAgIHRoaXMuaGVhZCA9IG5ldyBUSFJFRS5NZXNoKGhlYWRHZW9tLCBza2luTWF0KTtcbiAgICB0aGlzLmhlYWQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgdGhpcy5oZWFkLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLm1lc2guYWRkKHRoaXMuaGVhZCk7XG5cbiAgICB0aGlzLmJlYXJkID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5iZWFyZC5wb3NpdGlvbi55ID0gLTc7XG4gICAgdGhpcy5iZWFyZC5wb3NpdGlvbi56ID0gMC41O1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5iZWFyZCk7XG5cbiAgICB0aGlzLkJlYXJkKCk7XG4gICAgdGhpcy5HbGFzc2VzKCk7XG4gICAgdGhpcy5IYWlyKCk7XG4gICAgdGhpcy5FeWVzKCk7XG4gICAgdGhpcy5FeWVCcm93cygpO1xuICAgIHRoaXMuSGF0KCk7XG4gICAgdGhpcy5GcmVja2xlcygpO1xuICAgIHRoaXMuRmVhdHVyZXMoKTtcbiAgICB0aGlzLmlkbGUoKTtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhlYWQsIFt7XG4gICAga2V5OiAnbm9ybWFsaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKHYsIHZtaW4sIHZtYXgsIHRtaW4sIHRtYXgpIHtcbiAgICAgIHZhciBudiA9IE1hdGgubWF4KE1hdGgubWluKHYsIHZtYXgpLCB2bWluKTtcbiAgICAgIHZhciBkdiA9IHZtYXggLSB2bWluO1xuICAgICAgdmFyIHBjID0gKG52IC0gdm1pbikgLyBkdjtcbiAgICAgIHZhciBkdCA9IHRtYXggLSB0bWluO1xuICAgICAgdmFyIHR2ID0gdG1pbiArIHBjICogZHQ7XG4gICAgICByZXR1cm4gdHY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlQm9keScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUJvZHkoc3BlZWQsIGV5ZUJsdWVSaWdodFBvc1gsIGV5ZUJsdWVMZWZ0UG9zWCwgZXllQmx1ZVJpZ2h0UG9zWSwgZXllQmx1ZUxlZnRQb3NZKSB7XG4gICAgICAvL3RoaXMuZXllQmx1ZVJpZ2h0LnJvdGF0aW9uLnkgKz0gKGxpb24udEhlYWdSb3RZIC0gdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueSkgLyBzcGVlZDtcbiAgICAgIC8vdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueCArPSAodGhpcy5leWVCbHVlUmlnaHRSb3RYIC0gdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueCkgLyBzcGVlZDtcblxuICAgICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueCArPSAoZXllQmx1ZVJpZ2h0UG9zWCAtIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLngpIC8gc3BlZWQ7XG4gICAgICB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnggKz0gKGV5ZUJsdWVMZWZ0UG9zWCAtIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCkgLyBzcGVlZDtcblxuICAgICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueSArPSAoZXllQmx1ZVJpZ2h0UG9zWSAtIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgICB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnkgKz0gKGV5ZUJsdWVMZWZ0UG9zWSAtIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueSkgLyBzcGVlZDtcblxuICAgICAgLy90aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55ICs9IE1hdGguc2luKHRoaXMuZXllQmx1ZVJpZ2h0UG9zWSAtIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi56ICs9ICh0aGlzLmV5ZUJsdWVSaWdodFBvc1ogLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi56KSAvIHNwZWVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lkbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpZGxlKCkge1xuICAgICAgdmFyIHhUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgeVRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuXG4gICAgICAvL2NvbnNvbGUubG9nKHhUYXJnZXQsIHlUYXJnZXQpO1xuICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkpO1xuICAgICAgdmFyIGRpc3RhbmNlID0gMTtcblxuICAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDA1O1xuICAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDQpICogTWF0aC5QSSAqIDAuMDM7XG5cbiAgICAgIC8vIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwMikgKiBkaXN0YW5jZSAvIDI7XG4gICAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDAyKSAqIGRpc3RhbmNlIC8gMjtcblxuICAgICAgdmFyIGV5ZUJsdWVSaWdodFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjYsIDAuNik7XG5cbiAgICAgIHZhciBleWVCbHVlTGVmdFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjYsIDAuNik7XG5cbiAgICAgIHZhciBleWVCbHVlUmlnaHRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgICB2YXIgZXllQmx1ZUxlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodFJvdFkgPSB4VGFyZ2V0LCAtMjAsIDIwLCAtTWF0aC5QSSAvIDQsIE1hdGguUEkgLyA0O1xuICAgICAgLy8gdGhpcy5leWVCbHVlUmlnaHRSb3RYID0geVRhcmdldCwgLTIwLCAyMCwgLU1hdGguUEkgLyA0LCBNYXRoLlBJIC8gNDtcbiAgICAgIC8vIHRoaXMuZXllQmx1ZVJpZ2h0UG9zWCA9IHhUYXJnZXQsIC0yMCwgMjAsIDcwLCAtNzA7XG4gICAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodFBvc1kgPSB5VGFyZ2V0LCAtMTQwLCAyNjAsIDIwLCAxMDA7XG4gICAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodFBvc1ogPSA3O1xuXG4gICAgICB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi55ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA0KSAqIGRpc3RhbmNlIC8gMjtcbiAgICAgIHRoaXMuZXllQnJvd0xlZnQucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAwNCkgKiBkaXN0YW5jZSAvIDI7XG5cbiAgICAgIC8vIHRoaXMuZXllQnJvd1JpZ2h0LnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDIpICogTWF0aC5QSSAqIDAuMDQ7XG4gICAgICAvLyB0aGlzLmV5ZUJyb3dMZWZ0LnJvdGF0aW9uLnogPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDIpICogTWF0aC5QSSAqIDAuMDQ7XG5cbiAgICAgIC8vdGhpcy5iZWFyZC5tb3V0aC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDAyKSAqIGRpc3RhbmNlIC8gMjtcblxuICAgICAgLy8gU05PUiBPTUhPT0ctT01MQUFHXG4gICAgICB0aGlzLm1vdXN0YWNoZS5wb3NpdGlvbi55ID0gTWF0aC5jb3MoRGF0ZS5ub3coKSAqIDAuMDEpICogZGlzdGFuY2UgLyA0O1xuICAgICAgLy8gU05PUiBPTUhPT0ctUk9UQVRJRVxuICAgICAgdGhpcy5tb3VzdGFjaGUucm90YXRpb24ueiA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAxKSAqIE1hdGguUEkgKiAwLjAxO1xuXG4gICAgICAvL3RoaXMubW91dGguc2NhbGUueCA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAwNCkgKiBkaXN0YW5jZSAvIDI7XG5cbiAgICAgIC8vU05FTEhFSUQgSEVFTiBFTiBXRUVSXG4gICAgICB0aGlzLm1lc2gucm90YXRpb24ueSA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwMikgKiBNYXRoLlBJICogMC4wNTtcbiAgICAgIHRoaXMudXBkYXRlQm9keSgxMCwgZXllQmx1ZVJpZ2h0UG9zWCwgZXllQmx1ZUxlZnRQb3NYLCBleWVCbHVlUmlnaHRQb3NZLCBleWVCbHVlTGVmdFBvc1kpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0JlYXJkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gQmVhcmQoKSB7XG5cbiAgICAgIHZhciBiZWFyZEdlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgICAgdmFyIGJlYXJkMUdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMiwgMTAsIDE2KTtcblxuICAgICAgdmFyIGJlYXJkMSA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkMUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBiZWFyZDEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oOSwgMCwgMCkpO1xuICAgICAgYmVhcmQxLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMS5nZW9tZXRyeSwgYmVhcmQxLm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDIgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDFHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmQyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDcsIC0yLCAyKSk7XG4gICAgICBiZWFyZDIuc2NhbGUueiA9IDAuODtcbiAgICAgIGJlYXJkMi51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDIuZ2VvbWV0cnksIGJlYXJkMi5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQzID0gYmVhcmQxLmNsb25lKCk7XG4gICAgICBiZWFyZDMucG9zaXRpb24ueCA9IC1iZWFyZDEucG9zaXRpb24ueDtcbiAgICAgIGJlYXJkMy51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDMuZ2VvbWV0cnksIGJlYXJkMy5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQ0ID0gYmVhcmQyLmNsb25lKCk7XG4gICAgICBiZWFyZDQucG9zaXRpb24ueCA9IC1iZWFyZDIucG9zaXRpb24ueDtcbiAgICAgIGJlYXJkNC51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDQuZ2VvbWV0cnksIGJlYXJkNC5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQyR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgzLCAxNCwgMTApO1xuICAgICAgYmVhcmQyR2VvbS52ZXJ0aWNlc1syXS56IC09IDI7XG4gICAgICBiZWFyZDJHZW9tLnZlcnRpY2VzWzddLnogLT0gMjtcblxuICAgICAgdmFyIGJlYXJkNSA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkMkdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBiZWFyZDUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oNSwgLTUsIDQpKTtcbiAgICAgIGJlYXJkNS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDUuZ2VvbWV0cnksIGJlYXJkNS5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmQzR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLjUsIDE0LCAxMCk7XG4gICAgICBiZWFyZDNHZW9tLnZlcnRpY2VzWzJdLnogLT0gMjtcbiAgICAgIGJlYXJkM0dlb20udmVydGljZXNbN10ueiAtPSAyO1xuXG4gICAgICB2YXIgYmVhcmQ2ID0gbmV3IFRIUkVFLk1lc2goYmVhcmQzR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGJlYXJkNi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigyLjUsIC02LCA2KSk7XG4gICAgICBiZWFyZDYudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ2Lmdlb21ldHJ5LCBiZWFyZDYubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkNyA9IGJlYXJkNS5jbG9uZSgpO1xuICAgICAgYmVhcmQ3LnBvc2l0aW9uLnggPSAtYmVhcmQ1LnBvc2l0aW9uLng7XG4gICAgICBiZWFyZDcudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ3Lmdlb21ldHJ5LCBiZWFyZDcubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkOCA9IGJlYXJkNi5jbG9uZSgpO1xuICAgICAgYmVhcmQ4LnBvc2l0aW9uLnggPSAtYmVhcmQ2LnBvc2l0aW9uLng7XG4gICAgICBiZWFyZDgudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ4Lmdlb21ldHJ5LCBiZWFyZDgubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkNEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMi41LCAxNC41LCAxMCk7XG4gICAgICBiZWFyZDRHZW9tLnZlcnRpY2VzWzJdLnogLT0gMTtcbiAgICAgIGJlYXJkNEdlb20udmVydGljZXNbN10ueiAtPSAxO1xuXG4gICAgICB2YXIgYmVhcmQ5ID0gbmV3IFRIUkVFLk1lc2goYmVhcmQ0R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGJlYXJkOS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAtNywgNS43NSkpO1xuICAgICAgYmVhcmQ5LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkOS5nZW9tZXRyeSwgYmVhcmQ5Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBiZWFyZDVHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDQsIDgsIDgpO1xuICAgICAgdmFyIGJlYXJkMTAgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDVHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmQxMC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtNiwgLTEsIC0yKSk7XG4gICAgICBiZWFyZDEwLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMTAuZ2VvbWV0cnksIGJlYXJkMTAubWF0cml4KTtcblxuICAgICAgdmFyIGJlYXJkMTEgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDVHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgYmVhcmQxMS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAtNSwgLTIpKTtcbiAgICAgIGJlYXJkMTEudXBkYXRlTWF0cml4KCk7XG4gICAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQxMS5nZW9tZXRyeSwgYmVhcmQxMS5tYXRyaXgpO1xuXG4gICAgICB2YXIgYmVhcmRNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChiZWFyZEdlb21NZXJnZWQsIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBiZWFyZE1lcmdlZC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgIGJlYXJkTWVyZ2VkLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgICB2YXIgbW91dGhHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEwLCA0LCAxKTtcbiAgICAgIHZhciBtb3V0aCA9IG5ldyBUSFJFRS5NZXNoKG1vdXRoR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmJsYWNrTWF0KTtcbiAgICAgIG1vdXRoLnBvc2l0aW9uLnNldCgwLCAyLCA4KTtcbiAgICAgIG1vdXRoLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIG1vdXRoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgICB2YXIgdGVldGhHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEwLCAxLCAxKTtcbiAgICAgIHZhciB0ZWV0aCA9IG5ldyBUSFJFRS5NZXNoKHRlZXRoR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnRlZXRoTWF0KTtcbiAgICAgIHRlZXRoLnBvc2l0aW9uLnNldCgwLCAwLjUsIDAuMSk7XG4gICAgICB0ZWV0aC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0ZWV0aC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICAgIG1vdXRoLmFkZCh0ZWV0aCk7XG5cbiAgICAgIC8vIGxldCBzbWlsZUdlb20gPSBuZXcgVEhSRUUuVG9ydXNHZW9tZXRyeSg0LCAxLjUsIDIsIDYsIC1NYXRoLlBJKTtcbiAgICAgIC8vIHRoaXMuc21pbGUgPSBuZXcgVEhSRUUuTWVzaChzbWlsZUdlb20sIE1hdC5ibGFja01hdCk7XG4gICAgICAvLyB0aGlzLnNtaWxlLnBvc2l0aW9uLnNldCgwLCAyLCAxMCk7XG4gICAgICAvLyB0aGlzLnNtaWxlLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIC8vIHRoaXMuc21pbGUucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICAvL1xuICAgICAgLy8gdGhpcy5iZWFyZC5hZGQoYmVhcmRNZXJnZWQsIG1vdXRoLCB0aGlzLnNtaWxlKTtcbiAgICAgIHRoaXMuYmVhcmQuYWRkKGJlYXJkTWVyZ2VkLCBtb3V0aCk7XG5cbiAgICAgIHZhciBtb3VzdGFjaGVHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDE0LCAzLCAzLCAzKTtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbMF0ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1sxXS55IC09IDI7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzJdLnkgLT0gMjtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbM10ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s0XS55IC09IDI7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzVdLnkgLT0gMjtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbNl0ueSAtPSAyO1xuICAgICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s3XS55IC09IDI7XG4gICAgICBtb3VzdGFjaGVHZW9tLnZlcnRpY2VzWzhdLnggLT0gMTtcbiAgICAgIG1vdXN0YWNoZUdlb20udmVydGljZXNbOV0ueCArPSAxO1xuXG4gICAgICBtb3VzdGFjaGVHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsIDQsIDApKTtcbiAgICAgIHRoaXMubW91c3RhY2hlID0gbmV3IFRIUkVFLk1lc2gobW91c3RhY2hlR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIHRoaXMubW91c3RhY2hlLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgICAgdGhpcy5tb3VzdGFjaGUucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICAgIHRoaXMubW91c3RhY2hlLnBvc2l0aW9uLnNldCgwLCAwLCA5KTtcbiAgICAgIHRoaXMuYmVhcmQuYWRkKHRoaXMubW91c3RhY2hlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdHbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2xhc3NlcygpIHtcbiAgICAgIC8vR0xBU1NFU1xuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICB0aGlzLmdsYXNzZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICAgIHRoaXMuZ2xhc3Nlcy5wb3NpdGlvbi5zZXQoMCwgMCwgOSk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZ2xhc3Nlcyk7XG4gICAgICB2YXIgZ2xhc3Nlc01hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZ2xhc3NlcywgZmxhdFNoYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIHZhciBmcmFtZUdlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgICAgdmFyIGZyYW1lT3V0ZXJHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMywgMywgMC41LCAzMik7XG4gICAgICB2YXIgZnJhbWVJbm5lckdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgyLjcsIDIuNywgMC41LCAzMik7XG5cbiAgICAgIGZyYW1lT3V0ZXJHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSSAvIDIpKTtcbiAgICAgIGZyYW1lSW5uZXJHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSSAvIDIpKTtcblxuICAgICAgdmFyIGZyYW1lQlNQID0gbmV3IFRocmVlQlNQKGZyYW1lT3V0ZXJHZW9tKTtcbiAgICAgIHZhciBmcmFtZUN1dEJTUCA9IG5ldyBUaHJlZUJTUChmcmFtZUlubmVyR2VvbSk7XG5cbiAgICAgIHZhciBmcmFtZWludGVyc2VjdGlvbkJTUCA9IGZyYW1lQlNQLnN1YnRyYWN0KGZyYW1lQ3V0QlNQKTtcbiAgICAgIHZhciBmcmFtZUxlZnQgPSBmcmFtZWludGVyc2VjdGlvbkJTUC50b01lc2goZ2xhc3Nlc01hdCk7XG5cbiAgICAgIGZyYW1lTGVmdC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig0LCAzLCAwKSk7XG4gICAgICBmcmFtZUxlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVMZWZ0Lmdlb21ldHJ5LCBmcmFtZUxlZnQubWF0cml4KTtcblxuICAgICAgdmFyIGZyYW1lUmlnaHQgPSBmcmFtZUxlZnQuY2xvbmUoKTtcbiAgICAgIGZyYW1lUmlnaHQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKE1hdGguUEkgLyAzMCkpO1xuICAgICAgZnJhbWVSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtNy41LCAtMC4yNSwgMCkpO1xuICAgICAgZnJhbWVSaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZVJpZ2h0Lmdlb21ldHJ5LCBmcmFtZVJpZ2h0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZU1pZEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMiwgLjMsIC41KTtcbiAgICAgIHZhciBmcmFtZU1pZCA9IG5ldyBUSFJFRS5NZXNoKGZyYW1lTWlkR2VvbSwgZ2xhc3Nlc01hdCk7XG4gICAgICBmcmFtZU1pZC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAzLjMsIC0wLjMpKTtcbiAgICAgIGZyYW1lTWlkLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lTWlkLmdlb21ldHJ5LCBmcmFtZU1pZC5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJhbWVFbmRHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEuNSwgLjUsIDEpO1xuICAgICAgdmFyIGZyYW1lRW5kUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChmcmFtZUVuZEdlb20sIGdsYXNzZXNNYXQpO1xuICAgICAgZnJhbWVFbmRSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig3LjUsIDMsIDApKTtcbiAgICAgIGZyYW1lRW5kUmlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVFbmRSaWdodC5nZW9tZXRyeSwgZnJhbWVFbmRSaWdodC5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJhbWVFbmRMZWZ0ID0gZnJhbWVFbmRSaWdodC5jbG9uZSgpO1xuICAgICAgZnJhbWVFbmRMZWZ0LnBvc2l0aW9uLnggPSAtZnJhbWVFbmRSaWdodC5wb3NpdGlvbi54O1xuICAgICAgZnJhbWVFbmRMZWZ0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lRW5kTGVmdC5nZW9tZXRyeSwgZnJhbWVFbmRMZWZ0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZVNwb2tlR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAwLjUsIDEyKTtcbiAgICAgIHZhciBmcmFtZVNwb2tlUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChmcmFtZVNwb2tlR2VvbSwgZ2xhc3Nlc01hdCk7XG4gICAgICBmcmFtZVNwb2tlUmlnaHQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oOCwgMywgLTUuNSkpO1xuICAgICAgZnJhbWVTcG9rZVJpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lU3Bva2VSaWdodC5nZW9tZXRyeSwgZnJhbWVTcG9rZVJpZ2h0Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmFtZVNwb2tlTGVmdCA9IGZyYW1lU3Bva2VSaWdodC5jbG9uZSgpO1xuICAgICAgZnJhbWVTcG9rZUxlZnQucG9zaXRpb24ueCA9IC1mcmFtZVNwb2tlUmlnaHQucG9zaXRpb24ueDtcbiAgICAgIGZyYW1lU3Bva2VMZWZ0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lU3Bva2VMZWZ0Lmdlb21ldHJ5LCBmcmFtZVNwb2tlTGVmdC5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJhbWVNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChmcmFtZUdlb21NZXJnZWQsIGdsYXNzZXNNYXQpO1xuICAgICAgZnJhbWVNZXJnZWQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgZnJhbWVNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICAgIHRoaXMuZ2xhc3Nlcy5hZGQoZnJhbWVNZXJnZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0hhaXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBIYWlyKCkge1xuICAgICAgLy9IQUlSXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgdGhpcy5oYWlyID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgICB0aGlzLmhhaXIucG9zaXRpb24uc2V0KDAsIDksIDApO1xuICAgICAgdGhpcy5oZWFkLmFkZCh0aGlzLmhhaXIpO1xuXG4gICAgICB2YXIgaGFpckdlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgICAgdmFyIGhhaXJGbGF0R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgMiwgMTgpO1xuXG4gICAgICB2YXIgaGFpcjEgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBoYWlyMS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyA0MCkpO1xuICAgICAgaGFpcjEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTQsIC0wLjUsIDApKTtcbiAgICAgIGhhaXIxLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjEuZ2VvbWV0cnksIGhhaXIxLm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyMiA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGhhaXIyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDEwKSk7XG4gICAgICBoYWlyMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtMiwgMSwgMCkpO1xuICAgICAgaGFpcjIudXBkYXRlTWF0cml4KCk7XG4gICAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyMi5nZW9tZXRyeSwgaGFpcjIubWF0cml4KTtcblxuICAgICAgdmFyIGhhaXIzID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpcjMuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNSkpO1xuICAgICAgaGFpcjMuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMiwgMSwgMCkpO1xuICAgICAgaGFpcjMudXBkYXRlTWF0cml4KCk7XG4gICAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyMy5nZW9tZXRyeSwgaGFpcjMubWF0cml4KTtcblxuICAgICAgdmFyIGhhaXI0ID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpcjQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNCkpO1xuICAgICAgaGFpcjQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oNiwgMCwgMCkpO1xuICAgICAgaGFpcjQudXBkYXRlTWF0cml4KCk7XG4gICAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyNC5nZW9tZXRyeSwgaGFpcjQubWF0cml4KTtcblxuICAgICAgdmFyIGhhaXI2ID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpcjYuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gLTMpKTtcbiAgICAgIGhhaXI2LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC03Ljc1LCAtLjUsIDApKTtcbiAgICAgIGhhaXI2LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjYuZ2VvbWV0cnksIGhhaXI2Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyRmxhdEJhY2tHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDE4LCA3LCA2KTtcbiAgICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbMF0ueCAtPSAxO1xuICAgICAgaGFpckZsYXRCYWNrR2VvbS52ZXJ0aWNlc1sxXS54IC09IDE7XG4gICAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzRdLnggKz0gMTtcbiAgICAgIGhhaXJGbGF0QmFja0dlb20udmVydGljZXNbNV0ueCArPSAxO1xuXG4gICAgICB2YXIgaGFpcjUgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEJhY2tHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ud2hpdGVNYXQpO1xuICAgICAgaGFpcjUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTQuNSwgLTYpKTtcbiAgICAgIGhhaXI1LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjUuZ2VvbWV0cnksIGhhaXI1Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBoYWlyTWVyZ2VkID0gbmV3IFRIUkVFLk1lc2goaGFpckdlb21NZXJnZWQsIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBoYWlyTWVyZ2VkLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIGhhaXJNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICAgIHRoaXMuaGFpci5hZGQoaGFpck1lcmdlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnRXllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEV5ZXMoKSB7XG5cbiAgICAgIHRoaXMuZXllcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5leWVzLnBvc2l0aW9uLnNldCgwLCAzLCA5KTtcbiAgICAgIHRoaXMuaGVhZC5hZGQodGhpcy5leWVzKTtcblxuICAgICAgdmFyIGV5ZVdoaXRlR2VvbSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDIuNSwgMi41KTtcblxuICAgICAgdmFyIGV5ZVdoaXRlUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChleWVXaGl0ZUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICBleWVXaGl0ZVJpZ2h0LnBvc2l0aW9uLnNldCgtMy43NSwgMCwgMCk7XG4gICAgICBleWVXaGl0ZVJpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIGV5ZVdoaXRlUmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB2YXIgZXllQmx1ZUdlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLjUsIDEuNSk7XG5cbiAgICAgIHZhciBleWVNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmV5ZSwgZmxhdFNoYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllQmx1ZUdlb20sIGV5ZU1hdCk7XG4gICAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAxKTtcbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgZXllV2hpdGVSaWdodC5hZGQodGhpcy5leWVCbHVlUmlnaHQpO1xuXG4gICAgICB2YXIgZXllUHVwaWxHZW9tID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMSwgMSk7XG5cbiAgICAgIHRoaXMuZXllUHVwaWxSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVB1cGlsR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmJsYWNrTWF0KTtcbiAgICAgIHRoaXMuZXllUHVwaWxSaWdodC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAyKTtcbiAgICAgIHRoaXMuZXllUHVwaWxSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmV5ZVB1cGlsUmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmV5ZUJsdWVSaWdodC5hZGQodGhpcy5leWVQdXBpbFJpZ2h0KTtcblxuICAgICAgdmFyIGV5ZVdoaXRlTGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVdoaXRlR2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIGV5ZVdoaXRlTGVmdC5wb3NpdGlvbi5zZXQoMy43NSwgMCwgMCk7XG4gICAgICBleWVXaGl0ZUxlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgZXllV2hpdGVMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdGhpcy5leWVCbHVlTGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZUJsdWVHZW9tLCBleWVNYXQpO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi5zZXQoMCwgMCwgLjAxKTtcbiAgICAgIHRoaXMuZXllQmx1ZUxlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5leWVCbHVlTGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIGV5ZVdoaXRlTGVmdC5hZGQodGhpcy5leWVCbHVlTGVmdCk7XG5cbiAgICAgIHRoaXMuZXllUHVwaWxMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZXllUHVwaWxHZW9tLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfTWF0ZXJpYWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uYmxhY2tNYXQpO1xuICAgICAgdGhpcy5leWVQdXBpbExlZnQucG9zaXRpb24uc2V0KDAsIDAsIC4wMik7XG4gICAgICB0aGlzLmV5ZVB1cGlsTGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmV5ZVB1cGlsTGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuZXllQmx1ZUxlZnQuYWRkKHRoaXMuZXllUHVwaWxMZWZ0KTtcblxuICAgICAgdGhpcy5leWVzLmFkZChleWVXaGl0ZVJpZ2h0LCBleWVXaGl0ZUxlZnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0V5ZUJyb3dzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gRXllQnJvd3MoKSB7XG4gICAgICB0aGlzLmV5ZUJyb3dzID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgICB0aGlzLmV5ZUJyb3dzLnBvc2l0aW9uLnNldCgwLCA2LCA4KTtcbiAgICAgIHRoaXMuaGVhZC5hZGQodGhpcy5leWVCcm93cyk7XG5cbiAgICAgIHZhciBleWVCcm93R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg0LCAxLCAxKTtcblxuICAgICAgdGhpcy5leWVCcm93UmlnaHQgPSBuZXcgVEhSRUUuTWVzaChleWVCcm93R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIHRoaXMuZXllQnJvd1JpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWihNYXRoLlBJIC8gNDUpKTtcbiAgICAgIHRoaXMuZXllQnJvd1JpZ2h0LnBvc2l0aW9uLnNldCgtMy43NSwgMCwgMCk7XG4gICAgICB0aGlzLmV5ZUJyb3dSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmV5ZUJyb3dSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuZXllQnJvd0xlZnQgPSBuZXcgVEhSRUUuTWVzaChleWVCcm93R2VvbSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX01hdGVyaWFsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLndoaXRlTWF0KTtcbiAgICAgIHRoaXMuZXllQnJvd0xlZnQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNDUpKTtcbiAgICAgIHRoaXMuZXllQnJvd0xlZnQucG9zaXRpb24uc2V0KDMuNzUsIDAsIDApO1xuICAgICAgdGhpcy5leWVCcm93TGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmV5ZUJyb3dMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdGhpcy5leWVCcm93cy5hZGQodGhpcy5leWVCcm93UmlnaHQsIHRoaXMuZXllQnJvd0xlZnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0hhdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEhhdCgpIHtcbiAgICAgIHRoaXMuaGF0ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgICB0aGlzLmhhdC5wb3NpdGlvbi5zZXQoLTAuMiwgMTEsIDIuNCk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuaGF0KTtcbiAgICAgIHZhciBoYXRNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmhhdCwgZmxhdFNoYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIHZhciBiYW5kR2VvbSA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KDksIDIsIDE2LCAxMDApO1xuICAgICAgdmFyIGJpZ0NvbmVHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMTEsIDEyLCAxNSk7XG4gICAgICB2YXIgc21hbGxDb25lR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDAuOCwgMywgOSwgMzIpO1xuICAgICAgdmFyIGhhdERpbmdsZUdlb20gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMS41LCA4LCA4KTtcblxuICAgICAgdGhpcy5iYW5kID0gbmV3IFRIUkVFLk1lc2goYmFuZEdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS50ZWV0aE1hdCk7XG4gICAgICB0aGlzLmJhbmQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKE1hdGguUEkgLyAyKSk7XG4gICAgICB0aGlzLmJhbmQucG9zaXRpb24uc2V0KDAsIDAsIDApO1xuICAgICAgdGhpcy5iYW5kLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuYmFuZC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuYmlnQ29uZSA9IG5ldyBUSFJFRS5NZXNoKGJpZ0NvbmVHZW9tLCBoYXRNYXQpO1xuICAgICAgdGhpcy5iaWdDb25lLnBvc2l0aW9uLnNldCgwLCA2LCAwKTtcbiAgICAgIHRoaXMuYmlnQ29uZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmJpZ0NvbmUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLnNtYWxsQ29uZSA9IG5ldyBUSFJFRS5NZXNoKHNtYWxsQ29uZUdlb20sIGhhdE1hdCk7XG4gICAgICB0aGlzLnNtYWxsQ29uZS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoTWF0aC5QSSAvIDIpKTtcbiAgICAgIHRoaXMuc21hbGxDb25lLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWShNYXRoLlBJIC8gMikpO1xuICAgICAgdGhpcy5zbWFsbENvbmUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKE1hdGguUEkgLyAtOCkpO1xuICAgICAgdGhpcy5zbWFsbENvbmUucG9zaXRpb24uc2V0KDQsIDcuOCwgLTEpO1xuICAgICAgdGhpcy5zbWFsbENvbmUuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5zbWFsbENvbmUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmhhdERpbmdsZSA9IG5ldyBUSFJFRS5NZXNoKGhhdERpbmdsZUdlb20sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19NYXRlcmlhbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZU1hdCk7XG4gICAgICB0aGlzLmhhdERpbmdsZS5wb3NpdGlvbi5zZXQoOSwgNS41LCAtMSk7XG4gICAgICB0aGlzLmhhdERpbmdsZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmhhdERpbmdsZS5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuaGF0LmFkZCh0aGlzLmJhbmQsIHRoaXMuYmlnQ29uZSwgdGhpcy5zbWFsbENvbmUsIHRoaXMuaGF0RGluZ2xlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdGcmVja2xlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEZyZWNrbGVzKCkge1xuICAgICAgdGhpcy5mcmVja2xlcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgdGhpcy5mcmVja2xlcy5wb3NpdGlvbi5zZXQoMCwgMCwgOCk7XG4gICAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZnJlY2tsZXMpO1xuXG4gICAgICB2YXIgZnJlY2tsZXNHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICAgIHZhciBmcmVja2xlc0dlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgwLjUsIDAuNSk7XG4gICAgICB2YXIgZnJlY2tsZXNNYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZnJlY2tsZXMsIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuXG4gICAgICB2YXIgZnJlY2tsZTEgPSBuZXcgVEhSRUUuTWVzaChmcmVja2xlc0dlb20sIGZyZWNrbGVzTWF0KTtcbiAgICAgIGZyZWNrbGUxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC01LCAwLCAwLjAxKSk7XG4gICAgICBmcmVja2xlMS51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlMS5nZW9tZXRyeSwgZnJlY2tsZTEubWF0cml4KTtcblxuICAgICAgdmFyIGZyZWNrbGUyID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICAgIGZyZWNrbGUyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC0wLjUsIC0xLCAwKSk7XG4gICAgICBmcmVja2xlMi51cGRhdGVNYXRyaXgoKTtcbiAgICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlMi5nZW9tZXRyeSwgZnJlY2tsZTIubWF0cml4KTtcblxuICAgICAgdmFyIGZyZWNrbGUzID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICAgIGZyZWNrbGUzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDEsIC0wLjUsIDApKTtcbiAgICAgIGZyZWNrbGUzLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGUzLmdlb21ldHJ5LCBmcmVja2xlMy5tYXRyaXgpO1xuXG4gICAgICB2YXIgZnJlY2tsZTQgPSBmcmVja2xlMS5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTQucG9zaXRpb24ueCA9IC1mcmVja2xlMS5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTQudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTQuZ2VvbWV0cnksIGZyZWNrbGU0Lm1hdHJpeCk7XG4gICAgICB2YXIgZnJlY2tsZTUgPSBmcmVja2xlMi5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTUucG9zaXRpb24ueCA9IC1mcmVja2xlMi5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTUudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTUuZ2VvbWV0cnksIGZyZWNrbGU1Lm1hdHJpeCk7XG4gICAgICB2YXIgZnJlY2tsZTYgPSBmcmVja2xlMy5jbG9uZSgpO1xuICAgICAgZnJlY2tsZTYucG9zaXRpb24ueCA9IC1mcmVja2xlMy5wb3NpdGlvbi54O1xuICAgICAgZnJlY2tsZTYudXBkYXRlTWF0cml4KCk7XG4gICAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTYuZ2VvbWV0cnksIGZyZWNrbGU2Lm1hdHJpeCk7XG5cbiAgICAgIHZhciBmcmVja2xlZE1lcmdlZCA9IG5ldyBUSFJFRS5NZXNoKGZyZWNrbGVzR2VvbU1lcmdlZCwgZnJlY2tsZXNNYXQpO1xuICAgICAgZnJlY2tsZWRNZXJnZWQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgICAgZnJlY2tsZWRNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmZyZWNrbGVzLmFkZChmcmVja2xlZE1lcmdlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnRmVhdHVyZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBGZWF0dXJlcygpIHtcbiAgICAgIHZhciBlYXJHZW9tID0gbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KDEuNSwgMywgMS41KTtcbiAgICAgIHZhciBza2luTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnNraW4sIGZsYXRTaGFkaW5nOiB0cnVlIH0pO1xuICAgICAgdmFyIGVhclJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZWFyR2VvbSwgc2tpbk1hdCk7XG4gICAgICBlYXJSaWdodC5wb3NpdGlvbi5zZXQoLTguNSwgMSwgMyk7XG4gICAgICBlYXJSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBlYXJSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICAgIHZhciBlYXJMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZWFyR2VvbSwgc2tpbk1hdCk7XG4gICAgICBlYXJMZWZ0LnBvc2l0aW9uLnNldCg4LjUsIDEsIDMpO1xuICAgICAgZWFyTGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBlYXJMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdmFyIG5vc2VHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMiwgNCwgNCk7XG4gICAgICB2YXIgbm9zZSA9IG5ldyBUSFJFRS5NZXNoKG5vc2VHZW9tLCBza2luTWF0KTtcbiAgICAgIG5vc2Uuc2NhbGUuc2V0KC43NSwgMSwgMS4zKTtcbiAgICAgIG5vc2UucG9zaXRpb24uc2V0KDAsIDEsIDgpO1xuICAgICAgbm9zZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgICBub3NlLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgICAgdGhpcy5oZWFkLmFkZChlYXJSaWdodCwgZWFyTGVmdCwgbm9zZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEhlYWQ7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoSGVhZCk7XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NvbG9yc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuLy8gbGV0IHNraW5NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5za2luLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuLy8gbGV0IGZyZWNrbGVzTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuZnJlY2tsZXMsIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgYXVidXJuTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuYXVidXJuLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuLy8gbGV0IGJyb3duTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuYnJvd24sIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgYmxhY2tNYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5ibGFjaywgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCB3aGl0ZU1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy53aGl0ZSwgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCBleWVzTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmV5ZXMsIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgYmVpZ2VNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuYmVpZ2UsIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgbm9ybWFsTWF0ID0gbmV3IFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbCh7fSk7XG52YXIgTWF0ZXJpYWxzID0ge1xuICAvL1wic2tpbk1hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5za2luLCBmbGF0U2hhZGluZzogdHJ1ZX0pLFxuICAvL1wiZnJlY2tsZXNNYXRcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuZnJlY2tsZXMsIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIFwid2hpdGVNYXRcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS53aGl0ZSwgZmxhdFNoYWRpbmc6IHRydWUgfSksXG4gIC8vXCJnbGFzc2VzTWF0XCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmdsYXNzZXMsIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIFwidGVldGhNYXRcIjogbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10udGVldGgsIGZsYXRTaGFkaW5nOiB0cnVlIH0pLFxuICBcImJyb3duTWF0XCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uYnJvd24sIGZsYXRTaGFkaW5nOiB0cnVlIH0pLFxuICBcImJsYWNrTWF0XCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uYmxhY2ssIGZsYXRTaGFkaW5nOiB0cnVlIH0pLFxuICAvL1wiZXllTWF0XCI6IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5leWUsIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIC8vXCJoYXRNYXRcIjogbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmhhdCwgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgXCJub3JtYWxNYXRcIjogbmV3IFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbCh7fSlcbn07XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoTWF0ZXJpYWxzKTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xubW9kdWxlLmV4cG9ydHMgPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG5cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICByYXdIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9ICdzdGF0dXMnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1cyA6IDIwMFxuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciByYW5kb21CeXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbmZ1bmN0aW9uIGVuY29kZShsb29rdXAsIG51bWJlcikge1xuICAgIHZhciBsb29wQ291bnRlciA9IDA7XG4gICAgdmFyIGRvbmU7XG5cbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgICAgc3RyID0gc3RyICsgbG9va3VwKCAoIChudW1iZXIgPj4gKDQgKiBsb29wQ291bnRlcikpICYgMHgwZiApIHwgcmFuZG9tQnl0ZSgpICk7XG4gICAgICAgIGRvbmUgPSBudW1iZXIgPCAoTWF0aC5wb3coMTYsIGxvb3BDb3VudGVyICsgMSApICk7XG4gICAgICAgIGxvb3BDb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlO1xuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2NsYXNzZXNfSGVhZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfY29sb3JzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fY2xhc3Nlc19BdWRpb19qc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX29iamVjdHNfU2F2ZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19saWJfY2FydEFQSV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBfdGhpcyA9IHRoaXM7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblxuXG5cblxuXG57XG4gIHZhciBzY2VuZSA9IHZvaWQgMCxcbiAgICAgIGNhbWVyYSA9IHZvaWQgMCxcbiAgICAgIGZpZWxkT2ZWaWV3ID0gdm9pZCAwLFxuICAgICAgYXNwZWN0UmF0aW8gPSB2b2lkIDAsXG4gICAgICBuZWFyUGxhbmUgPSB2b2lkIDAsXG4gICAgICBmYXJQbGFuZSA9IHZvaWQgMCxcbiAgICAgIEhFSUdIVCA9IHZvaWQgMCxcbiAgICAgIFdJRFRIID0gdm9pZCAwLFxuICAgICAgZ2xvYmFsTGlnaHQgPSB2b2lkIDAsXG4gICAgICBzaGFkb3dMaWdodCA9IHZvaWQgMCxcbiAgICAgIGJhY2tMaWdodCA9IHZvaWQgMCxcbiAgICAgIGxpZ2h0ID0gdm9pZCAwLFxuICAgICAgcmVuZGVyZXIgPSB2b2lkIDAsXG4gICAgICBjb250YWluZXIgPSB2b2lkIDAsXG4gICAgICBjb250cm9scyA9IHZvaWQgMCxcbiAgICAgIGxvYWRlZCA9IHZvaWQgMCxcbiAgICAgIGhlYWQgPSB2b2lkIDAsXG4gICAgICBzdGFycyA9IHZvaWQgMCxcbiAgICAgIHdpbmRvd0hhbGZYID0gdm9pZCAwLFxuICAgICAgd2luZG93SGFsZlkgPSB2b2lkIDAsXG4gICAgICBjb2xvciA9IHZvaWQgMCxcbiAgICAgIGF1ZGlvID0gdm9pZCAwLFxuICAgICAgU3BlZWNoVGV4dCA9IHZvaWQgMDtcblxuICB2YXIgc2F2ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlJyk7XG5cbiAgdmFyIG1vdXNlUG9zID0geyB4OiAwLCB5OiAwIH07XG5cbiAgdmFyIHN0YXJBcnJheSA9IFtdO1xuXG4gIHZhciBpbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAvLyBjcmVhdGUgc25vd1xuICAgIHBhcnRpY2xlc0pTLmxvYWQoJ3BhcnRpY2xlcy1qcycsICcuLi9hc3NldHMvcGFydGljbGVzLmpzb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zb2xlLmxvZygnY2FsbGJhY2sgLSBwYXJ0aWNsZXMuanMgY29uZmlnIGxvYWRlZCcpO1xuICAgIH0pO1xuXG4gICAgY3JlYXRlU2NlbmUoKTtcbiAgICBjcmVhdGVMaWdodHMoKTtcblxuICAgIC8vIGhhbmRsZSBhdWRpb1xuICAgIGF1ZGlvID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fY2xhc3Nlc19BdWRpb19qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKCk7XG4gICAgLy8gc2hvdyBhbmQgaGFuZGxlIGhlYWRcbiAgICBoZWFkID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fY2xhc3Nlc19IZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10oKTtcbiAgICBzY2VuZS5hZGQoaGVhZC5tZXNoKTtcblxuICAgIC8vIHNlbmQgb2JqZWN0cyB0byBzYXZlIG9uIGNsaWNrXG4gICAgc2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKGF1ZGlvLmJsb2IpO1xuXG4gICAgICBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19vYmplY3RzX1NhdmVfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoe1xuICAgICAgICB0ZXh0OiBhdWRpby50eHQsXG4gICAgICAgIC8vIHNlbmQgYXVkaW9ibG9iIHRvIHNhdmVcbiAgICAgICAgYmxvYjogYXVkaW8uYmxvYlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhjb250cm9sbGVyVGV4dCk7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlclRleHQoX3RoaXMuc2tpbiwgX3RoaXMuZnJlY2tsZXMsIF90aGlzLmV5ZSwgX3RoaXMuZ2xhc3NlcywgX3RoaXMuaGF0KTtcbiAgICB2YXIgZ3VpID0gbmV3IGRhdC5HVUkoKTtcblxuICAgIGd1aS5hZGRDb2xvcihjb250cm9sbGVyLCAnc2tpbicpLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5za2luID0gY29udHJvbGxlci5za2luO1xuICAgICAgc2NlbmUucmVtb3ZlKGhlYWQubWVzaCk7XG4gICAgICBjcmVhdGVIZWFkKCk7XG4gICAgfSk7XG5cbiAgICBndWkuYWRkQ29sb3IoY29udHJvbGxlciwgJ2ZyZWNrbGVzJykub25DaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmZyZWNrbGVzID0gY29udHJvbGxlci5mcmVja2xlcztcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdleWUnKS5vbkNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZXllID0gY29udHJvbGxlci5leWU7XG4gICAgICBzY2VuZS5yZW1vdmUoaGVhZC5tZXNoKTtcbiAgICAgIGNyZWF0ZUhlYWQoKTtcbiAgICB9KTtcblxuICAgIGd1aS5hZGRDb2xvcihjb250cm9sbGVyLCAnZ2xhc3NlcycpLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5nbGFzc2VzID0gY29udHJvbGxlci5nbGFzc2VzO1xuICAgICAgc2NlbmUucmVtb3ZlKGhlYWQubWVzaCk7XG4gICAgICBjcmVhdGVIZWFkKCk7XG4gICAgfSk7XG5cbiAgICBndWkuYWRkQ29sb3IoY29udHJvbGxlciwgJ2hhdCcpLm9uQ2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5oYXQgPSBjb250cm9sbGVyLmhhdDtcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHNjZW5lIGZvciBleHRlbnNpb25cbiAgICB3aW5kb3cuc2NlbmUgPSBzY2VuZTtcblxuICAgIGxvb3AoKTtcbiAgfTtcblxuICB2YXIgZGVjMmhleCA9IGZ1bmN0aW9uIGRlYzJoZXgoaSkge1xuICAgIHZhciByZXN1bHQgPSBcIjB4MDAwMDAwXCI7XG4gICAgaWYgKGkgPj0gMCAmJiBpIDw9IDE1KSB7XG4gICAgICByZXN1bHQgPSBcIjB4MDAwMDBcIiArIGkudG9TdHJpbmcoMTYpO1xuICAgIH0gZWxzZSBpZiAoaSA+PSAxNiAmJiBpIDw9IDI1NSkge1xuICAgICAgcmVzdWx0ID0gXCIweDAwMDBcIiArIGkudG9TdHJpbmcoMTYpO1xuICAgIH0gZWxzZSBpZiAoaSA+PSAyNTYgJiYgaSA8PSA0MDk1KSB7XG4gICAgICByZXN1bHQgPSBcIjB4MDAwXCIgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9IGVsc2UgaWYgKGkgPj0gNDA5NiAmJiBpIDw9IDY1NTM1KSB7XG4gICAgICByZXN1bHQgPSBcIjB4MDBcIiArIGkudG9TdHJpbmcoMTYpO1xuICAgIH0gZWxzZSBpZiAoaSA+PSA2NTUzNSAmJiBpIDw9IDEwNDg1NzUpIHtcbiAgICAgIHJlc3VsdCA9IFwiMHgwXCIgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9IGVsc2UgaWYgKGkgPj0gMTA0ODU3NSkge1xuICAgICAgcmVzdWx0ID0gJzB4JyArIGkudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PSA4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3JlYXRlU2NlbmUgPSBmdW5jdGlvbiBjcmVhdGVTY2VuZSgpIHtcbiAgICA7XG4gICAgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgd2luZG93SGFsZlggPSBXSURUSCAvIDI7XG4gICAgd2luZG93SGFsZlkgPSBIRUlHSFQgLyAyO1xuXG4gICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICBhc3BlY3RSYXRpbyA9IFdJRFRIIC8gSEVJR0hUO1xuICAgIGZpZWxkT2ZWaWV3ID0gNTA7XG4gICAgbmVhclBsYW5lID0gMTtcbiAgICBmYXJQbGFuZSA9IDIwMDA7XG4gICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgbmVhclBsYW5lLCBmYXJQbGFuZSk7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnggPSAwO1xuICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gNzA7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnkgPSAwO1xuXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFscGhhOiB0cnVlLCBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDogMSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXSURUSCwgSEVJR0hUKTtcbiAgICByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xuXG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcbiAgfTtcblxuICB2YXIgb25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBIRUlHSFQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgV0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB3aW5kb3dIYWxmWCA9IFdJRFRIIC8gMjtcbiAgICB3aW5kb3dIYWxmWSA9IEhFSUdIVCAvIDI7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXSURUSCwgSEVJR0hUKTtcbiAgICBjYW1lcmEuYXNwZWN0ID0gV0lEVEggLyBIRUlHSFQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGUpIHtcbiAgICBtb3VzZVBvcyA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgfTtcblxuICB2YXIgbG9hZGVyTWFuYWdlciA9IG5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlcigpO1xuXG4gIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24gb25TdGFydCh1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsKSB7XG4gICAgY29uc29sZS5sb2coJ1N0YXJ0ZWQgbG9hZGluZyBmaWxlOiAnICsgdXJsICsgJy5cXG5Mb2FkZWQgJyArIGl0ZW1zTG9hZGVkICsgJyBvZiAnICsgaXRlbXNUb3RhbCArICcgZmlsZXMuJyk7XG4gIH07XG5cbiAgdmFyIG9uTG9hZCA9IGZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnTG9hZGluZyBjb21wbGV0ZSEnKTtcbiAgICBmaW5pc2hlZExvYWRpbmcoKTtcbiAgfTtcblxuICB2YXIgb25Qcm9ncmVzcyA9IGZ1bmN0aW9uIG9uUHJvZ3Jlc3ModXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCkge1xuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIGZpbGU6ICcgKyB1cmwgKyAnLlxcbkxvYWRlZCAnICsgaXRlbXNMb2FkZWQgKyAnIG9mICcgKyBpdGVtc1RvdGFsICsgJyBmaWxlcy4nKTtcbiAgfTtcblxuICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IodXJsKSB7XG4gICAgY29uc29sZS5sb2coJ1RoZXJlIHdhcyBhbiBlcnJvciBsb2FkaW5nICcgKyB1cmwpO1xuICB9O1xuXG4gIHZhciBmaW5pc2hlZExvYWRpbmcgPSBmdW5jdGlvbiBmaW5pc2hlZExvYWRpbmcoKSB7XG4gICAgbG9hZGVkID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKGUpIHtcbiAgICBIRUlHSFQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgV0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICByZW5kZXJlci5zZXRTaXplKFdJRFRILCBIRUlHSFQpO1xuICAgIGNhbWVyYS5hc3BlY3QgPSBXSURUSCAvIEhFSUdIVDtcbiAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICB9O1xuXG4gIHZhciBpc01vYmlsZSA9IC9pUGhvbmV8QW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgdmFyIGNyZWF0ZUxpZ2h0cyA9IGZ1bmN0aW9uIGNyZWF0ZUxpZ2h0cygpIHtcblxuICAgIGdsb2JhbExpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCgweGZmZmZmZiwgMHg1NTU1NTUsIC45KTtcblxuICAgIHNoYWRvd0xpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIC4zKTtcbiAgICBzaGFkb3dMaWdodC5wb3NpdGlvbi5zZXQoMTAwLCAyNTAsIDE3NSk7XG4gICAgc2hhZG93TGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgLy8gc2hhZG93TGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTE1MDtcbiAgICAvLyBzaGFkb3dMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTUwO1xuICAgIC8vIHNoYWRvd0xpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gMTUwO1xuICAgIC8vIHNoYWRvd0xpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLTE1MDtcbiAgICAvLyBzaGFkb3dMaWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAxO1xuICAgIC8vIHNoYWRvd0xpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gMTAwMDtcblxuICAgIGJhY2tMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAuMik7XG4gICAgYmFja0xpZ2h0LnBvc2l0aW9uLnNldCgtMTAwLCAyMDAsIDE1MCk7XG4gICAgYmFja0xpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIC8vYmFja0xpZ2h0LnBvc2l0aW9uLnNldCgxMDAsIDEwMCwgLTIwMCk7XG5cbiAgICBpZiAoaXNNb2JpbGUpIHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gc2hhZG93TGlnaHQuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMTAyNDtcbiAgICBpZiAoIWlzTW9iaWxlKSBzaGFkb3dMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDIwNDg7XG5cbiAgICBzY2VuZS5hZGQoZ2xvYmFsTGlnaHQpO1xuICAgIHNjZW5lLmFkZChzaGFkb3dMaWdodCk7XG4gICAgc2NlbmUuYWRkKGJhY2tMaWdodCk7XG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhlYWRlYWQsIDAuMSkpO1xuICB9O1xuXG4gIC8vIGNsYXNzIFN0YXIge1xuICAvLyAgIGNvbnN0cnVjdG9yKCl7XG4gIC8vXG4gIC8vICAgU1RBUlxuICAvLyAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy8gICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgLy9cbiAgLy8gICBsZXQgcHRzID0gW10sXG4gIC8vICAgICBudW1QdHMgPSA1O1xuICAvLyAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUHRzICogMjsgaSsrKSB7XG4gIC8vICAgICBsZXQgbCA9IGkgJSAyID09IDFcbiAgLy8gICAgICAgPyAxXG4gIC8vICAgICAgIDogMjtcbiAgLy8gICAgIGxldCBhID0gaSAvIG51bVB0cyAqIE1hdGguUEk7XG4gIC8vICAgICBwdHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihNYXRoLmNvcyhhKSAqIGwsIE1hdGguc2luKGEpICogbCkpO1xuICAvLyAgIH1cbiAgLy8gICBsZXQgc3RhclNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKHB0cyk7XG4gIC8vXG4gIC8vICAgbGV0IGV4dHJ1ZGVTZXR0aW5ncyA9IHtcbiAgLy8gICAgIGFtb3VudDogMC41LFxuICAvLyAgICAgc3RlcHM6IDEsXG4gIC8vICAgICBiZXZlbEVuYWJsZWQ6IGZhbHNlXG4gIC8vICAgfTtcbiAgLy8gICBsZXQgc3Rhckdlb20gPSBuZXcgVEhSRUUuRXh0cnVkZUdlb21ldHJ5KHN0YXJTaGFwZSwgZXh0cnVkZVNldHRpbmdzKTtcbiAgLy8gICBsZXQgc3RhciA9IG5ldyBUSFJFRS5NZXNoKHN0YXJHZW9tLCB5ZWxsb3dNYXQpO1xuICAvLyAgIHN0YXIucm90YXRpb24ueCA9IE1hdGguUEkgLyAyO1xuICAvLyAgIHRoaXMubWVzaC5hZGQoc3Rhcik7XG4gIC8vIH1cbiAgLy8gfVxuICAvL1xuICAvLyBsZXQgU3RhcnNHcm91cCA9IGZ1bmN0aW9uKCkge1xuICAvL1xuICAvLyAgICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gIC8vXG4gIC8vICAgICB0aGlzLm5TdGFycyA9IDE1O1xuICAvL1xuICAvLyAgICAgbGV0IHN0ZXBBbmdsZSA9IE1hdGguUEkgKiAyIC8gdGhpcy5uU3RhcnM7XG4gIC8vXG4gIC8vICAgICAgQ3JlYXRlIHRoZSBTdGFyc1xuICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5TdGFyczsgaSsrKSB7XG4gIC8vXG4gIC8vICAgICAgIHRoaXMucyA9IG5ldyBTdGFyKCk7XG4gIC8vICAgICAgIGxldCBhID0gc3RlcEFuZ2xlICogaTtcbiAgLy8gICAgICAgbGV0IHIgPSAxNTtcbiAgLy9cbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueSA9IE1hdGguc2luKGEpICogcjtcbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueCA9IE1hdGguY29zKGEpICogcjtcbiAgLy9cbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucm90YXRpb24ueiA9IGEgKyBNYXRoLlBJIC8gMjtcbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueiA9IDAgLSBNYXRoLnJhbmRvbSgpICogMztcbiAgLy9cbiAgLy8gICAgICAgICByYW5kb20gc2NhbGUgZm9yIGVhY2ggY2xvdWRcbiAgLy8gICAgICAgbGV0IHNjID0gMC41ICsgTWF0aC5yYW5kb20oKSAqIC42O1xuICAvLyAgICAgICB0aGlzLnMubWVzaC5zY2FsZS5zZXQoc2MsIHNjLCBzYyk7XG4gIC8vXG4gIC8vICAgICAgIHRoaXMubWVzaC5hZGQodGhpcy5zLm1lc2gpO1xuICAvLyAgICAgICBzdGFyQXJyYXkucHVzaCh0aGlzLnMpO1xuICAvLyAgICAgfVxuICAvLyAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcbiAgLy8gfVxuXG4gIHZhciBjcmVhdGVIZWFkID0gZnVuY3Rpb24gY3JlYXRlSGVhZCgpIHtcbiAgICBoZWFkLm5hbWUgPSBcIkhlYWRcIjtcbiAgICBoZWFkID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fY2xhc3Nlc19IZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10oKTtcbiAgICBoZWFkLmlkbGUoKTtcbiAgICBzY2VuZS5hZGQoaGVhZC5tZXNoKTtcbiAgICAvL3N0YXJzID0gbmV3IFN0YXJzR3JvdXAoKTtcbiAgICAvL3NjZW5lLmFkZChzdGFycy5tZXNoKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlQ2hhcmFjdGVyID0gZnVuY3Rpb24gY3JlYXRlQ2hhcmFjdGVyKCkge1xuICAgIGNyZWF0ZUhlYWQoKTtcbiAgICBoZWFkLm1lc2gucG9zaXRpb24uc2V0KDAsIDIsIDApO1xuICAgIC8vc3RhcnMubWVzaC5wb3NpdGlvbi5zZXQoMCwgMTAsIDApO1xuICB9O1xuXG4gIC8vQkxJTktcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdmFyIGlzQmxpbmtpbmcgPSBmYWxzZTtcbiAgdmFyIGJsaW5rTG9vcCA9IGZ1bmN0aW9uIGJsaW5rTG9vcCgpIHtcbiAgICBpc0JsaW5raW5nID0gZmFsc2U7XG5cbiAgICBpZiAoIWlzQmxpbmtpbmcgJiYgTWF0aC5yYW5kb20oKSA+IDAuOTkpIHtcbiAgICAgIGlzQmxpbmtpbmcgPSB0cnVlO1xuICAgICAgYmxpbmsoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGJsaW5rID0gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgaGVhZC5leWVzLnNjYWxlLnkgPSAxO1xuICAgIFR3ZWVuTWF4LnRvKGhlYWQuZXllcy5zY2FsZSwgLjA3LCB7XG4gICAgICB5OiAwLFxuICAgICAgeW95bzogdHJ1ZSxcbiAgICAgIHJlcGVhdDogMSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlzQmxpbmtpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvL0hFQUQgQU5JTUFUSU9OU1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8vIEhlYWQucHJvdG90eXBlLmRpenp5ID0gZnVuY3Rpb24oKSB7XG4gIC8vXG4gIC8vICAgICBsZXQgZGlzdGFuY2UgPSAxO1xuICAvL1xuICAvLyAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDE7XG4gIC8vICAgICB0aGlzLmhlYWQucm90YXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAxKSAqIE1hdGguUEkgKiAwLjAxO1xuICAvLyAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnkgPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDE7XG4gIC8vXG4gIC8vICAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIC1kaXN0YW5jZTtcbiAgLy8gICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwNSkgKiBkaXN0YW5jZTtcbiAgLy8gICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDUpICogLWRpc3RhbmNlO1xuICAvLyAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55ID0gTWF0aC5jb3MoRGF0ZS5ub3coKSAqIDAuMDA1KSAqIGRpc3RhbmNlO1xuICAvLyAgICAgdGhpcy5leWVCcm93UmlnaHQucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAwNSkgKiAtZGlzdGFuY2U7XG4gIC8vICAgICB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDUpICogZGlzdGFuY2U7XG4gIC8vXG4gIC8vICAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIE1hdGguUEkgKiAwLjA1O1xuICAvL1xuICAvLyAgICAgYmxpbmtMb29wKCk7XG4gIC8vICAgICBzdGFycy5zcGluU2NhbGUoKTtcbiAgLy9cbiAgLy8gICB9XG5cbiAgLy9TVEFSR1JPVVBcbiAgLy8gU3RhcnNHcm91cC5wcm90b3R5cGUuc3BpblNjYWxlID0gZnVuY3Rpb24oKSB7XG4gIC8vXG4gIC8vICAgICB0aGlzLm1lc2gucm90YXRpb24ueiArPSAwLjAyO1xuICAvL1xuICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgLy8gICAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMSkgKiBNYXRoLlBJICogMC4xIDtcbiAgLy8gICAgICAgc3RhckFycmF5W2ldLm1lc2gucm90YXRpb24ueiArPSAwIC0gTWF0aC5yYW5kb20oKSAqIDAuMTU7XG4gIC8vICAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnggKz0gMCAtIE1hdGgucmFuZG9tKCkgKiAwLjA1O1xuICAvL1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICB2YXIgY29udHJvbGxlclRleHQgPSBmdW5jdGlvbiBjb250cm9sbGVyVGV4dCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgY29udHJvbGxlclRleHQpO1xuXG4gICAgdGhpcy5za2luID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnNraW47XG4gICAgdGhpcy5mcmVja2xlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5mcmVja2xlcztcbiAgICB0aGlzLmV5ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fb2JqZWN0c19jb2xvcnNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5leWU7XG4gICAgdGhpcy5nbGFzc2VzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19vYmplY3RzX2NvbG9yc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmdsYXNzZXM7XG4gICAgdGhpcy5oYXQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX29iamVjdHNfY29sb3JzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uaGF0O1xuICB9O1xuXG4gIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcCgpIHtcbiAgICBibGlua0xvb3AoKTtcbiAgICAvL2hlYWQuZGl6enkoKTtcbiAgICB2YXIgeFRhcmdldCA9IG1vdXNlUG9zLnggLSB3aW5kb3dIYWxmWDtcbiAgICB2YXIgeVRhcmdldCA9IG1vdXNlUG9zLnkgLSB3aW5kb3dIYWxmWTtcblxuICAgIC8vY29uc29sZS5sb2coeFRhcmdldCk7XG5cbiAgICBoZWFkLmlkbGUoeFRhcmdldCwgeVRhcmdldCk7XG4gICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgfTtcblxuICAvL3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaW5pdCwgZmFsc2UpO1xuXG4gIGluaXQoKTtcbn1cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNwZWVjaFJlY29nbml0aW9uID0gU3BlZWNoUmVjb2duaXRpb24gfHwgd2Via2l0U3BlZWNoUmVjb2duaXRpb247XG52YXIgU3BlZWNoR3JhbW1hckxpc3QgPSBTcGVlY2hHcmFtbWFyTGlzdCB8fCB3ZWJraXRTcGVlY2hHcmFtbWFyTGlzdDtcbnZhciBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50ID0gU3BlZWNoUmVjb2duaXRpb25FdmVudCB8fCB3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbkV2ZW50O1xudmFyIEF1ZGlvQ29udGV4dCA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dDtcblxudmFyIGF1ZGlvQ3R4ID0gdm9pZCAwLFxuICAgIHJlY29nbml0aW9uID0gdm9pZCAwO1xudmFyIHRyYW5zY3JpcHQgPSBcIlwiO1xudmFyIGF1ZGlvQ2h1bmtzID0gW107XG52YXIgc291cmNlID0gdm9pZCAwO1xuXG52YXIgJHRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmllbGQnKTtcbnZhciAkcmVjb3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY29yZCcpO1xudmFyICRhdWRpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdWRpb19jb250cm9scycpO1xuXG52YXIgQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEF1ZGlvKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXVkaW8pO1xuXG4gICAgLy8gaGFuZGxlIFNwZWVjaFJlY29nbml0aW9uXG4gICAgcmVjb2duaXRpb24gPSBuZXcgU3BlZWNoUmVjb2duaXRpb24oKTtcbiAgICB0aGlzLnNwZWVjaFNldHRpbmdzKCk7XG5cbiAgICByZWNvZ25pdGlvbi5vbnJlc3VsdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIF90aGlzLmdvdFJlc3VsdChldmVudCk7XG4gICAgfTtcbiAgICByZWNvZ25pdGlvbi5vbnNwZWVjaGVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMub25TcGVlY2hFbmQoZSk7XG4gICAgfTtcbiAgICAkdGV4dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnR4dCA9ICR0ZXh0LnZhbHVlO1xuICAgIH0pO1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoeyBhdWRpbzogdHJ1ZSB9KS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgIF90aGlzLm1lZGlhUmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcihzdHJlYW0pO1xuXG4gICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tU3RhcnQgUmVjb3JkaW5nLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgICAgJHJlY29yZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubWVkaWFSZWNvcmRlci5zdGFydCgpO1xuICAgICAgICByZWNvZ25pdGlvbi5zdGFydCgpO1xuICAgICAgICAkcmVjb3JkLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgX3RoaXMubWVkaWFSZWNvcmRlci5hZGRFdmVudExpc3RlbmVyKCdkYXRhYXZhaWxhYmxlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGF1ZGlvQ2h1bmtzLnB1c2goZS5kYXRhKTtcbiAgICAgIH0pOyAvLyBhZGQgYXVkaW9jaHVuayB0byBhcnJheVxuXG4gICAgICAvLyB3aGVuIG1lZGlhUmVjb3JkZXIgc3RvcHMsIG1ha2UgYW5kIGhhbmRsZSBhdWRpbyBibG9iXG4gICAgICBfdGhpcy5tZWRpYVJlY29yZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3AnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgLy8gZ2l2ZSBsaW5rIHRvIGF1ZGlvIGNvbnRyb2xzIHRvIHBsYXkgYW5kIGNvbnRyb2wgdGhlIHNvdW5kXG4gICAgICAgIF90aGlzLmJsb2IgPSBuZXcgQmxvYihhdWRpb0NodW5rcywgeyB0eXBlOiAnYXVkaW8vb2dnJyB9KTsgLy8gY3JlYXRlIGJsb2IgZnJvbSBhdWRpb2NodW5rc1xuICAgICAgICB2YXIgYmxvYlVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoX3RoaXMuYmxvYik7IC8vIG1ha2UgdXJsIGZyb20gYmxvYiBzdHJlYW1cbiAgICAgICAgJGF1ZGlvLnNyYyA9IGJsb2JVcmw7XG5cbiAgICAgICAgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhdWRpb0N0eC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoJGF1ZGlvKTsgLy8gZ2V0IGF1ZGlvIGZyb21cbiAgICAgICAgdmFyIGJpcXVhZEZpbHRlciA9IGF1ZGlvQ3R4LmNyZWF0ZUJpcXVhZEZpbHRlcigpOyAvLyBDcmVhdGUgdGhlIGZpbHRlclxuXG5cbiAgICAgICAgdmFyICRiaXF1YWRSYW5nZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaXF1YWRWYWx1ZScpO1xuICAgICAgICB2YXIgJGJpcXVhZFR5cGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmlxdWFkVHlwZScpO1xuXG4gICAgICAgICRiaXF1YWRUeXBlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBiaXF1YWRGaWx0ZXIudHlwZSA9ICRiaXF1YWRUeXBlLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBiaXF1YWRGaWx0ZXIuZnJlcXVlbmN5LnZhbHVlID0gJGJpcXVhZFJhbmdlLnZhbHVlO1xuXG4gICAgICAgICRiaXF1YWRSYW5nZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYmlxdWFkRmlsdGVyLmZyZXF1ZW5jeS52YWx1ZSA9ICRiaXF1YWRSYW5nZS52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc291cmNlLmNvbm5lY3QoYmlxdWFkRmlsdGVyKTtcbiAgICAgICAgYmlxdWFkRmlsdGVyLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pO1xuXG4gICAgICAgIGF1ZGlvQ2h1bmtzID0gW107XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdWRpbywgW3tcbiAgICBrZXk6ICdvblNwZWVjaEVuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3BlZWNoRW5kKGUpIHtcbiAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5zdG9wKCk7XG4gICAgICByZWNvZ25pdGlvbi5zdG9wKCk7XG4gICAgICAkcmVjb3JkLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAkcmVjb3JkLnRleHRDb250ZW50ID0gJ09wbmlldXcgcHJvYmVyZW4/JztcbiAgICAgIHRoaXMudHh0ID0gJHRleHQudmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ290UmVzdWx0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ290UmVzdWx0KGV2ZW50KSB7XG4gICAgICB2YXIgbGFzdCA9IGV2ZW50LnJlc3VsdHMubGVuZ3RoIC0gMTtcbiAgICAgIHRyYW5zY3JpcHQgPSBldmVudC5yZXN1bHRzW2xhc3RdWzBdLnRyYW5zY3JpcHQ7XG4gICAgICAkdGV4dC52YWx1ZSA9IHRyYW5zY3JpcHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3BlZWNoU2V0dGluZ3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzcGVlY2hTZXR0aW5ncygpIHtcbiAgICAgIHJlY29nbml0aW9uLmNvbnRpbnVvdXMgPSBmYWxzZTtcbiAgICAgIHJlY29nbml0aW9uLmxhbmcgPSAnbmwtQkUnO1xuICAgICAgcmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSBmYWxzZTtcbiAgICAgIHJlY29nbml0aW9uLm1heEFsdGVybmF0aXZlcyA9IDE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEF1ZGlvO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKEF1ZGlvKTtcbjtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpYl9jYXJ0QVBJX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9zaG9ydGlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfc2hvcnRpZF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Nob3J0aWRfXyk7XG5cblxudmFyIG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZV9pbnB1dCcpO1xudmFyIGxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudW5pcXVlX2xpbmsnKTtcblxudmFyIGhhbmRsZVNhdmUgPSBmdW5jdGlvbiBoYW5kbGVTYXZlKF9yZWYpIHtcbiAgdmFyIHRleHQgPSBfcmVmLnRleHQsXG4gICAgICBibG9iID0gX3JlZi5ibG9iO1xuXG4gIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9zaG9ydGlkX19fZGVmYXVsdC5hLmdlbmVyYXRlKCk7XG4gIGNvbnNvbGUubG9nKG5hbWUudmFsdWUpO1xuICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpYl9jYXJ0QVBJX19bXCJhXCIgLyogZGVmYXVsdCAqL10uY3JlYXRlKHtcbiAgICB0ZXh0OiB0ZXh0LFxuICAgIGlkOiBpZCxcbiAgICBuYW1lOiBuYW1lLnZhbHVlLFxuICAgIGJsb2I6IGJsb2JcbiAgfSk7XG5cbiAgbGluay5pbm5lckhUTUwgPSAnaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9zYW50YS5odG1sP2lkPScgKyBpZDtcbiAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9zYW50YS5odG1sP2lkPScgKyBpZCk7XG4gIGxpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKGhhbmRsZVNhdmUpO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGFscGhhYmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBlbmNvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIGRlY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xudmFyIGJ1aWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG52YXIgaXNWYWxpZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG4vLyBpZiB5b3UgYXJlIHVzaW5nIGNsdXN0ZXIgb3IgbXVsdGlwbGUgc2VydmVycyB1c2UgdGhpcyB0byBtYWtlIGVhY2ggaW5zdGFuY2Vcbi8vIGhhcyBhIHVuaXF1ZSB2YWx1ZSBmb3Igd29ya2VyXG4vLyBOb3RlOiBJIGRvbid0IGtub3cgaWYgdGhpcyBpcyBhdXRvbWF0aWNhbGx5IHNldCB3aGVuIHVzaW5nIHRoaXJkXG4vLyBwYXJ0eSBjbHVzdGVyIHNvbHV0aW9ucyBzdWNoIGFzIHBtMi5cbnZhciBjbHVzdGVyV29ya2VySWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSB8fCAwO1xuXG4vKipcbiAqIFNldCB0aGUgc2VlZC5cbiAqIEhpZ2hseSByZWNvbW1lbmRlZCBpZiB5b3UgZG9uJ3Qgd2FudCBwZW9wbGUgdG8gdHJ5IHRvIGZpZ3VyZSBvdXQgeW91ciBpZCBzY2hlbWEuXG4gKiBleHBvc2VkIGFzIHNob3J0aWQuc2VlZChpbnQpXG4gKiBAcGFyYW0gc2VlZCBJbnRlZ2VyIHZhbHVlIHRvIHNlZWQgdGhlIHJhbmRvbSBhbHBoYWJldC4gIEFMV0FZUyBVU0UgVEhFIFNBTUUgU0VFRCBvciB5b3UgbWlnaHQgZ2V0IG92ZXJsYXBzLlxuICovXG5mdW5jdGlvbiBzZWVkKHNlZWRWYWx1ZSkge1xuICAgIGFscGhhYmV0LnNlZWQoc2VlZFZhbHVlKTtcbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjbHVzdGVyIHdvcmtlciBvciBtYWNoaW5lIGlkXG4gKiBleHBvc2VkIGFzIHNob3J0aWQud29ya2VyKGludClcbiAqIEBwYXJhbSB3b3JrZXJJZCB3b3JrZXIgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyLiAgTnVtYmVyIGxlc3MgdGhhbiAxNiBpcyByZWNvbW1lbmRlZC5cbiAqIHJldHVybnMgc2hvcnRpZCBtb2R1bGUgc28gaXQgY2FuIGJlIGNoYWluZWQuXG4gKi9cbmZ1bmN0aW9uIHdvcmtlcih3b3JrZXJJZCkge1xuICAgIGNsdXN0ZXJXb3JrZXJJZCA9IHdvcmtlcklkO1xuICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLyoqXG4gKlxuICogc2V0cyBuZXcgY2hhcmFjdGVycyB0byB1c2UgaW4gdGhlIGFscGhhYmV0XG4gKiByZXR1cm5zIHRoZSBzaHVmZmxlZCBhbHBoYWJldFxuICovXG5mdW5jdGlvbiBjaGFyYWN0ZXJzKG5ld0NoYXJhY3RlcnMpIHtcbiAgICBpZiAobmV3Q2hhcmFjdGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFscGhhYmV0LmNoYXJhY3RlcnMobmV3Q2hhcmFjdGVycyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFscGhhYmV0LnNodWZmbGVkKCk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgdW5pcXVlIGlkXG4gKiBSZXR1cm5zIHN0cmluZyBpZFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZSgpIHtcbiAgcmV0dXJuIGJ1aWxkKGNsdXN0ZXJXb3JrZXJJZCk7XG59XG5cbi8vIEV4cG9ydCBhbGwgb3RoZXIgZnVuY3Rpb25zIGFzIHByb3BlcnRpZXMgb2YgdGhlIGdlbmVyYXRlIGZ1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbm1vZHVsZS5leHBvcnRzLnNlZWQgPSBzZWVkO1xubW9kdWxlLmV4cG9ydHMud29ya2VyID0gd29ya2VyO1xubW9kdWxlLmV4cG9ydHMuY2hhcmFjdGVycyA9IGNoYXJhY3RlcnM7XG5tb2R1bGUuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cy5pc1ZhbGlkID0gaXNWYWxpZDtcblxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIEZvdW5kIHRoaXMgc2VlZC1iYXNlZCByYW5kb20gZ2VuZXJhdG9yIHNvbWV3aGVyZVxuLy8gQmFzZWQgb24gVGhlIENlbnRyYWwgUmFuZG9taXplciAxLjMgKEMpIDE5OTcgYnkgUGF1bCBIb3VsZSAoaG91bGVAbXNjLmNvcm5lbGwuZWR1KVxuXG52YXIgc2VlZCA9IDE7XG5cbi8qKlxuICogcmV0dXJuIGEgcmFuZG9tIG51bWJlciBiYXNlZCBvbiBhIHNlZWRcbiAqIEBwYXJhbSBzZWVkXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXROZXh0VmFsdWUoKSB7XG4gICAgc2VlZCA9IChzZWVkICogOTMwMSArIDQ5Mjk3KSAlIDIzMzI4MDtcbiAgICByZXR1cm4gc2VlZC8oMjMzMjgwLjApO1xufVxuXG5mdW5jdGlvbiBzZXRTZWVkKF9zZWVkXykge1xuICAgIHNlZWQgPSBfc2VlZF87XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5leHRWYWx1ZTogZ2V0TmV4dFZhbHVlLFxuICAgIHNlZWQ6IHNldFNlZWRcbn07XG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY3J5cHRvID0gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgKHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvKTsgLy8gSUUgMTEgdXNlcyB3aW5kb3cubXNDcnlwdG9cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZSgpIHtcbiAgICBpZiAoIWNyeXB0byB8fCAhY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSAmIDB4MzA7XG4gICAgfVxuICAgIHZhciBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhkZXN0KTtcbiAgICByZXR1cm4gZGVzdFswXSAmIDB4MzA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZTtcblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYWxwaGFiZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG4vKipcbiAqIERlY29kZSB0aGUgaWQgdG8gZ2V0IHRoZSB2ZXJzaW9uIGFuZCB3b3JrZXJcbiAqIE1haW5seSBmb3IgZGVidWdnaW5nIGFuZCB0ZXN0aW5nLlxuICogQHBhcmFtIGlkIC0gdGhlIHNob3J0aWQtZ2VuZXJhdGVkIGlkLlxuICovXG5mdW5jdGlvbiBkZWNvZGUoaWQpIHtcbiAgICB2YXIgY2hhcmFjdGVycyA9IGFscGhhYmV0LnNodWZmbGVkKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogY2hhcmFjdGVycy5pbmRleE9mKGlkLnN1YnN0cigwLCAxKSkgJiAweDBmLFxuICAgICAgICB3b3JrZXI6IGNoYXJhY3RlcnMuaW5kZXhPZihpZC5zdWJzdHIoMSwgMSkpICYgMHgwZlxuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlO1xuXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGVuY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgYWxwaGFiZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG4vLyBJZ25vcmUgYWxsIG1pbGxpc2Vjb25kcyBiZWZvcmUgYSBjZXJ0YWluIHRpbWUgdG8gcmVkdWNlIHRoZSBzaXplIG9mIHRoZSBkYXRlIGVudHJvcHkgd2l0aG91dCBzYWNyaWZpY2luZyB1bmlxdWVuZXNzLlxuLy8gVGhpcyBudW1iZXIgc2hvdWxkIGJlIHVwZGF0ZWQgZXZlcnkgeWVhciBvciBzbyB0byBrZWVwIHRoZSBnZW5lcmF0ZWQgaWQgc2hvcnQuXG4vLyBUbyByZWdlbmVyYXRlIGBuZXcgRGF0ZSgpIC0gMGAgYW5kIGJ1bXAgdGhlIHZlcnNpb24uIEFsd2F5cyBidW1wIHRoZSB2ZXJzaW9uIVxudmFyIFJFRFVDRV9USU1FID0gMTQ1OTcwNzYwNjUxODtcblxuLy8gZG9uJ3QgY2hhbmdlIHVubGVzcyB3ZSBjaGFuZ2UgdGhlIGFsZ29zIG9yIFJFRFVDRV9USU1FXG4vLyBtdXN0IGJlIGFuIGludGVnZXIgYW5kIGxlc3MgdGhhbiAxNlxudmFyIHZlcnNpb24gPSA2O1xuXG4vLyBDb3VudGVyIGlzIHVzZWQgd2hlbiBzaG9ydGlkIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBpbiBvbmUgc2Vjb25kLlxudmFyIGNvdW50ZXI7XG5cbi8vIFJlbWVtYmVyIHRoZSBsYXN0IHRpbWUgc2hvcnRpZCB3YXMgY2FsbGVkIGluIGNhc2UgY291bnRlciBpcyBuZWVkZWQuXG52YXIgcHJldmlvdXNTZWNvbmRzO1xuXG4vKipcbiAqIEdlbmVyYXRlIHVuaXF1ZSBpZFxuICogUmV0dXJucyBzdHJpbmcgaWRcbiAqL1xuZnVuY3Rpb24gYnVpbGQoY2x1c3RlcldvcmtlcklkKSB7XG5cbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBSRURVQ0VfVElNRSkgKiAwLjAwMSk7XG5cbiAgICBpZiAoc2Vjb25kcyA9PT0gcHJldmlvdXNTZWNvbmRzKSB7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgICAgcHJldmlvdXNTZWNvbmRzID0gc2Vjb25kcztcbiAgICB9XG5cbiAgICBzdHIgPSBzdHIgKyBlbmNvZGUoYWxwaGFiZXQubG9va3VwLCB2ZXJzaW9uKTtcbiAgICBzdHIgPSBzdHIgKyBlbmNvZGUoYWxwaGFiZXQubG9va3VwLCBjbHVzdGVyV29ya2VySWQpO1xuICAgIGlmIChjb3VudGVyID4gMCkge1xuICAgICAgICBzdHIgPSBzdHIgKyBlbmNvZGUoYWxwaGFiZXQubG9va3VwLCBjb3VudGVyKTtcbiAgICB9XG4gICAgc3RyID0gc3RyICsgZW5jb2RlKGFscGhhYmV0Lmxvb2t1cCwgc2Vjb25kcyk7XG5cbiAgICByZXR1cm4gc3RyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkO1xuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhbHBoYWJldCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbmZ1bmN0aW9uIGlzU2hvcnRJZChpZCkge1xuICAgIGlmICghaWQgfHwgdHlwZW9mIGlkICE9PSAnc3RyaW5nJyB8fCBpZC5sZW5ndGggPCA2ICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJhY3RlcnMgPSBhbHBoYWJldC5jaGFyYWN0ZXJzKCk7XG4gICAgdmFyIGxlbiA9IGlkLmxlbmd0aDtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuO2krKykge1xuICAgICAgICBpZiAoY2hhcmFjdGVycy5pbmRleE9mKGlkW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Nob3J0SWQ7XG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IDA7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBqcy9zY3JpcHQuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAyOWZkOWRiNjVhMzI4ZTg4MjZlZCIsImNvbnN0IENvbG9ycyA9IHtcbiAgc2tpbjogMHhmZmUwYmQsXG4gIGZyZWNrbGVzOiAweGNmYmE5NixcbiAgd2hpdGU6IDB4ZTllYmVlLFxuICBnbGFzc2VzOiAweGY5YzQyMSxcbiAgdGVldGg6IDB4ZmZmZmZmLFxuICBibGFjazogMHgyZTJlMmUsXG4gIGV5ZTogMHg2Mjk1YTgsXG4gIGhhdDogMHg3MjAzMTRcbn07XG5leHBvcnQgZGVmYXVsdCBDb2xvcnM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvb2JqZWN0cy9jb2xvcnMuanMiLCJpbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy1mZXRjaCc7XG5cbmNvbnN0IHVybCA9IGAvYXBpL2NhcnRgO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgY3JlYXRlOiAoe3RleHQsIGlkLCBuYW1lLCBibG9ifSkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZCA9IGBQT1NUYDtcbiAgICBjb25zdCBuZXdGaWxlTmFtZSA9IGAke2lkLnNwbGl0KGAgYCkuam9pbihgX2ApfWA7XG4gICAgY29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHkuYXBwZW5kKGB0ZXh0YCwgdGV4dCk7XG4gICAgYm9keS5hcHBlbmQoYGlkYCwgaWQpO1xuICAgIGJvZHkuYXBwZW5kKGBuYW1lYCwgbmFtZSk7XG4gICAgYm9keS5hcHBlbmQoYHNvdW5kYCwgYmxvYiwgbmV3RmlsZU5hbWUpO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge21ldGhvZCwgYm9keX0pXG4gICAgICAudGhlbihyID0+IHIuanNvbigpKTtcbiAgfSxcblxuICByZWFkOiAoKSA9PiB7XG4gICAgcmV0dXJuIGZldGNoKGAke3VybH0/aXNBY3RpdmU9dHJ1ZWApXG4gICAgICAudGhlbihyID0+IHIuanNvbigpKTtcbiAgfSxcblxuICByZWFkT25lOiBpZCA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gYEdFVGA7XG4gICAgcmV0dXJuIGZldGNoKGAke3VybH0vJHtpZH1gLCB7bWV0aG9kfSkudGhlbihyID0+IHIuanNvbigpKTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9saWIvY2FydEFQSS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJhbmRvbUZyb21TZWVkID0gcmVxdWlyZSgnLi9yYW5kb20vcmFuZG9tLWZyb20tc2VlZCcpO1xuXG52YXIgT1JJR0lOQUwgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfLSc7XG52YXIgYWxwaGFiZXQ7XG52YXIgcHJldmlvdXNTZWVkO1xuXG52YXIgc2h1ZmZsZWQ7XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHNodWZmbGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNldENoYXJhY3RlcnMoX2FscGhhYmV0Xykge1xuICAgIGlmICghX2FscGhhYmV0Xykge1xuICAgICAgICBpZiAoYWxwaGFiZXQgIT09IE9SSUdJTkFMKSB7XG4gICAgICAgICAgICBhbHBoYWJldCA9IE9SSUdJTkFMO1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9hbHBoYWJldF8gPT09IGFscGhhYmV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX2FscGhhYmV0Xy5sZW5ndGggIT09IE9SSUdJTkFMLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N1c3RvbSBhbHBoYWJldCBmb3Igc2hvcnRpZCBtdXN0IGJlICcgKyBPUklHSU5BTC5sZW5ndGggKyAnIHVuaXF1ZSBjaGFyYWN0ZXJzLiBZb3Ugc3VibWl0dGVkICcgKyBfYWxwaGFiZXRfLmxlbmd0aCArICcgY2hhcmFjdGVyczogJyArIF9hbHBoYWJldF8pO1xuICAgIH1cblxuICAgIHZhciB1bmlxdWUgPSBfYWxwaGFiZXRfLnNwbGl0KCcnKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kLCBhcnIpe1xuICAgICAgIHJldHVybiBpbmQgIT09IGFyci5sYXN0SW5kZXhPZihpdGVtKTtcbiAgICB9KTtcblxuICAgIGlmICh1bmlxdWUubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ3VzdG9tIGFscGhhYmV0IGZvciBzaG9ydGlkIG11c3QgYmUgJyArIE9SSUdJTkFMLmxlbmd0aCArICcgdW5pcXVlIGNoYXJhY3RlcnMuIFRoZXNlIGNoYXJhY3RlcnMgd2VyZSBub3QgdW5pcXVlOiAnICsgdW5pcXVlLmpvaW4oJywgJykpO1xuICAgIH1cblxuICAgIGFscGhhYmV0ID0gX2FscGhhYmV0XztcbiAgICByZXNldCgpO1xufVxuXG5mdW5jdGlvbiBjaGFyYWN0ZXJzKF9hbHBoYWJldF8pIHtcbiAgICBzZXRDaGFyYWN0ZXJzKF9hbHBoYWJldF8pO1xuICAgIHJldHVybiBhbHBoYWJldDtcbn1cblxuZnVuY3Rpb24gc2V0U2VlZChzZWVkKSB7XG4gICAgcmFuZG9tRnJvbVNlZWQuc2VlZChzZWVkKTtcbiAgICBpZiAocHJldmlvdXNTZWVkICE9PSBzZWVkKSB7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIHByZXZpb3VzU2VlZCA9IHNlZWQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaHVmZmxlKCkge1xuICAgIGlmICghYWxwaGFiZXQpIHtcbiAgICAgICAgc2V0Q2hhcmFjdGVycyhPUklHSU5BTCk7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZUFycmF5ID0gYWxwaGFiZXQuc3BsaXQoJycpO1xuICAgIHZhciB0YXJnZXRBcnJheSA9IFtdO1xuICAgIHZhciByID0gcmFuZG9tRnJvbVNlZWQubmV4dFZhbHVlKCk7XG4gICAgdmFyIGNoYXJhY3RlckluZGV4O1xuXG4gICAgd2hpbGUgKHNvdXJjZUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgciA9IHJhbmRvbUZyb21TZWVkLm5leHRWYWx1ZSgpO1xuICAgICAgICBjaGFyYWN0ZXJJbmRleCA9IE1hdGguZmxvb3IociAqIHNvdXJjZUFycmF5Lmxlbmd0aCk7XG4gICAgICAgIHRhcmdldEFycmF5LnB1c2goc291cmNlQXJyYXkuc3BsaWNlKGNoYXJhY3RlckluZGV4LCAxKVswXSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRBcnJheS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2h1ZmZsZWQoKSB7XG4gICAgaWYgKHNodWZmbGVkKSB7XG4gICAgICAgIHJldHVybiBzaHVmZmxlZDtcbiAgICB9XG4gICAgc2h1ZmZsZWQgPSBzaHVmZmxlKCk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xufVxuXG4vKipcbiAqIGxvb2t1cCBzaHVmZmxlZCBsZXR0ZXJcbiAqIEBwYXJhbSBpbmRleFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbG9va3VwKGluZGV4KSB7XG4gICAgdmFyIGFscGhhYmV0U2h1ZmZsZWQgPSBnZXRTaHVmZmxlZCgpO1xuICAgIHJldHVybiBhbHBoYWJldFNodWZmbGVkW2luZGV4XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY2hhcmFjdGVyczogY2hhcmFjdGVycyxcbiAgICBzZWVkOiBzZXRTZWVkLFxuICAgIGxvb2t1cDogbG9va3VwLFxuICAgIHNodWZmbGVkOiBnZXRTaHVmZmxlZFxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL2FscGhhYmV0LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBDb2xvcnMgZnJvbSAnLi4vb2JqZWN0cy9jb2xvcnMnO1xuaW1wb3J0IE1hdCBmcm9tICcuLi9vYmplY3RzL01hdGVyaWFscyc7XG5cbmxldCBpc0JsaW5raW5nID0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcblxuICAgIGxldCBoZWFkR2VvbSA9IG5ldyBUSFJFRS5Cb3hCdWZmZXJHZW9tZXRyeSgxNiwgMTYsIDE2KTtcbiAgICBsZXQgc2tpbk1hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLnNraW4sIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4gICAgbGV0IGV5ZU1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5leWUsIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG5cbiAgICB0aGlzLmhlYWQgPSBuZXcgVEhSRUUuTWVzaChoZWFkR2VvbSxza2luTWF0KTtcbiAgICB0aGlzLmhlYWQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgdGhpcy5oZWFkLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLm1lc2guYWRkKHRoaXMuaGVhZCk7XG5cbiAgICB0aGlzLmJlYXJkID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5iZWFyZC5wb3NpdGlvbi55ID0gLTc7XG4gICAgdGhpcy5iZWFyZC5wb3NpdGlvbi56ID0gMC41O1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5iZWFyZCk7XG5cbiAgICB0aGlzLkJlYXJkKCk7XG4gICAgdGhpcy5HbGFzc2VzKCk7XG4gICAgdGhpcy5IYWlyKCk7XG4gICAgdGhpcy5FeWVzKCk7XG4gICAgdGhpcy5FeWVCcm93cygpO1xuICAgIHRoaXMuSGF0KCk7XG4gICAgdGhpcy5GcmVja2xlcygpO1xuICAgIHRoaXMuRmVhdHVyZXMoKTtcbiAgICB0aGlzLmlkbGUoKTtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgbm9ybWFsaXplKHYsIHZtaW4sIHZtYXgsIHRtaW4sIHRtYXgpIHtcbiAgICBjb25zdCBudiA9IE1hdGgubWF4KE1hdGgubWluKHYsIHZtYXgpLCB2bWluKTtcbiAgICBjb25zdCBkdiA9IHZtYXggLSB2bWluO1xuICAgIGNvbnN0IHBjID0gKG52IC0gdm1pbikgLyBkdjtcbiAgICBjb25zdCBkdCA9IHRtYXggLSB0bWluO1xuICAgIGNvbnN0IHR2ID0gdG1pbiArIChwYyAqIGR0KTtcbiAgICByZXR1cm4gdHY7XG4gIH1cblxuICB1cGRhdGVCb2R5KHNwZWVkLCBleWVCbHVlUmlnaHRQb3NYLCBleWVCbHVlTGVmdFBvc1gsIGV5ZUJsdWVSaWdodFBvc1ksIGV5ZUJsdWVMZWZ0UG9zWSkge1xuICAgIC8vdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueSArPSAobGlvbi50SGVhZ1JvdFkgLSB0aGlzLmV5ZUJsdWVSaWdodC5yb3RhdGlvbi55KSAvIHNwZWVkO1xuICAgIC8vdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueCArPSAodGhpcy5leWVCbHVlUmlnaHRSb3RYIC0gdGhpcy5leWVCbHVlUmlnaHQucm90YXRpb24ueCkgLyBzcGVlZDtcblxuICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnggKz0gKGV5ZUJsdWVSaWdodFBvc1ggLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54KSAvIHNwZWVkO1xuICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCArPSAoZXllQmx1ZUxlZnRQb3NYIC0gdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi54KSAvIHNwZWVkO1xuXG4gICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueSArPSAoZXllQmx1ZVJpZ2h0UG9zWSAtIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG4gICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55ICs9IChleWVCbHVlTGVmdFBvc1kgLSB0aGlzLmV5ZUJsdWVMZWZ0LnBvc2l0aW9uLnkpIC8gc3BlZWQ7XG5cbiAgICAvL3RoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgKz0gTWF0aC5zaW4odGhpcy5leWVCbHVlUmlnaHRQb3NZIC0gdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24ueSkgLyBzcGVlZDtcbiAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi56ICs9ICh0aGlzLmV5ZUJsdWVSaWdodFBvc1ogLSB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi56KSAvIHNwZWVkO1xuICB9XG5cbiAgaWRsZSh4VGFyZ2V0ID0gMCwgeVRhcmdldCA9IDApIHtcblxuICAgIC8vY29uc29sZS5sb2coeFRhcmdldCwgeVRhcmdldCk7XG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54KTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi55KTtcbiAgICBsZXQgZGlzdGFuY2UgPSAxO1xuXG4gICAgdGhpcy5oZWFkLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDA1O1xuICAgIHRoaXMuaGVhZC5yb3RhdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA0KSAqIE1hdGguUEkgKiAwLjAzO1xuXG4gICAgLy8gdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDAyKSAqIGRpc3RhbmNlIC8gMjtcbiAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDAyKSAqIGRpc3RhbmNlIC8gMjtcblxuICAgIGNvbnN0IGV5ZUJsdWVSaWdodFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjYsIDAuNik7XG5cbiAgICBjb25zdCBleWVCbHVlTGVmdFBvc1ggPSB0aGlzLm5vcm1hbGl6ZSh4VGFyZ2V0LCAtMjAwLCAyMDAsIC0wLjYsIDAuNik7XG5cbiAgICBjb25zdCBleWVCbHVlUmlnaHRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgY29uc3QgZXllQmx1ZUxlZnRQb3NZID0gdGhpcy5ub3JtYWxpemUoeVRhcmdldCwgLTIwMCwgMjAwLCAwLjYsIC0wLjYpO1xuXG4gICAgLy8gdGhpcy5leWVCbHVlUmlnaHRSb3RZID0geFRhcmdldCwgLTIwLCAyMCwgLU1hdGguUEkgLyA0LCBNYXRoLlBJIC8gNDtcbiAgICAvLyB0aGlzLmV5ZUJsdWVSaWdodFJvdFggPSB5VGFyZ2V0LCAtMjAsIDIwLCAtTWF0aC5QSSAvIDQsIE1hdGguUEkgLyA0O1xuICAgIC8vIHRoaXMuZXllQmx1ZVJpZ2h0UG9zWCA9IHhUYXJnZXQsIC0yMCwgMjAsIDcwLCAtNzA7XG4gICAgLy8gdGhpcy5leWVCbHVlUmlnaHRQb3NZID0geVRhcmdldCwgLTE0MCwgMjYwLCAyMCwgMTAwO1xuICAgIC8vIHRoaXMuZXllQmx1ZVJpZ2h0UG9zWiA9IDc7XG5cbiAgICB0aGlzLmV5ZUJyb3dSaWdodC5wb3NpdGlvbi55ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA0KSAqIGRpc3RhbmNlIC8gMjtcbiAgICB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDQpICogZGlzdGFuY2UgLyAyO1xuXG4gICAgLy8gdGhpcy5leWVCcm93UmlnaHQucm90YXRpb24ueiA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwMikgKiBNYXRoLlBJICogMC4wNDtcbiAgICAvLyB0aGlzLmV5ZUJyb3dMZWZ0LnJvdGF0aW9uLnogPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDIpICogTWF0aC5QSSAqIDAuMDQ7XG5cbiAgICAvL3RoaXMuYmVhcmQubW91dGgucG9zaXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwMikgKiBkaXN0YW5jZSAvIDI7XG5cbiAgICAvLyBTTk9SIE9NSE9PRy1PTUxBQUdcbiAgICB0aGlzLm1vdXN0YWNoZS5wb3NpdGlvbi55ID0gTWF0aC5jb3MoRGF0ZS5ub3coKSAqIDAuMDEpICogZGlzdGFuY2UgLyA0O1xuICAgIC8vIFNOT1IgT01IT09HLVJPVEFUSUVcbiAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDEpICogTWF0aC5QSSAqIDAuMDE7XG5cbiAgICAvL3RoaXMubW91dGguc2NhbGUueCA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAwNCkgKiBkaXN0YW5jZSAvIDI7XG5cbiAgICAvL1NORUxIRUlEIEhFRU4gRU4gV0VFUlxuICAgIHRoaXMubWVzaC5yb3RhdGlvbi55ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDAyKSAqIE1hdGguUEkgKiAwLjA1O1xuICAgIHRoaXMudXBkYXRlQm9keSgxMCwgZXllQmx1ZVJpZ2h0UG9zWCwgZXllQmx1ZUxlZnRQb3NYLCBleWVCbHVlUmlnaHRQb3NZLCBleWVCbHVlTGVmdFBvc1kpO1xuICB9XG5cbiAgQmVhcmQoKSB7XG5cbiAgICBsZXQgYmVhcmRHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICBsZXQgYmVhcmQxR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLCAxMCwgMTYpO1xuXG4gICAgbGV0IGJlYXJkMSA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkMUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgYmVhcmQxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDksIDAsIDApKTtcbiAgICBiZWFyZDEudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMS5nZW9tZXRyeSwgYmVhcmQxLm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQyID0gbmV3IFRIUkVFLk1lc2goYmVhcmQxR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDIuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oNywgLTIsIDIpKTtcbiAgICBiZWFyZDIuc2NhbGUueiA9IDAuODtcbiAgICBiZWFyZDIudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkMi5nZW9tZXRyeSwgYmVhcmQyLm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQzID0gYmVhcmQxLmNsb25lKCk7XG4gICAgYmVhcmQzLnBvc2l0aW9uLnggPSAtYmVhcmQxLnBvc2l0aW9uLng7XG4gICAgYmVhcmQzLnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDMuZ2VvbWV0cnksIGJlYXJkMy5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkNCA9IGJlYXJkMi5jbG9uZSgpO1xuICAgIGJlYXJkNC5wb3NpdGlvbi54ID0gLWJlYXJkMi5wb3NpdGlvbi54O1xuICAgIGJlYXJkNC51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ0Lmdlb21ldHJ5LCBiZWFyZDQubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDJHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDMsIDE0LCAxMCk7XG4gICAgYmVhcmQyR2VvbS52ZXJ0aWNlc1syXS56IC09IDI7XG4gICAgYmVhcmQyR2VvbS52ZXJ0aWNlc1s3XS56IC09IDI7XG5cbiAgICBsZXQgYmVhcmQ1ID0gbmV3IFRIUkVFLk1lc2goYmVhcmQyR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oNSwgLTUsIDQpKTtcbiAgICBiZWFyZDUudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkNS5nZW9tZXRyeSwgYmVhcmQ1Lm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQzR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLjUsIDE0LCAxMCk7XG4gICAgYmVhcmQzR2VvbS52ZXJ0aWNlc1syXS56IC09IDI7XG4gICAgYmVhcmQzR2VvbS52ZXJ0aWNlc1s3XS56IC09IDI7XG5cbiAgICBsZXQgYmVhcmQ2ID0gbmV3IFRIUkVFLk1lc2goYmVhcmQzR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDYuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMi41LCAtNiwgNikpO1xuICAgIGJlYXJkNi51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQ2Lmdlb21ldHJ5LCBiZWFyZDYubWF0cml4KTtcblxuICAgIGxldCBiZWFyZDcgPSBiZWFyZDUuY2xvbmUoKTtcbiAgICBiZWFyZDcucG9zaXRpb24ueCA9IC1iZWFyZDUucG9zaXRpb24ueDtcbiAgICBiZWFyZDcudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkNy5nZW9tZXRyeSwgYmVhcmQ3Lm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQ4ID0gYmVhcmQ2LmNsb25lKCk7XG4gICAgYmVhcmQ4LnBvc2l0aW9uLnggPSAtYmVhcmQ2LnBvc2l0aW9uLng7XG4gICAgYmVhcmQ4LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGJlYXJkR2VvbU1lcmdlZC5tZXJnZShiZWFyZDguZ2VvbWV0cnksIGJlYXJkOC5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkNEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMi41LCAxNC41LCAxMCk7XG4gICAgYmVhcmQ0R2VvbS52ZXJ0aWNlc1syXS56IC09IDE7XG4gICAgYmVhcmQ0R2VvbS52ZXJ0aWNlc1s3XS56IC09IDE7XG5cbiAgICBsZXQgYmVhcmQ5ID0gbmV3IFRIUkVFLk1lc2goYmVhcmQ0R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBiZWFyZDkuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTcsIDUuNzUpKTtcbiAgICBiZWFyZDkudXBkYXRlTWF0cml4KCk7XG4gICAgYmVhcmRHZW9tTWVyZ2VkLm1lcmdlKGJlYXJkOS5nZW9tZXRyeSwgYmVhcmQ5Lm1hdHJpeCk7XG5cbiAgICBsZXQgYmVhcmQ1R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg0LCA4LCA4KTtcbiAgICBsZXQgYmVhcmQxMCA9IG5ldyBUSFJFRS5NZXNoKGJlYXJkNUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgYmVhcmQxMC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtNiwgLTEsIC0yKSk7XG4gICAgYmVhcmQxMC51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQxMC5nZW9tZXRyeSwgYmVhcmQxMC5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkMTEgPSBuZXcgVEhSRUUuTWVzaChiZWFyZDVHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkMTEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTUsIC0yKSk7XG4gICAgYmVhcmQxMS51cGRhdGVNYXRyaXgoKTtcbiAgICBiZWFyZEdlb21NZXJnZWQubWVyZ2UoYmVhcmQxMS5nZW9tZXRyeSwgYmVhcmQxMS5tYXRyaXgpO1xuXG4gICAgbGV0IGJlYXJkTWVyZ2VkID0gbmV3IFRIUkVFLk1lc2goYmVhcmRHZW9tTWVyZ2VkLCBNYXQud2hpdGVNYXQpO1xuICAgIGJlYXJkTWVyZ2VkLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIGJlYXJkTWVyZ2VkLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgbGV0IG1vdXRoR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgNCwgMSk7XG4gICAgbGV0IG1vdXRoID0gbmV3IFRIUkVFLk1lc2gobW91dGhHZW9tLCBNYXQuYmxhY2tNYXQpO1xuICAgIG1vdXRoLnBvc2l0aW9uLnNldCgwLCAyLCA4KTtcbiAgICBtb3V0aC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgbW91dGgucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICBsZXQgdGVldGhHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEwLCAxLCAxKTtcbiAgICBsZXQgdGVldGggPSBuZXcgVEhSRUUuTWVzaCh0ZWV0aEdlb20sIE1hdC50ZWV0aE1hdCk7XG4gICAgdGVldGgucG9zaXRpb24uc2V0KDAsIDAuNSwgMC4xKTtcbiAgICB0ZWV0aC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGVldGgucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgbW91dGguYWRkKHRlZXRoKVxuXG4gICAgLy8gbGV0IHNtaWxlR2VvbSA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KDQsIDEuNSwgMiwgNiwgLU1hdGguUEkpO1xuICAgIC8vIHRoaXMuc21pbGUgPSBuZXcgVEhSRUUuTWVzaChzbWlsZUdlb20sIE1hdC5ibGFja01hdCk7XG4gICAgLy8gdGhpcy5zbWlsZS5wb3NpdGlvbi5zZXQoMCwgMiwgMTApO1xuICAgIC8vIHRoaXMuc21pbGUuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIC8vIHRoaXMuc21pbGUucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgLy9cbiAgICAvLyB0aGlzLmJlYXJkLmFkZChiZWFyZE1lcmdlZCwgbW91dGgsIHRoaXMuc21pbGUpO1xuICAgIHRoaXMuYmVhcmQuYWRkKGJlYXJkTWVyZ2VkLCBtb3V0aCk7XG5cbiAgICBsZXQgbW91c3RhY2hlR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxNCwgMywgMywgMyk7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1swXS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1sxXS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1syXS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1szXS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s0XS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s1XS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s2XS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s3XS55IC09IDI7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s4XS54IC09IDE7XG4gICAgbW91c3RhY2hlR2VvbS52ZXJ0aWNlc1s5XS54ICs9IDE7XG5cbiAgICBtb3VzdGFjaGVHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsIDQsIDApKTtcbiAgICB0aGlzLm1vdXN0YWNoZSA9IG5ldyBUSFJFRS5NZXNoKG1vdXN0YWNoZUdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgdGhpcy5tb3VzdGFjaGUuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgdGhpcy5tb3VzdGFjaGUucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICB0aGlzLm1vdXN0YWNoZS5wb3NpdGlvbi5zZXQoMCwgMCwgOSk7XG4gICAgdGhpcy5iZWFyZC5hZGQodGhpcy5tb3VzdGFjaGUpO1xuICB9XG5cbiAgR2xhc3NlcygpIHtcbiAgICAvL0dMQVNTRVNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB0aGlzLmdsYXNzZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmdsYXNzZXMucG9zaXRpb24uc2V0KDAsIDAsIDkpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5nbGFzc2VzKTtcbiAgICBsZXQgZ2xhc3Nlc01hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5nbGFzc2VzLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuXG5cbiAgICBsZXQgZnJhbWVHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICBsZXQgZnJhbWVPdXRlckdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgzLCAzLCAwLjUsIDMyKVxuICAgIGxldCBmcmFtZUlubmVyR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDIuNywgMi43LCAwLjUsIDMyKVxuXG4gICAgZnJhbWVPdXRlckdlb20uYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKC1NYXRoLlBJIC8gMikpO1xuICAgIGZyYW1lSW5uZXJHZW9tLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSSAvIDIpKTtcblxuICAgIGxldCBmcmFtZUJTUCA9IG5ldyBUaHJlZUJTUChmcmFtZU91dGVyR2VvbSk7XG4gICAgbGV0IGZyYW1lQ3V0QlNQID0gbmV3IFRocmVlQlNQKGZyYW1lSW5uZXJHZW9tKTtcblxuICAgIGxldCBmcmFtZWludGVyc2VjdGlvbkJTUCA9IGZyYW1lQlNQLnN1YnRyYWN0KGZyYW1lQ3V0QlNQKTtcbiAgICBsZXQgZnJhbWVMZWZ0ID0gZnJhbWVpbnRlcnNlY3Rpb25CU1AudG9NZXNoKGdsYXNzZXNNYXQpO1xuXG4gICAgZnJhbWVMZWZ0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDQsIDMsIDApKTtcbiAgICBmcmFtZUxlZnQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lTGVmdC5nZW9tZXRyeSwgZnJhbWVMZWZ0Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVSaWdodCA9IGZyYW1lTGVmdC5jbG9uZSgpO1xuICAgIGZyYW1lUmlnaHQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKE1hdGguUEkgLyAzMCkpO1xuICAgIGZyYW1lUmlnaHQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTcuNSwgLTAuMjUsIDApKTtcbiAgICBmcmFtZVJpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZVJpZ2h0Lmdlb21ldHJ5LCBmcmFtZVJpZ2h0Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVNaWRHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDIsIC4zLCAuNSk7XG4gICAgbGV0IGZyYW1lTWlkID0gbmV3IFRIUkVFLk1lc2goZnJhbWVNaWRHZW9tLCBnbGFzc2VzTWF0KTtcbiAgICBmcmFtZU1pZC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAzLjMsIC0wLjMpKTtcbiAgICBmcmFtZU1pZC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVNaWQuZ2VvbWV0cnksIGZyYW1lTWlkLm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVFbmRHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEuNSwgLjUsIDEpO1xuICAgIGxldCBmcmFtZUVuZFJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZnJhbWVFbmRHZW9tLCBnbGFzc2VzTWF0KTtcbiAgICBmcmFtZUVuZFJpZ2h0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDcuNSwgMywgMCkpO1xuICAgIGZyYW1lRW5kUmlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJhbWVHZW9tTWVyZ2VkLm1lcmdlKGZyYW1lRW5kUmlnaHQuZ2VvbWV0cnksIGZyYW1lRW5kUmlnaHQubWF0cml4KTtcblxuICAgIGxldCBmcmFtZUVuZExlZnQgPSBmcmFtZUVuZFJpZ2h0LmNsb25lKCk7XG4gICAgZnJhbWVFbmRMZWZ0LnBvc2l0aW9uLnggPSAtZnJhbWVFbmRSaWdodC5wb3NpdGlvbi54O1xuICAgIGZyYW1lRW5kTGVmdC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVFbmRMZWZ0Lmdlb21ldHJ5LCBmcmFtZUVuZExlZnQubWF0cml4KTtcblxuICAgIGxldCBmcmFtZVNwb2tlR2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAwLjUsIDEyKTtcbiAgICBsZXQgZnJhbWVTcG9rZVJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZnJhbWVTcG9rZUdlb20sIGdsYXNzZXNNYXQpO1xuICAgIGZyYW1lU3Bva2VSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbig4LCAzLCAtNS41KSk7XG4gICAgZnJhbWVTcG9rZVJpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyYW1lR2VvbU1lcmdlZC5tZXJnZShmcmFtZVNwb2tlUmlnaHQuZ2VvbWV0cnksIGZyYW1lU3Bva2VSaWdodC5tYXRyaXgpO1xuXG4gICAgbGV0IGZyYW1lU3Bva2VMZWZ0ID0gZnJhbWVTcG9rZVJpZ2h0LmNsb25lKCk7XG4gICAgZnJhbWVTcG9rZUxlZnQucG9zaXRpb24ueCA9IC1mcmFtZVNwb2tlUmlnaHQucG9zaXRpb24ueDtcbiAgICBmcmFtZVNwb2tlTGVmdC51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmFtZUdlb21NZXJnZWQubWVyZ2UoZnJhbWVTcG9rZUxlZnQuZ2VvbWV0cnksIGZyYW1lU3Bva2VMZWZ0Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJhbWVNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChmcmFtZUdlb21NZXJnZWQsIGdsYXNzZXNNYXQpO1xuICAgIGZyYW1lTWVyZ2VkLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBmcmFtZU1lcmdlZC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgIHRoaXMuZ2xhc3Nlcy5hZGQoZnJhbWVNZXJnZWQpO1xuXG4gIH1cblxuICBIYWlyKCkge1xuICAgIC8vSEFJUlxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgdGhpcy5oYWlyID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgdGhpcy5oYWlyLnBvc2l0aW9uLnNldCgwLCA5LCAwKTtcbiAgICB0aGlzLmhlYWQuYWRkKHRoaXMuaGFpcik7XG5cbiAgICBsZXQgaGFpckdlb21NZXJnZWQgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcblxuICAgIGxldCBoYWlyRmxhdEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTAsIDIsIDE4KTtcblxuICAgIGxldCBoYWlyMSA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyMS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyA0MCkpO1xuICAgIGhhaXIxLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC00LCAtMC41LCAwKSk7XG4gICAgaGFpcjEudXBkYXRlTWF0cml4KCk7XG4gICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjEuZ2VvbWV0cnksIGhhaXIxLm1hdHJpeCk7XG5cbiAgICBsZXQgaGFpcjIgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgaGFpcjIuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gMTApKTtcbiAgICBoYWlyMi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigtMiwgMSwgMCkpO1xuICAgIGhhaXIyLnVwZGF0ZU1hdHJpeCgpO1xuICAgIGhhaXJHZW9tTWVyZ2VkLm1lcmdlKGhhaXIyLmdlb21ldHJ5LCBoYWlyMi5tYXRyaXgpO1xuXG4gICAgbGV0IGhhaXIzID0gbmV3IFRIUkVFLk1lc2goaGFpckZsYXRHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGhhaXIzLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWigtTWF0aC5QSSAvIDUpKTtcbiAgICBoYWlyMy5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigyLCAxLCAwKSk7XG4gICAgaGFpcjMudXBkYXRlTWF0cml4KCk7XG4gICAgaGFpckdlb21NZXJnZWQubWVyZ2UoaGFpcjMuZ2VvbWV0cnksIGhhaXIzLm1hdHJpeCk7XG5cbiAgICBsZXQgaGFpcjQgPSBuZXcgVEhSRUUuTWVzaChoYWlyRmxhdEdlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgaGFpcjQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNCkpO1xuICAgIGhhaXI0LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDYsIDAsIDApKTtcbiAgICBoYWlyNC51cGRhdGVNYXRyaXgoKTtcbiAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyNC5nZW9tZXRyeSwgaGFpcjQubWF0cml4KTtcblxuICAgIGxldCBoYWlyNiA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBoYWlyNi5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooLU1hdGguUEkgLyAtMykpO1xuICAgIGhhaXI2LmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC03Ljc1LCAtLjUsIDApKTtcbiAgICBoYWlyNi51cGRhdGVNYXRyaXgoKTtcbiAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyNi5nZW9tZXRyeSwgaGFpcjYubWF0cml4KTtcblxuICAgIGxldCBoYWlyRmxhdEJhY2tHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDE4LCA3LCA2KTtcbiAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzBdLnggLT0gMTtcbiAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzFdLnggLT0gMTtcbiAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzRdLnggKz0gMTtcbiAgICBoYWlyRmxhdEJhY2tHZW9tLnZlcnRpY2VzWzVdLnggKz0gMTtcblxuICAgIGxldCBoYWlyNSA9IG5ldyBUSFJFRS5NZXNoKGhhaXJGbGF0QmFja0dlb20sIE1hdC53aGl0ZU1hdCk7XG4gICAgaGFpcjUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oMCwgLTQuNSwgLTYpKTtcbiAgICBoYWlyNS51cGRhdGVNYXRyaXgoKTtcbiAgICBoYWlyR2VvbU1lcmdlZC5tZXJnZShoYWlyNS5nZW9tZXRyeSwgaGFpcjUubWF0cml4KTtcblxuICAgIGxldCBoYWlyTWVyZ2VkID0gbmV3IFRIUkVFLk1lc2goaGFpckdlb21NZXJnZWQsIE1hdC53aGl0ZU1hdCk7XG4gICAgaGFpck1lcmdlZC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgaGFpck1lcmdlZC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgIHRoaXMuaGFpci5hZGQoaGFpck1lcmdlZCk7XG5cbiAgfVxuXG4gIEV5ZXMoKSB7XG5cbiAgICB0aGlzLmV5ZXMgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmV5ZXMucG9zaXRpb24uc2V0KDAsIDMsIDkpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5leWVzKTtcblxuICAgIGxldCBleWVXaGl0ZUdlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgyLjUsIDIuNSk7XG5cbiAgICBsZXQgZXllV2hpdGVSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVdoaXRlR2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICBleWVXaGl0ZVJpZ2h0LnBvc2l0aW9uLnNldCgtMy43NSwgMCwgMCk7XG4gICAgZXllV2hpdGVSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgZXllV2hpdGVSaWdodC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICBsZXQgZXllQmx1ZUdlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLjUsIDEuNSk7XG5cbiAgICBsZXQgZXllTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmV5ZSwgZmxhdFNoYWRpbmc6IHRydWV9KTtcblxuICAgIHRoaXMuZXllQmx1ZVJpZ2h0ID0gbmV3IFRIUkVFLk1lc2goZXllQmx1ZUdlb20sIGV5ZU1hdCk7XG4gICAgdGhpcy5leWVCbHVlUmlnaHQucG9zaXRpb24uc2V0KDAsIDAsIC4wMSk7XG4gICAgdGhpcy5leWVCbHVlUmlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIGV5ZVdoaXRlUmlnaHQuYWRkKHRoaXMuZXllQmx1ZVJpZ2h0KTtcblxuICAgIGxldCBleWVQdXBpbEdlb20gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLCAxKTtcblxuICAgIHRoaXMuZXllUHVwaWxSaWdodCA9IG5ldyBUSFJFRS5NZXNoKGV5ZVB1cGlsR2VvbSwgTWF0LmJsYWNrTWF0KTtcbiAgICB0aGlzLmV5ZVB1cGlsUmlnaHQucG9zaXRpb24uc2V0KDAsIDAsIC4wMik7XG4gICAgdGhpcy5leWVQdXBpbFJpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmV5ZVB1cGlsUmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5leWVCbHVlUmlnaHQuYWRkKHRoaXMuZXllUHVwaWxSaWdodCk7XG5cbiAgICBsZXQgZXllV2hpdGVMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZXllV2hpdGVHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIGV5ZVdoaXRlTGVmdC5wb3NpdGlvbi5zZXQoMy43NSwgMCwgMCk7XG4gICAgZXllV2hpdGVMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBleWVXaGl0ZUxlZnQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5leWVCbHVlTGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZUJsdWVHZW9tLCBleWVNYXQpO1xuICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24uc2V0KDAsIDAsIC4wMSk7XG4gICAgdGhpcy5leWVCbHVlTGVmdC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5leWVCbHVlTGVmdC5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICBleWVXaGl0ZUxlZnQuYWRkKHRoaXMuZXllQmx1ZUxlZnQpO1xuXG4gICAgdGhpcy5leWVQdXBpbExlZnQgPSBuZXcgVEhSRUUuTWVzaChleWVQdXBpbEdlb20sIE1hdC5ibGFja01hdCk7XG4gICAgdGhpcy5leWVQdXBpbExlZnQucG9zaXRpb24uc2V0KDAsIDAsIC4wMik7XG4gICAgdGhpcy5leWVQdXBpbExlZnQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuZXllUHVwaWxMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIHRoaXMuZXllQmx1ZUxlZnQuYWRkKHRoaXMuZXllUHVwaWxMZWZ0KTtcblxuICAgIHRoaXMuZXllcy5hZGQoZXllV2hpdGVSaWdodCwgZXllV2hpdGVMZWZ0KTtcbiAgfVxuXG4gIEV5ZUJyb3dzKCkge1xuICAgIHRoaXMuZXllQnJvd3MgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICB0aGlzLmV5ZUJyb3dzLnBvc2l0aW9uLnNldCgwLCA2LCA4KTtcbiAgICB0aGlzLmhlYWQuYWRkKHRoaXMuZXllQnJvd3MpO1xuXG4gICAgbGV0IGV5ZUJyb3dHZW9tID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDQsIDEsIDEpO1xuXG4gICAgdGhpcy5leWVCcm93UmlnaHQgPSBuZXcgVEhSRUUuTWVzaChleWVCcm93R2VvbSwgTWF0LndoaXRlTWF0KTtcbiAgICB0aGlzLmV5ZUJyb3dSaWdodC5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblooTWF0aC5QSSAvIDQ1KSk7XG4gICAgdGhpcy5leWVCcm93UmlnaHQucG9zaXRpb24uc2V0KC0zLjc1LCAwLCAwKTtcbiAgICB0aGlzLmV5ZUJyb3dSaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5leWVCcm93UmlnaHQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5leWVCcm93TGVmdCA9IG5ldyBUSFJFRS5NZXNoKGV5ZUJyb3dHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIHRoaXMuZXllQnJvd0xlZnQuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKC1NYXRoLlBJIC8gNDUpKTtcbiAgICB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnNldCgzLjc1LCAwLCAwKTtcbiAgICB0aGlzLmV5ZUJyb3dMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmV5ZUJyb3dMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIHRoaXMuZXllQnJvd3MuYWRkKHRoaXMuZXllQnJvd1JpZ2h0LCB0aGlzLmV5ZUJyb3dMZWZ0KTtcbiAgfVxuXG4gIEhhdCgpIHtcbiAgICB0aGlzLmhhdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMuaGF0LnBvc2l0aW9uLnNldCgtMC4yLCAxMSwgMi40KTtcbiAgICB0aGlzLmhlYWQuYWRkKHRoaXMuaGF0KTtcbiAgICBsZXQgaGF0TWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmhhdCwgZmxhdFNoYWRpbmc6IHRydWV9KTtcblxuXG4gICAgbGV0IGJhbmRHZW9tID0gbmV3IFRIUkVFLlRvcnVzR2VvbWV0cnkoOSwgMiwgMTYsIDEwMCk7XG4gICAgbGV0IGJpZ0NvbmVHZW9tID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMSwgMTEsIDEyLCAxNSk7XG4gICAgbGV0IHNtYWxsQ29uZUdlb20gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgwLjgsIDMsIDksIDMyKTtcbiAgICBsZXQgaGF0RGluZ2xlR2VvbSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxLjUsIDgsIDgpO1xuXG4gICAgdGhpcy5iYW5kID0gbmV3IFRIUkVFLk1lc2goYmFuZEdlb20sIE1hdC50ZWV0aE1hdCk7XG4gICAgdGhpcy5iYW5kLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWChNYXRoLlBJIC8gMikpO1xuICAgIHRoaXMuYmFuZC5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgdGhpcy5iYW5kLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmJhbmQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5iaWdDb25lID0gbmV3IFRIUkVFLk1lc2goYmlnQ29uZUdlb20sIGhhdE1hdCk7XG4gICAgdGhpcy5iaWdDb25lLnBvc2l0aW9uLnNldCgwLCA2LCAwKTtcbiAgICB0aGlzLmJpZ0NvbmUuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIHRoaXMuYmlnQ29uZS5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cbiAgICB0aGlzLnNtYWxsQ29uZSA9IG5ldyBUSFJFRS5NZXNoKHNtYWxsQ29uZUdlb20sIGhhdE1hdCk7XG4gICAgdGhpcy5zbWFsbENvbmUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25YKE1hdGguUEkgLyAyKSk7XG4gICAgdGhpcy5zbWFsbENvbmUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25ZKE1hdGguUEkgLyAyKSk7XG4gICAgdGhpcy5zbWFsbENvbmUuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlUm90YXRpb25aKE1hdGguUEkgLyAtOCkpO1xuICAgIHRoaXMuc21hbGxDb25lLnBvc2l0aW9uLnNldCg0LCA3LjgsIC0xKTtcbiAgICB0aGlzLnNtYWxsQ29uZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5zbWFsbENvbmUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5oYXREaW5nbGUgPSBuZXcgVEhSRUUuTWVzaChoYXREaW5nbGVHZW9tLCBNYXQud2hpdGVNYXQpO1xuICAgIHRoaXMuaGF0RGluZ2xlLnBvc2l0aW9uLnNldCg5LCA1LjUsIC0xKTtcbiAgICB0aGlzLmhhdERpbmdsZS5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5oYXREaW5nbGUucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5oYXQuYWRkKHRoaXMuYmFuZCwgdGhpcy5iaWdDb25lLCB0aGlzLnNtYWxsQ29uZSwgdGhpcy5oYXREaW5nbGUpO1xuICB9XG5cbiAgRnJlY2tsZXMoKSB7XG4gICAgdGhpcy5mcmVja2xlcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIHRoaXMuZnJlY2tsZXMucG9zaXRpb24uc2V0KDAsIDAsIDgpO1xuICAgIHRoaXMuaGVhZC5hZGQodGhpcy5mcmVja2xlcyk7XG5cbiAgICBsZXQgZnJlY2tsZXNHZW9tTWVyZ2VkID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cbiAgICBsZXQgZnJlY2tsZXNHZW9tID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMC41LCAwLjUpO1xuICAgIGxldCBmcmVja2xlc01hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmZyZWNrbGVzLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuXG4gICAgbGV0IGZyZWNrbGUxID0gbmV3IFRIUkVFLk1lc2goZnJlY2tsZXNHZW9tLCBmcmVja2xlc01hdCk7XG4gICAgZnJlY2tsZTEuYXBwbHlNYXRyaXgobmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLTUsIDAsIDAuMDEpKTtcbiAgICBmcmVja2xlMS51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTEuZ2VvbWV0cnksIGZyZWNrbGUxLm1hdHJpeCk7XG5cbiAgICBsZXQgZnJlY2tsZTIgPSBmcmVja2xlMS5jbG9uZSgpO1xuICAgIGZyZWNrbGUyLmFwcGx5TWF0cml4KG5ldyBUSFJFRS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKC0wLjUsIC0xLCAwKSk7XG4gICAgZnJlY2tsZTIudXBkYXRlTWF0cml4KCk7XG4gICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGUyLmdlb21ldHJ5LCBmcmVja2xlMi5tYXRyaXgpO1xuXG4gICAgbGV0IGZyZWNrbGUzID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICBmcmVja2xlMy5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigxLCAtMC41LCAwKSk7XG4gICAgZnJlY2tsZTMudXBkYXRlTWF0cml4KCk7XG4gICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGUzLmdlb21ldHJ5LCBmcmVja2xlMy5tYXRyaXgpO1xuXG4gICAgbGV0IGZyZWNrbGU0ID0gZnJlY2tsZTEuY2xvbmUoKTtcbiAgICBmcmVja2xlNC5wb3NpdGlvbi54ID0gLWZyZWNrbGUxLnBvc2l0aW9uLng7XG4gICAgZnJlY2tsZTQudXBkYXRlTWF0cml4KCk7XG4gICAgZnJlY2tsZXNHZW9tTWVyZ2VkLm1lcmdlKGZyZWNrbGU0Lmdlb21ldHJ5LCBmcmVja2xlNC5tYXRyaXgpO1xuICAgIGxldCBmcmVja2xlNSA9IGZyZWNrbGUyLmNsb25lKCk7XG4gICAgZnJlY2tsZTUucG9zaXRpb24ueCA9IC1mcmVja2xlMi5wb3NpdGlvbi54O1xuICAgIGZyZWNrbGU1LnVwZGF0ZU1hdHJpeCgpO1xuICAgIGZyZWNrbGVzR2VvbU1lcmdlZC5tZXJnZShmcmVja2xlNS5nZW9tZXRyeSwgZnJlY2tsZTUubWF0cml4KTtcbiAgICBsZXQgZnJlY2tsZTYgPSBmcmVja2xlMy5jbG9uZSgpO1xuICAgIGZyZWNrbGU2LnBvc2l0aW9uLnggPSAtZnJlY2tsZTMucG9zaXRpb24ueDtcbiAgICBmcmVja2xlNi51cGRhdGVNYXRyaXgoKTtcbiAgICBmcmVja2xlc0dlb21NZXJnZWQubWVyZ2UoZnJlY2tsZTYuZ2VvbWV0cnksIGZyZWNrbGU2Lm1hdHJpeCk7XG5cbiAgICBsZXQgZnJlY2tsZWRNZXJnZWQgPSBuZXcgVEhSRUUuTWVzaChmcmVja2xlc0dlb21NZXJnZWQsIGZyZWNrbGVzTWF0KTtcbiAgICBmcmVja2xlZE1lcmdlZC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgZnJlY2tsZWRNZXJnZWQucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG4gICAgdGhpcy5mcmVja2xlcy5hZGQoZnJlY2tsZWRNZXJnZWQpO1xuICB9XG5cbiAgRmVhdHVyZXMoKSB7XG4gICAgbGV0IGVhckdlb20gPSBuZXcgVEhSRUUuQm94QnVmZmVyR2VvbWV0cnkoMS41LCAzLCAxLjUpO1xuICAgIGxldCBza2luTWF0ID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuc2tpbiwgZmxhdFNoYWRpbmc6IHRydWV9KTtcbiAgICBsZXQgZWFyUmlnaHQgPSBuZXcgVEhSRUUuTWVzaChlYXJHZW9tLCBza2luTWF0KTtcbiAgICBlYXJSaWdodC5wb3NpdGlvbi5zZXQoLTguNSwgMSwgMyk7XG4gICAgZWFyUmlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xuICAgIGVhclJpZ2h0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIGxldCBlYXJMZWZ0ID0gbmV3IFRIUkVFLk1lc2goZWFyR2VvbSwgc2tpbk1hdCk7XG4gICAgZWFyTGVmdC5wb3NpdGlvbi5zZXQoOC41LCAxLCAzKTtcbiAgICBlYXJMZWZ0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBlYXJMZWZ0LnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIGxldCBub3NlR2VvbSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDEsIDIsIDQsIDQpO1xuICAgIGxldCBub3NlID0gbmV3IFRIUkVFLk1lc2gobm9zZUdlb20sIHNraW5NYXQpO1xuICAgIG5vc2Uuc2NhbGUuc2V0KC43NSwgMSwgMS4zKTtcbiAgICBub3NlLnBvc2l0aW9uLnNldCgwLCAxLCA4KTtcbiAgICBub3NlLmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICBub3NlLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuICAgIHRoaXMuaGVhZC5hZGQoZWFyUmlnaHQsIGVhckxlZnQsIG5vc2UpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvY2xhc3Nlcy9IZWFkLmpzIiwiaW1wb3J0IENvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG4vLyBsZXQgc2tpbk1hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLnNraW4sIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgZnJlY2tsZXNNYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5mcmVja2xlcywgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCBhdWJ1cm5NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5hdWJ1cm4sIGZsYXRTaGFkaW5nOiB0cnVlfSk7XG4vLyBsZXQgYnJvd25NYXQgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5icm93biwgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCBibGFja01hdCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmJsYWNrLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuLy8gbGV0IHdoaXRlTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtjb2xvcjogQ29sb3JzLndoaXRlLCBmbGF0U2hhZGluZzogdHJ1ZX0pO1xuLy8gbGV0IGV5ZXNNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuZXllcywgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCBiZWlnZU1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5iZWlnZSwgZmxhdFNoYWRpbmc6IHRydWV9KTtcbi8vIGxldCBub3JtYWxNYXQgPSBuZXcgVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsKHt9KTtcbmNvbnN0IE1hdGVyaWFscyA9IHtcbiAgLy9cInNraW5NYXRcIjogbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuc2tpbiwgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgLy9cImZyZWNrbGVzTWF0XCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLmZyZWNrbGVzLCBmbGF0U2hhZGluZzogdHJ1ZX0pLFxuICBcIndoaXRlTWF0XCI6IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogQ29sb3JzLndoaXRlLCBmbGF0U2hhZGluZzogdHJ1ZX0pLFxuICAvL1wiZ2xhc3Nlc01hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5nbGFzc2VzLCBmbGF0U2hhZGluZzogdHJ1ZX0pLFxuICBcInRlZXRoTWF0XCI6IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy50ZWV0aCwgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgXCJicm93bk1hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5icm93biwgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgXCJibGFja01hdFwiOiBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5ibGFjaywgZmxhdFNoYWRpbmc6IHRydWV9KSxcbiAgLy9cImV5ZU1hdFwiOiBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBDb2xvcnMuZXllLCBmbGF0U2hhZGluZzogdHJ1ZX0pLFxuICAvL1wiaGF0TWF0XCI6IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IENvbG9ycy5oYXQsIGZsYXRTaGFkaW5nOiB0cnVlfSksXG4gIFwibm9ybWFsTWF0XCI6IG5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwoe30pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXRlcmlhbHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvb2JqZWN0cy9NYXRlcmlhbHMuanMiLCIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIoZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXVxuXG4gICAgdmFyIGlzRGF0YVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICAgIH1cblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7IGJvZHk6IHRoaXMuX2JvZHlJbml0IH0pXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gICAgcmF3SGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSAnc3RhdHVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXMgOiAyMDBcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tQnl0ZSA9IHJlcXVpcmUoJy4vcmFuZG9tL3JhbmRvbS1ieXRlJyk7XG5cbmZ1bmN0aW9uIGVuY29kZShsb29rdXAsIG51bWJlcikge1xuICAgIHZhciBsb29wQ291bnRlciA9IDA7XG4gICAgdmFyIGRvbmU7XG5cbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgICAgc3RyID0gc3RyICsgbG9va3VwKCAoIChudW1iZXIgPj4gKDQgKiBsb29wQ291bnRlcikpICYgMHgwZiApIHwgcmFuZG9tQnl0ZSgpICk7XG4gICAgICAgIGRvbmUgPSBudW1iZXIgPCAoTWF0aC5wb3coMTYsIGxvb3BDb3VudGVyICsgMSApICk7XG4gICAgICAgIGxvb3BDb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9saWIvZW5jb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBIZWFkIGZyb20gJy4vY2xhc3Nlcy9IZWFkJztcbmltcG9ydCBDb2xvcnMgZnJvbSAnLi9vYmplY3RzL2NvbG9ycyc7XG5pbXBvcnQgQXVkaW8gZnJvbSAnLi9jbGFzc2VzL0F1ZGlvLmpzJztcbmltcG9ydCBoYW5kbGVTYXZlIGZyb20gJy4vb2JqZWN0cy9TYXZlJztcbmltcG9ydCBDYXJ0QVBJIGZyb20gJy4vbGliL2NhcnRBUEknO1xue1xuICBsZXQgc2NlbmUsY2FtZXJhLGZpZWxkT2ZWaWV3LGFzcGVjdFJhdGlvLG5lYXJQbGFuZSxmYXJQbGFuZSxIRUlHSFQsV0lEVEgsZ2xvYmFsTGlnaHQsc2hhZG93TGlnaHQsYmFja0xpZ2h0LGxpZ2h0LHJlbmRlcmVyLGNvbnRhaW5lcixjb250cm9scyxsb2FkZWQsaGVhZCxzdGFycyx3aW5kb3dIYWxmWCx3aW5kb3dIYWxmWSxjb2xvcixhdWRpbyxTcGVlY2hUZXh0O1xuXG4gIGNvbnN0IHNhdmVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc2F2ZWApO1xuXG4gIGxldCBtb3VzZVBvcyA9IHsgeDogMCwgeTogMH07XG5cbiAgbGV0IHN0YXJBcnJheSA9IFtdO1xuXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgLy8gY3JlYXRlIHNub3dcbiAgICBwYXJ0aWNsZXNKUy5sb2FkKCdwYXJ0aWNsZXMtanMnLCAnLi4vYXNzZXRzL3BhcnRpY2xlcy5qc29uJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrIC0gcGFydGljbGVzLmpzIGNvbmZpZyBsb2FkZWQnKTtcbiAgICB9KTtcblxuICAgIGNyZWF0ZVNjZW5lKCk7XG4gICAgY3JlYXRlTGlnaHRzKCk7XG5cbiAgICAvLyBoYW5kbGUgYXVkaW9cbiAgICBhdWRpbyA9IG5ldyBBdWRpbygpO1xuICAgIC8vIHNob3cgYW5kIGhhbmRsZSBoZWFkXG4gICAgaGVhZCA9IG5ldyBIZWFkKCk7XG4gICAgc2NlbmUuYWRkKGhlYWQubWVzaCk7XG5cbiAgICAvLyBzZW5kIG9iamVjdHMgdG8gc2F2ZSBvbiBjbGlja1xuICAgIHNhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhhdWRpby5ibG9iKTtcblxuICAgICAgaGFuZGxlU2F2ZSh7XG4gICAgICAgIHRleHQ6IGF1ZGlvLnR4dCxcbiAgICAgICAgLy8gc2VuZCBhdWRpb2Jsb2IgdG8gc2F2ZVxuICAgICAgICBibG9iOiBhdWRpby5ibG9iXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIGNvbnNvbGUubG9nKGNvbnRyb2xsZXJUZXh0KTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IGNvbnRyb2xsZXJUZXh0KHRoaXMuc2tpbiwgdGhpcy5mcmVja2xlcywgIHRoaXMuZXllLCB0aGlzLmdsYXNzZXMsIHRoaXMuaGF0KTtcbiAgICBjb25zdCBndWkgPSBuZXcgZGF0LkdVSSgpO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdza2luJykub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICBDb2xvcnMuc2tpbiA9IGNvbnRyb2xsZXIuc2tpbjtcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdmcmVja2xlcycpLm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgQ29sb3JzLmZyZWNrbGVzID0gY29udHJvbGxlci5mcmVja2xlcztcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdleWUnKS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIENvbG9ycy5leWUgPSBjb250cm9sbGVyLmV5ZTtcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdnbGFzc2VzJykub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICBDb2xvcnMuZ2xhc3NlcyA9IGNvbnRyb2xsZXIuZ2xhc3NlcztcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgZ3VpLmFkZENvbG9yKGNvbnRyb2xsZXIsICdoYXQnKS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIENvbG9ycy5oYXQgPSBjb250cm9sbGVyLmhhdDtcbiAgICAgIHNjZW5lLnJlbW92ZShoZWFkLm1lc2gpO1xuICAgICAgY3JlYXRlSGVhZCgpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHNjZW5lIGZvciBleHRlbnNpb25cbiAgICB3aW5kb3cuc2NlbmUgPSBzY2VuZTtcblxuICAgIGxvb3AoKTtcbiAgfTtcblxuICBjb25zdCBkZWMyaGV4ID0gKGkpID0+IHtcbiAgICB2YXIgcmVzdWx0ID0gXCIweDAwMDAwMFwiO1xuICAgIGlmIChpID49IDAgJiYgaSA8PSAxNSkge1xuICAgICAgcmVzdWx0ID0gXCIweDAwMDAwXCIgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9IGVsc2UgaWYgKGkgPj0gMTYgJiYgaSA8PSAyNTUpIHtcbiAgICAgIHJlc3VsdCA9IFwiMHgwMDAwXCIgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9IGVsc2UgaWYgKGkgPj0gMjU2ICYmIGkgPD0gNDA5NSkge1xuICAgICAgcmVzdWx0ID0gXCIweDAwMFwiICsgaS50b1N0cmluZygxNik7XG4gICAgfSBlbHNlIGlmIChpID49IDQwOTYgJiYgaSA8PSA2NTUzNSkge1xuICAgICAgcmVzdWx0ID0gXCIweDAwXCIgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9IGVsc2UgaWYgKGkgPj0gNjU1MzUgJiYgaSA8PSAxMDQ4NTc1KSB7XG4gICAgICByZXN1bHQgPSBcIjB4MFwiICsgaS50b1N0cmluZygxNik7XG4gICAgfSBlbHNlIGlmIChpID49IDEwNDg1NzUpIHtcbiAgICAgIHJlc3VsdCA9ICcweCcgKyBpLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gOCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjcmVhdGVTY2VuZSA9ICgpID0+IHs7XG4gICAgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgd2luZG93SGFsZlggPSBXSURUSCAvIDI7XG4gICAgd2luZG93SGFsZlkgPSBIRUlHSFQgLyAyO1xuXG4gICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICBhc3BlY3RSYXRpbyA9IFdJRFRIIC8gSEVJR0hUO1xuICAgIGZpZWxkT2ZWaWV3ID0gNTA7XG4gICAgbmVhclBsYW5lID0gMTtcbiAgICBmYXJQbGFuZSA9IDIwMDA7XG4gICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKGZpZWxkT2ZWaWV3LCBhc3BlY3RSYXRpbywgbmVhclBsYW5lLCBmYXJQbGFuZSk7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnggPSAwO1xuICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gNzA7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnkgPSAwO1xuXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7YWxwaGE6IHRydWUsIGFudGlhbGlhczogdHJ1ZX0pO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgOiAxKVxuICAgIHJlbmRlcmVyLnNldFNpemUoV0lEVEgsIEhFSUdIVCk7XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcblxuICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKVxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcblxuICB9XG5cbiAgY29uc3Qgb25XaW5kb3dSZXNpemUgPSAoKSA9PiB7XG4gICAgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgd2luZG93SGFsZlggPSBXSURUSCAvIDI7XG4gICAgd2luZG93SGFsZlkgPSBIRUlHSFQgLyAyO1xuICAgIHJlbmRlcmVyLnNldFNpemUoV0lEVEgsIEhFSUdIVCk7XG4gICAgY2FtZXJhLmFzcGVjdCA9IFdJRFRIIC8gSEVJR0hUO1xuICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gIH1cblxuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSBlID0+IHtcbiAgICBtb3VzZVBvcyA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgfVxuXG4gIGxldCBsb2FkZXJNYW5hZ2VyID0gbmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyKCk7XG5cbiAgY29uc3Qgb25TdGFydCA9ICh1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1N0YXJ0ZWQgbG9hZGluZyBmaWxlOiAnICsgdXJsICsgJy5cXG5Mb2FkZWQgJyArIGl0ZW1zTG9hZGVkICsgJyBvZiAnICsgaXRlbXNUb3RhbCArICcgZmlsZXMuJyk7XG4gIH1cblxuICBjb25zdCBvbkxvYWQgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRpbmcgY29tcGxldGUhJyk7XG4gICAgZmluaXNoZWRMb2FkaW5nKCk7XG4gIH1cblxuICBjb25zdCBvblByb2dyZXNzID0gKHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTG9hZGluZyBmaWxlOiAnICsgdXJsICsgJy5cXG5Mb2FkZWQgJyArIGl0ZW1zTG9hZGVkICsgJyBvZiAnICsgaXRlbXNUb3RhbCArICcgZmlsZXMuJyk7XG4gIH1cblxuICBjb25zdCBvbkVycm9yID0gKHVybCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdUaGVyZSB3YXMgYW4gZXJyb3IgbG9hZGluZyAnICsgdXJsKTtcbiAgfVxuXG4gIGNvbnN0IGZpbmlzaGVkTG9hZGluZyA9ICgpID0+IHtcbiAgICBsb2FkZWQgPSB0cnVlO1xuICB9XG5cbiAgY29uc3QgaGFuZGxlV2luZG93UmVzaXplID0gZSA9PiB7XG4gICAgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXSURUSCwgSEVJR0hUKTtcbiAgICBjYW1lcmEuYXNwZWN0ID0gV0lEVEggLyBIRUlHSFQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgfVxuXG4gIGxldCBpc01vYmlsZSA9IC9pUGhvbmV8QW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgY29uc3QgY3JlYXRlTGlnaHRzID0gKCkgPT4ge1xuXG4gICAgZ2xvYmFsTGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KDB4ZmZmZmZmLCAweDU1NTU1NSwgLjkpO1xuXG4gICAgc2hhZG93TGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgLjMpO1xuICAgIHNoYWRvd0xpZ2h0LnBvc2l0aW9uLnNldCgxMDAsIDI1MCwgMTc1KTtcbiAgICBzaGFkb3dMaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAvLyBzaGFkb3dMaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtMTUwO1xuICAgIC8vIHNoYWRvd0xpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSAxNTA7XG4gICAgLy8gc2hhZG93TGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSAxNTA7XG4gICAgLy8gc2hhZG93TGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSAtMTUwO1xuICAgIC8vIHNoYWRvd0xpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDE7XG4gICAgLy8gc2hhZG93TGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSAxMDAwO1xuXG4gICAgYmFja0xpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIC4yKTtcbiAgICBiYWNrTGlnaHQucG9zaXRpb24uc2V0KC0xMDAsIDIwMCwgMTUwKTtcbiAgICBiYWNrTGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgLy9iYWNrTGlnaHQucG9zaXRpb24uc2V0KDEwMCwgMTAwLCAtMjAwKTtcblxuICAgIGlmIChpc01vYmlsZSlcbiAgICAgIHNoYWRvd0xpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gc2hhZG93TGlnaHQuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMTAyNDtcbiAgICBpZiAoIWlzTW9iaWxlKVxuICAgICAgc2hhZG93TGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSBzaGFkb3dMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAyMDQ4O1xuXG4gICAgc2NlbmUuYWRkKGdsb2JhbExpZ2h0KTtcbiAgICBzY2VuZS5hZGQoc2hhZG93TGlnaHQpO1xuICAgIHNjZW5lLmFkZChiYWNrTGlnaHQpO1xuICAgIHNjZW5lLmFkZCggbmV3IFRIUkVFLkFtYmllbnRMaWdodCggMHhlYWRlYWQsIDAuMSApKTtcbiAgfVxuXG4gIC8vIGNsYXNzIFN0YXIge1xuICAvLyAgIGNvbnN0cnVjdG9yKCl7XG4gIC8vXG4gIC8vICAgU1RBUlxuICAvLyAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy8gICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgLy9cbiAgLy8gICBsZXQgcHRzID0gW10sXG4gIC8vICAgICBudW1QdHMgPSA1O1xuICAvLyAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUHRzICogMjsgaSsrKSB7XG4gIC8vICAgICBsZXQgbCA9IGkgJSAyID09IDFcbiAgLy8gICAgICAgPyAxXG4gIC8vICAgICAgIDogMjtcbiAgLy8gICAgIGxldCBhID0gaSAvIG51bVB0cyAqIE1hdGguUEk7XG4gIC8vICAgICBwdHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihNYXRoLmNvcyhhKSAqIGwsIE1hdGguc2luKGEpICogbCkpO1xuICAvLyAgIH1cbiAgLy8gICBsZXQgc3RhclNoYXBlID0gbmV3IFRIUkVFLlNoYXBlKHB0cyk7XG4gIC8vXG4gIC8vICAgbGV0IGV4dHJ1ZGVTZXR0aW5ncyA9IHtcbiAgLy8gICAgIGFtb3VudDogMC41LFxuICAvLyAgICAgc3RlcHM6IDEsXG4gIC8vICAgICBiZXZlbEVuYWJsZWQ6IGZhbHNlXG4gIC8vICAgfTtcbiAgLy8gICBsZXQgc3Rhckdlb20gPSBuZXcgVEhSRUUuRXh0cnVkZUdlb21ldHJ5KHN0YXJTaGFwZSwgZXh0cnVkZVNldHRpbmdzKTtcbiAgLy8gICBsZXQgc3RhciA9IG5ldyBUSFJFRS5NZXNoKHN0YXJHZW9tLCB5ZWxsb3dNYXQpO1xuICAvLyAgIHN0YXIucm90YXRpb24ueCA9IE1hdGguUEkgLyAyO1xuICAvLyAgIHRoaXMubWVzaC5hZGQoc3Rhcik7XG4gIC8vIH1cbiAgLy8gfVxuICAvL1xuICAvLyBsZXQgU3RhcnNHcm91cCA9IGZ1bmN0aW9uKCkge1xuICAvL1xuICAvLyAgICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gIC8vXG4gIC8vICAgICB0aGlzLm5TdGFycyA9IDE1O1xuICAvL1xuICAvLyAgICAgbGV0IHN0ZXBBbmdsZSA9IE1hdGguUEkgKiAyIC8gdGhpcy5uU3RhcnM7XG4gIC8vXG4gIC8vICAgICAgQ3JlYXRlIHRoZSBTdGFyc1xuICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5TdGFyczsgaSsrKSB7XG4gIC8vXG4gIC8vICAgICAgIHRoaXMucyA9IG5ldyBTdGFyKCk7XG4gIC8vICAgICAgIGxldCBhID0gc3RlcEFuZ2xlICogaTtcbiAgLy8gICAgICAgbGV0IHIgPSAxNTtcbiAgLy9cbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueSA9IE1hdGguc2luKGEpICogcjtcbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueCA9IE1hdGguY29zKGEpICogcjtcbiAgLy9cbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucm90YXRpb24ueiA9IGEgKyBNYXRoLlBJIC8gMjtcbiAgLy8gICAgICAgdGhpcy5zLm1lc2gucG9zaXRpb24ueiA9IDAgLSBNYXRoLnJhbmRvbSgpICogMztcbiAgLy9cbiAgLy8gICAgICAgICByYW5kb20gc2NhbGUgZm9yIGVhY2ggY2xvdWRcbiAgLy8gICAgICAgbGV0IHNjID0gMC41ICsgTWF0aC5yYW5kb20oKSAqIC42O1xuICAvLyAgICAgICB0aGlzLnMubWVzaC5zY2FsZS5zZXQoc2MsIHNjLCBzYyk7XG4gIC8vXG4gIC8vICAgICAgIHRoaXMubWVzaC5hZGQodGhpcy5zLm1lc2gpO1xuICAvLyAgICAgICBzdGFyQXJyYXkucHVzaCh0aGlzLnMpO1xuICAvLyAgICAgfVxuICAvLyAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcbiAgLy8gfVxuXG4gIGNvbnN0IGNyZWF0ZUhlYWQgPSAoKSA9PiB7XG4gICAgaGVhZC5uYW1lID0gXCJIZWFkXCI7XG4gICAgaGVhZCA9IG5ldyBIZWFkKCk7XG4gICAgaGVhZC5pZGxlKCk7XG4gICAgc2NlbmUuYWRkKGhlYWQubWVzaCk7XG4gICAgLy9zdGFycyA9IG5ldyBTdGFyc0dyb3VwKCk7XG4gICAgLy9zY2VuZS5hZGQoc3RhcnMubWVzaCk7XG4gIH1cblxuICBjb25zdCBjcmVhdGVDaGFyYWN0ZXIgPSAoKSA9PiB7XG4gICAgY3JlYXRlSGVhZCgpO1xuICAgIGhlYWQubWVzaC5wb3NpdGlvbi5zZXQoMCwgMiwgMCk7XG4gICAgLy9zdGFycy5tZXNoLnBvc2l0aW9uLnNldCgwLCAxMCwgMCk7XG4gIH1cblxuICAvL0JMSU5LXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGxldCBpc0JsaW5raW5nID0gZmFsc2U7XG4gIGNvbnN0IGJsaW5rTG9vcCA9ICgpID0+IHtcbiAgICBpc0JsaW5raW5nID0gZmFsc2U7XG5cbiAgICBpZiAoKCFpc0JsaW5raW5nKSAmJiAoTWF0aC5yYW5kb20oKSA+IDAuOTkpKSB7XG4gICAgICBpc0JsaW5raW5nID0gdHJ1ZTtcbiAgICAgIGJsaW5rKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYmxpbmsgPSAoKSA9PiB7XG4gICAgaGVhZC5leWVzLnNjYWxlLnkgPSAxO1xuICAgIFR3ZWVuTWF4LnRvKGhlYWQuZXllcy5zY2FsZSwgLjA3LCB7XG4gICAgICB5OiAwLFxuICAgICAgeW95bzogdHJ1ZSxcbiAgICAgIHJlcGVhdDogMSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpc0JsaW5raW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvL0hFQUQgQU5JTUFUSU9OU1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8vIEhlYWQucHJvdG90eXBlLmRpenp5ID0gZnVuY3Rpb24oKSB7XG4gIC8vXG4gIC8vICAgICBsZXQgZGlzdGFuY2UgPSAxO1xuICAvL1xuICAvLyAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnogPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDE7XG4gIC8vICAgICB0aGlzLmhlYWQucm90YXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAxKSAqIE1hdGguUEkgKiAwLjAxO1xuICAvLyAgICAgdGhpcy5oZWFkLnJvdGF0aW9uLnkgPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDUpICogTWF0aC5QSSAqIDAuMDE7XG4gIC8vXG4gIC8vICAgICB0aGlzLmV5ZUJsdWVSaWdodC5wb3NpdGlvbi54ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIC1kaXN0YW5jZTtcbiAgLy8gICAgIHRoaXMuZXllQmx1ZUxlZnQucG9zaXRpb24ueCA9IE1hdGguc2luKERhdGUubm93KCkgKiAwLjAwNSkgKiBkaXN0YW5jZTtcbiAgLy8gICAgIHRoaXMuZXllQmx1ZVJpZ2h0LnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDUpICogLWRpc3RhbmNlO1xuICAvLyAgICAgdGhpcy5leWVCbHVlTGVmdC5wb3NpdGlvbi55ID0gTWF0aC5jb3MoRGF0ZS5ub3coKSAqIDAuMDA1KSAqIGRpc3RhbmNlO1xuICAvLyAgICAgdGhpcy5leWVCcm93UmlnaHQucG9zaXRpb24ueSA9IE1hdGguY29zKERhdGUubm93KCkgKiAwLjAwNSkgKiAtZGlzdGFuY2U7XG4gIC8vICAgICB0aGlzLmV5ZUJyb3dMZWZ0LnBvc2l0aW9uLnkgPSBNYXRoLmNvcyhEYXRlLm5vdygpICogMC4wMDUpICogZGlzdGFuY2U7XG4gIC8vXG4gIC8vICAgICB0aGlzLm1vdXN0YWNoZS5yb3RhdGlvbi56ID0gTWF0aC5zaW4oRGF0ZS5ub3coKSAqIDAuMDA1KSAqIE1hdGguUEkgKiAwLjA1O1xuICAvL1xuICAvLyAgICAgYmxpbmtMb29wKCk7XG4gIC8vICAgICBzdGFycy5zcGluU2NhbGUoKTtcbiAgLy9cbiAgLy8gICB9XG5cbiAgLy9TVEFSR1JPVVBcbiAgLy8gU3RhcnNHcm91cC5wcm90b3R5cGUuc3BpblNjYWxlID0gZnVuY3Rpb24oKSB7XG4gIC8vXG4gIC8vICAgICB0aGlzLm1lc2gucm90YXRpb24ueiArPSAwLjAyO1xuICAvL1xuICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgLy8gICAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnggPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMSkgKiBNYXRoLlBJICogMC4xIDtcbiAgLy8gICAgICAgc3RhckFycmF5W2ldLm1lc2gucm90YXRpb24ueiArPSAwIC0gTWF0aC5yYW5kb20oKSAqIDAuMTU7XG4gIC8vICAgICAgIHN0YXJBcnJheVtpXS5tZXNoLnJvdGF0aW9uLnggKz0gMCAtIE1hdGgucmFuZG9tKCkgKiAwLjA1O1xuICAvL1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICBjbGFzcyBjb250cm9sbGVyVGV4dCB7XG4gICAgY29uc3RydWN0b3IgKCl7XG4gICAgICB0aGlzLnNraW4gPSBDb2xvcnMuc2tpbjtcbiAgICAgIHRoaXMuZnJlY2tsZXMgPSBDb2xvcnMuZnJlY2tsZXM7XG4gICAgICB0aGlzLmV5ZSA9IENvbG9ycy5leWU7XG4gICAgICB0aGlzLmdsYXNzZXMgPSBDb2xvcnMuZ2xhc3NlcztcbiAgICAgIHRoaXMuaGF0ID0gQ29sb3JzLmhhdDtcbiAgICB9XG4gIH1cblxuICBjb25zdCBsb29wID0gKCkgPT4ge1xuICAgIGJsaW5rTG9vcCgpO1xuICAgIC8vaGVhZC5kaXp6eSgpO1xuICAgIGxldCB4VGFyZ2V0ID0gKG1vdXNlUG9zLnggLSB3aW5kb3dIYWxmWCk7XG4gICAgbGV0IHlUYXJnZXQgPSAobW91c2VQb3MueSAtIHdpbmRvd0hhbGZZKTtcblxuICAgIC8vY29uc29sZS5sb2coeFRhcmdldCk7XG5cbiAgICBoZWFkLmlkbGUoeFRhcmdldCwgeVRhcmdldCk7XG4gICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgfVxuXG4gIC8vd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0LCBmYWxzZSk7XG5cbiAgaW5pdCgpO1xuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc2NyaXB0LmpzIiwidmFyIFNwZWVjaFJlY29nbml0aW9uID0gU3BlZWNoUmVjb2duaXRpb24gfHwgd2Via2l0U3BlZWNoUmVjb2duaXRpb25cbnZhciBTcGVlY2hHcmFtbWFyTGlzdCA9IFNwZWVjaEdyYW1tYXJMaXN0IHx8IHdlYmtpdFNwZWVjaEdyYW1tYXJMaXN0XG52YXIgU3BlZWNoUmVjb2duaXRpb25FdmVudCA9IFNwZWVjaFJlY29nbml0aW9uRXZlbnQgfHwgd2Via2l0U3BlZWNoUmVjb2duaXRpb25FdmVudFxuY29uc3QgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xuXG5sZXQgYXVkaW9DdHgsIHJlY29nbml0aW9uO1xubGV0IHRyYW5zY3JpcHQgPSBcIlwiO1xubGV0IGF1ZGlvQ2h1bmtzID0gW107XG5sZXQgc291cmNlO1xuXG5jb25zdCAkdGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBmaWVsZGApO1xuY29uc3QgJHJlY29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZWNvcmRgKTtcbmNvbnN0ICRhdWRpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBhdWRpb19jb250cm9sc2ApO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdWRpbyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIGhhbmRsZSBTcGVlY2hSZWNvZ25pdGlvblxuICAgIHJlY29nbml0aW9uID0gbmV3IFNwZWVjaFJlY29nbml0aW9uKCk7XG4gICAgdGhpcy5zcGVlY2hTZXR0aW5ncygpO1xuXG4gICAgcmVjb2duaXRpb24ub25yZXN1bHQgPSBldmVudCA9PiB0aGlzLmdvdFJlc3VsdChldmVudCk7XG4gICAgcmVjb2duaXRpb24ub25zcGVlY2hlbmQgPSBlID0+IHRoaXMub25TcGVlY2hFbmQoZSk7XG4gICAgJHRleHQuYWRkRXZlbnRMaXN0ZW5lcihgYmx1cmAsICgpID0+IHRoaXMudHh0ID0gJHRleHQudmFsdWUpO1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoeyBhdWRpbzogdHJ1ZSB9KVxuICAgIC50aGVuKHN0cmVhbSA9PiB7XG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcihzdHJlYW0pO1xuXG4gICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tU3RhcnQgUmVjb3JkaW5nLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgICAgJHJlY29yZC5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsICgpID0+IHtcbiAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5zdGFydCgpO1xuICAgICAgICAgcmVjb2duaXRpb24uc3RhcnQoKTtcbiAgICAgICAgICRyZWNvcmQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuYWRkRXZlbnRMaXN0ZW5lcihgZGF0YWF2YWlsYWJsZWAsICBlID0+IGF1ZGlvQ2h1bmtzLnB1c2goZS5kYXRhKSk7IC8vIGFkZCBhdWRpb2NodW5rIHRvIGFycmF5XG5cbiAgICAgIC8vIHdoZW4gbWVkaWFSZWNvcmRlciBzdG9wcywgbWFrZSBhbmQgaGFuZGxlIGF1ZGlvIGJsb2JcbiAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5hZGRFdmVudExpc3RlbmVyKGBzdG9wYCwgKCkgPT4ge1xuXG4gICAgICAgIC8vIGdpdmUgbGluayB0byBhdWRpbyBjb250cm9scyB0byBwbGF5IGFuZCBjb250cm9sIHRoZSBzb3VuZFxuICAgICAgICB0aGlzLmJsb2IgPSBuZXcgQmxvYihhdWRpb0NodW5rcywge3R5cGUgOiAnYXVkaW8vb2dnJ30pOyAvLyBjcmVhdGUgYmxvYiBmcm9tIGF1ZGlvY2h1bmtzXG4gICAgICAgIGNvbnN0IGJsb2JVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMuYmxvYik7IC8vIG1ha2UgdXJsIGZyb20gYmxvYiBzdHJlYW1cbiAgICAgICAgJGF1ZGlvLnNyYyA9IGJsb2JVcmw7XG5cbiAgICAgICAgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGF1ZGlvQ3R4LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSgkYXVkaW8pOyAvLyBnZXQgYXVkaW8gZnJvbVxuICAgICAgICBjb25zdCBiaXF1YWRGaWx0ZXIgPSBhdWRpb0N0eC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTsgLy8gQ3JlYXRlIHRoZSBmaWx0ZXJcblxuXG5cblxuXG5cblxuXG4gICAgICAgIGNvbnN0ICRiaXF1YWRSYW5nZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBiaXF1YWRWYWx1ZWApO1xuICAgICAgICBjb25zdCAkYmlxdWFkVHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBiaXF1YWRUeXBlYCk7XG5cbiAgICAgICAgJGJpcXVhZFR5cGUuYWRkRXZlbnRMaXN0ZW5lcihgY2hhbmdlYCwgKCkgPT4ge1xuICAgICAgICAgIGJpcXVhZEZpbHRlci50eXBlID0gJGJpcXVhZFR5cGUudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJpcXVhZEZpbHRlci5mcmVxdWVuY3kudmFsdWUgPSAkYmlxdWFkUmFuZ2UudmFsdWU7XG5cbiAgICAgICAgJGJpcXVhZFJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoYGNoYW5nZWAsICgpID0+IHtcbiAgICAgICAgICBiaXF1YWRGaWx0ZXIuZnJlcXVlbmN5LnZhbHVlID0gJGJpcXVhZFJhbmdlLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBzb3VyY2UuY29ubmVjdChiaXF1YWRGaWx0ZXIpO1xuICAgICAgICBiaXF1YWRGaWx0ZXIuY29ubmVjdChhdWRpb0N0eC5kZXN0aW5hdGlvbik7XG5cbiAgICAgICAgYXVkaW9DaHVua3MgPSBbXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb25TcGVlY2hFbmQoZSnCoHtcbiAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RvcCgpO1xuICAgIHJlY29nbml0aW9uLnN0b3AoKTtcbiAgICAkcmVjb3JkLmRpc2FibGVkID0gZmFsc2U7XG4gICAgJHJlY29yZC50ZXh0Q29udGVudCA9ICdPcG5pZXV3IHByb2JlcmVuPyc7XG4gICAgdGhpcy50eHQgPSAkdGV4dC52YWx1ZTtcbiAgfVxuXG4gIGdvdFJlc3VsdChldmVudCkge1xuICAgIGNvbnN0IGxhc3QgPSBldmVudC5yZXN1bHRzLmxlbmd0aCAtIDE7XG4gICAgdHJhbnNjcmlwdCA9IGV2ZW50LnJlc3VsdHNbbGFzdF1bMF0udHJhbnNjcmlwdDtcbiAgICAkdGV4dC52YWx1ZSA9IHRyYW5zY3JpcHQ7XG4gIH1cblxuICBzcGVlY2hTZXR0aW5ncygpIHtcbiAgICByZWNvZ25pdGlvbi5jb250aW51b3VzID0gZmFsc2U7XG4gICAgcmVjb2duaXRpb24ubGFuZyA9ICdubC1CRSc7XG4gICAgcmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSBmYWxzZTtcbiAgICByZWNvZ25pdGlvbi5tYXhBbHRlcm5hdGl2ZXMgPSAxO1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2NsYXNzZXMvQXVkaW8uanMiLCJpbXBvcnQgQ2FydEFQSSBmcm9tICcuLi9saWIvY2FydEFQSSc7XG5pbXBvcnQgc2hvcnRpZCBmcm9tICdzaG9ydGlkJztcbmNvbnN0IG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbmFtZV9pbnB1dGApO1xuY29uc3QgbGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC51bmlxdWVfbGlua2ApO1xuXG5jb25zdCBoYW5kbGVTYXZlID0gKHt0ZXh0LCBibG9ifSkgPT4ge1xuICBjb25zdCBpZCA9IHNob3J0aWQuZ2VuZXJhdGUoKTtcbiAgY29uc29sZS5sb2cobmFtZS52YWx1ZSk7XG4gIENhcnRBUEkuY3JlYXRlKHtcbiAgICB0ZXh0LFxuICAgIGlkLFxuICAgIG5hbWU6IG5hbWUudmFsdWUsXG4gICAgYmxvYlxuICB9KTtcblxuICBsaW5rLmlubmVySFRNTCA9IGBodHRwczovL2xvY2FsaG9zdDo4MDgwL3NhbnRhLmh0bWw/aWQ9JHtpZH1gO1xuICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIGBodHRwczovL2xvY2FsaG9zdDo4MDgwL3NhbnRhLmh0bWw/aWQ9JHtpZH1gKTtcbiAgbGluay5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsIGBfYmxhbmtgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZVNhdmU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvb2JqZWN0cy9TYXZlLmpzIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9pbmRleCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSByZXF1aXJlKCcuL2FscGhhYmV0Jyk7XG52YXIgZW5jb2RlID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbnZhciBkZWNvZGUgPSByZXF1aXJlKCcuL2RlY29kZScpO1xudmFyIGJ1aWxkID0gcmVxdWlyZSgnLi9idWlsZCcpO1xudmFyIGlzVmFsaWQgPSByZXF1aXJlKCcuL2lzLXZhbGlkJyk7XG5cbi8vIGlmIHlvdSBhcmUgdXNpbmcgY2x1c3RlciBvciBtdWx0aXBsZSBzZXJ2ZXJzIHVzZSB0aGlzIHRvIG1ha2UgZWFjaCBpbnN0YW5jZVxuLy8gaGFzIGEgdW5pcXVlIHZhbHVlIGZvciB3b3JrZXJcbi8vIE5vdGU6IEkgZG9uJ3Qga25vdyBpZiB0aGlzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHdoZW4gdXNpbmcgdGhpcmRcbi8vIHBhcnR5IGNsdXN0ZXIgc29sdXRpb25zIHN1Y2ggYXMgcG0yLlxudmFyIGNsdXN0ZXJXb3JrZXJJZCA9IHJlcXVpcmUoJy4vdXRpbC9jbHVzdGVyLXdvcmtlci1pZCcpIHx8IDA7XG5cbi8qKlxuICogU2V0IHRoZSBzZWVkLlxuICogSGlnaGx5IHJlY29tbWVuZGVkIGlmIHlvdSBkb24ndCB3YW50IHBlb3BsZSB0byB0cnkgdG8gZmlndXJlIG91dCB5b3VyIGlkIHNjaGVtYS5cbiAqIGV4cG9zZWQgYXMgc2hvcnRpZC5zZWVkKGludClcbiAqIEBwYXJhbSBzZWVkIEludGVnZXIgdmFsdWUgdG8gc2VlZCB0aGUgcmFuZG9tIGFscGhhYmV0LiAgQUxXQVlTIFVTRSBUSEUgU0FNRSBTRUVEIG9yIHlvdSBtaWdodCBnZXQgb3ZlcmxhcHMuXG4gKi9cbmZ1bmN0aW9uIHNlZWQoc2VlZFZhbHVlKSB7XG4gICAgYWxwaGFiZXQuc2VlZChzZWVkVmFsdWUpO1xuICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNsdXN0ZXIgd29ya2VyIG9yIG1hY2hpbmUgaWRcbiAqIGV4cG9zZWQgYXMgc2hvcnRpZC53b3JrZXIoaW50KVxuICogQHBhcmFtIHdvcmtlcklkIHdvcmtlciBtdXN0IGJlIHBvc2l0aXZlIGludGVnZXIuICBOdW1iZXIgbGVzcyB0aGFuIDE2IGlzIHJlY29tbWVuZGVkLlxuICogcmV0dXJucyBzaG9ydGlkIG1vZHVsZSBzbyBpdCBjYW4gYmUgY2hhaW5lZC5cbiAqL1xuZnVuY3Rpb24gd29ya2VyKHdvcmtlcklkKSB7XG4gICAgY2x1c3RlcldvcmtlcklkID0gd29ya2VySWQ7XG4gICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vKipcbiAqXG4gKiBzZXRzIG5ldyBjaGFyYWN0ZXJzIHRvIHVzZSBpbiB0aGUgYWxwaGFiZXRcbiAqIHJldHVybnMgdGhlIHNodWZmbGVkIGFscGhhYmV0XG4gKi9cbmZ1bmN0aW9uIGNoYXJhY3RlcnMobmV3Q2hhcmFjdGVycykge1xuICAgIGlmIChuZXdDaGFyYWN0ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxwaGFiZXQuY2hhcmFjdGVycyhuZXdDaGFyYWN0ZXJzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxwaGFiZXQuc2h1ZmZsZWQoKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSB1bmlxdWUgaWRcbiAqIFJldHVybnMgc3RyaW5nIGlkXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICByZXR1cm4gYnVpbGQoY2x1c3RlcldvcmtlcklkKTtcbn1cblxuLy8gRXhwb3J0IGFsbCBvdGhlciBmdW5jdGlvbnMgYXMgcHJvcGVydGllcyBvZiB0aGUgZ2VuZXJhdGUgZnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGU7XG5tb2R1bGUuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xubW9kdWxlLmV4cG9ydHMuc2VlZCA9IHNlZWQ7XG5tb2R1bGUuZXhwb3J0cy53b3JrZXIgPSB3b3JrZXI7XG5tb2R1bGUuZXhwb3J0cy5jaGFyYWN0ZXJzID0gY2hhcmFjdGVycztcbm1vZHVsZS5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzLmlzVmFsaWQgPSBpc1ZhbGlkO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLy8gRm91bmQgdGhpcyBzZWVkLWJhc2VkIHJhbmRvbSBnZW5lcmF0b3Igc29tZXdoZXJlXG4vLyBCYXNlZCBvbiBUaGUgQ2VudHJhbCBSYW5kb21pemVyIDEuMyAoQykgMTk5NyBieSBQYXVsIEhvdWxlIChob3VsZUBtc2MuY29ybmVsbC5lZHUpXG5cbnZhciBzZWVkID0gMTtcblxuLyoqXG4gKiByZXR1cm4gYSByYW5kb20gbnVtYmVyIGJhc2VkIG9uIGEgc2VlZFxuICogQHBhcmFtIHNlZWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldE5leHRWYWx1ZSgpIHtcbiAgICBzZWVkID0gKHNlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xuICAgIHJldHVybiBzZWVkLygyMzMyODAuMCk7XG59XG5cbmZ1bmN0aW9uIHNldFNlZWQoX3NlZWRfKSB7XG4gICAgc2VlZCA9IF9zZWVkXztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmV4dFZhbHVlOiBnZXROZXh0VmFsdWUsXG4gICAgc2VlZDogc2V0U2VlZFxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL3JhbmRvbS9yYW5kb20tZnJvbS1zZWVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcnlwdG8gPSB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiAod2luZG93LmNyeXB0byB8fCB3aW5kb3cubXNDcnlwdG8pOyAvLyBJRSAxMSB1c2VzIHdpbmRvdy5tc0NyeXB0b1xuXG5mdW5jdGlvbiByYW5kb21CeXRlKCkge1xuICAgIGlmICghY3J5cHRvIHx8ICFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpICYgMHgzMDtcbiAgICB9XG4gICAgdmFyIGRlc3QgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGRlc3QpO1xuICAgIHJldHVybiBkZXN0WzBdICYgMHgzMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByYW5kb21CeXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2hvcnRpZC9saWIvcmFuZG9tL3JhbmRvbS1ieXRlLWJyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhbHBoYWJldCA9IHJlcXVpcmUoJy4vYWxwaGFiZXQnKTtcblxuLyoqXG4gKiBEZWNvZGUgdGhlIGlkIHRvIGdldCB0aGUgdmVyc2lvbiBhbmQgd29ya2VyXG4gKiBNYWlubHkgZm9yIGRlYnVnZ2luZyBhbmQgdGVzdGluZy5cbiAqIEBwYXJhbSBpZCAtIHRoZSBzaG9ydGlkLWdlbmVyYXRlZCBpZC5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGlkKSB7XG4gICAgdmFyIGNoYXJhY3RlcnMgPSBhbHBoYWJldC5zaHVmZmxlZCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IGNoYXJhY3RlcnMuaW5kZXhPZihpZC5zdWJzdHIoMCwgMSkpICYgMHgwZixcbiAgICAgICAgd29ya2VyOiBjaGFyYWN0ZXJzLmluZGV4T2YoaWQuc3Vic3RyKDEsIDEpKSAmIDB4MGZcbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL2RlY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5jb2RlID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbnZhciBhbHBoYWJldCA9IHJlcXVpcmUoJy4vYWxwaGFiZXQnKTtcblxuLy8gSWdub3JlIGFsbCBtaWxsaXNlY29uZHMgYmVmb3JlIGEgY2VydGFpbiB0aW1lIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiB0aGUgZGF0ZSBlbnRyb3B5IHdpdGhvdXQgc2FjcmlmaWNpbmcgdW5pcXVlbmVzcy5cbi8vIFRoaXMgbnVtYmVyIHNob3VsZCBiZSB1cGRhdGVkIGV2ZXJ5IHllYXIgb3Igc28gdG8ga2VlcCB0aGUgZ2VuZXJhdGVkIGlkIHNob3J0LlxuLy8gVG8gcmVnZW5lcmF0ZSBgbmV3IERhdGUoKSAtIDBgIGFuZCBidW1wIHRoZSB2ZXJzaW9uLiBBbHdheXMgYnVtcCB0aGUgdmVyc2lvbiFcbnZhciBSRURVQ0VfVElNRSA9IDE0NTk3MDc2MDY1MTg7XG5cbi8vIGRvbid0IGNoYW5nZSB1bmxlc3Mgd2UgY2hhbmdlIHRoZSBhbGdvcyBvciBSRURVQ0VfVElNRVxuLy8gbXVzdCBiZSBhbiBpbnRlZ2VyIGFuZCBsZXNzIHRoYW4gMTZcbnZhciB2ZXJzaW9uID0gNjtcblxuLy8gQ291bnRlciBpcyB1c2VkIHdoZW4gc2hvcnRpZCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgaW4gb25lIHNlY29uZC5cbnZhciBjb3VudGVyO1xuXG4vLyBSZW1lbWJlciB0aGUgbGFzdCB0aW1lIHNob3J0aWQgd2FzIGNhbGxlZCBpbiBjYXNlIGNvdW50ZXIgaXMgbmVlZGVkLlxudmFyIHByZXZpb3VzU2Vjb25kcztcblxuLyoqXG4gKiBHZW5lcmF0ZSB1bmlxdWUgaWRcbiAqIFJldHVybnMgc3RyaW5nIGlkXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkKGNsdXN0ZXJXb3JrZXJJZCkge1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gUkVEVUNFX1RJTUUpICogMC4wMDEpO1xuXG4gICAgaWYgKHNlY29uZHMgPT09IHByZXZpb3VzU2Vjb25kcykge1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY291bnRlciA9IDA7XG4gICAgICAgIHByZXZpb3VzU2Vjb25kcyA9IHNlY29uZHM7XG4gICAgfVxuXG4gICAgc3RyID0gc3RyICsgZW5jb2RlKGFscGhhYmV0Lmxvb2t1cCwgdmVyc2lvbik7XG4gICAgc3RyID0gc3RyICsgZW5jb2RlKGFscGhhYmV0Lmxvb2t1cCwgY2x1c3RlcldvcmtlcklkKTtcbiAgICBpZiAoY291bnRlciA+IDApIHtcbiAgICAgICAgc3RyID0gc3RyICsgZW5jb2RlKGFscGhhYmV0Lmxvb2t1cCwgY291bnRlcik7XG4gICAgfVxuICAgIHN0ciA9IHN0ciArIGVuY29kZShhbHBoYWJldC5sb29rdXAsIHNlY29uZHMpO1xuXG4gICAgcmV0dXJuIHN0cjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Nob3J0aWQvbGliL2J1aWxkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgYWxwaGFiZXQgPSByZXF1aXJlKCcuL2FscGhhYmV0Jyk7XG5cbmZ1bmN0aW9uIGlzU2hvcnRJZChpZCkge1xuICAgIGlmICghaWQgfHwgdHlwZW9mIGlkICE9PSAnc3RyaW5nJyB8fCBpZC5sZW5ndGggPCA2ICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJhY3RlcnMgPSBhbHBoYWJldC5jaGFyYWN0ZXJzKCk7XG4gICAgdmFyIGxlbiA9IGlkLmxlbmd0aDtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuO2krKykge1xuICAgICAgICBpZiAoY2hhcmFjdGVycy5pbmRleE9mKGlkW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Nob3J0SWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi9pcy12YWxpZC5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDA7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zaG9ydGlkL2xpYi91dGlsL2NsdXN0ZXItd29ya2VyLWlkLWJyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=