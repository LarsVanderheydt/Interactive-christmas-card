!function(e){function t(i){if(a[i])return a[i].exports;var r=a[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,i){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=26)}([function(e,t,a){"use strict";var i={skin:16769213,freckles:13613718,white:15330286,glasses:16368673,teeth:16777215,black:3026478,eye:6460840,hat:7471892};t.a=i},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=a(0),n=a(3),o=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),s=function(){function e(){i(this,e),this.mesh=new THREE.Object3D,this.mesh.name="Head";var t=new THREE.BoxBufferGeometry(16,16,16),a=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0});new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.head=new THREE.Mesh(t,a),this.head.castShadow=!0,this.head.receiveShadow=!1,this.mesh.add(this.head),this.beard=new THREE.Object3D,this.beard.position.y=-7,this.beard.position.z=.5,this.head.add(this.beard),this.Beard(),this.Glasses(),this.Hair(),this.Eyes(),this.EyeBrows(),this.Hat(),this.Freckles(),this.Features(),this.normalize(),this.mesh.position.x=-17}return o(e,[{key:"normalize",value:function(e,t,a,i,r){return i+(Math.max(Math.min(e,a),t)-t)/(a-t)*(r-i)}},{key:"updateBody",value:function(e,t,a,i,r,n,o){this.eyeBlueRight.position.x+=(t-this.eyeBlueRight.position.x)/e,this.eyeBlueLeft.position.x+=(a-this.eyeBlueLeft.position.x)/e,this.eyeBlueRight.position.y+=(i-this.eyeBlueRight.position.y)/e,this.eyeBlueLeft.position.y+=(r-this.eyeBlueLeft.position.y)/e,this.eyeBrowRight.position.y+=(n-this.eyeBrowRight.position.y)/e,this.eyeBrowLeft.position.y+=(o-this.eyeBrowLeft.position.y)/e}},{key:"idle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.head.rotation.z=Math.sin(.005*Date.now())*Math.PI*.005,this.head.rotation.x=Math.sin(.004*Date.now())*Math.PI*.03;var a=this.normalize(e,-200,200,-.6,.6),i=this.normalize(e,-200,200,-.6,.6),r=this.normalize(t,-200,200,.6,-.6),n=this.normalize(t,-200,200,.6,-.6),o=this.normalize(e,-200,200,-1,.8),s=this.normalize(e,-200,200,-1,.8);this.moustache.position.y=1*Math.cos(.01*Date.now())/4,this.moustache.rotation.z=Math.sin(.01*Date.now())*Math.PI*.01,this.mesh.rotation.y=Math.sin(.002*Date.now())*Math.PI*.05+.25,this.updateBody(10,a,i,r,n,o,s)}},{key:"Beard",value:function(){var e=new THREE.Geometry,t=new THREE.BoxGeometry(2,10,16),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeTranslation(9,0,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeTranslation(7,-2,2)),i.scale.z=.8,i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=a.clone();r.position.x=-a.position.x,r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=i.clone();o.position.x=-i.position.x,o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.BoxGeometry(3,14,10);s.vertices[2].z-=2,s.vertices[7].z-=2;var h=new THREE.Mesh(s,n.a.whiteMat);h.applyMatrix((new THREE.Matrix4).makeTranslation(5,-5,4)),h.updateMatrix(),e.merge(h.geometry,h.matrix);var d=new THREE.BoxGeometry(2.5,14,10);d.vertices[2].z-=2,d.vertices[7].z-=2;var l=new THREE.Mesh(d,n.a.whiteMat);l.applyMatrix((new THREE.Matrix4).makeTranslation(2.5,-6,6)),l.updateMatrix(),e.merge(l.geometry,l.matrix);var u=h.clone();u.position.x=-h.position.x,u.updateMatrix(),e.merge(u.geometry,u.matrix);var c=l.clone();c.position.x=-l.position.x,c.updateMatrix(),e.merge(c.geometry,c.matrix);var p=new THREE.BoxGeometry(2.5,14.5,10);p.vertices[2].z-=1,p.vertices[7].z-=1;var y=new THREE.Mesh(p,n.a.whiteMat);y.applyMatrix((new THREE.Matrix4).makeTranslation(0,-7,5.75)),y.updateMatrix(),e.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(4,8,8),w=new THREE.Mesh(f,n.a.whiteMat);w.applyMatrix((new THREE.Matrix4).makeTranslation(-6,-1,-2)),w.updateMatrix(),e.merge(w.geometry,w.matrix);var E=new THREE.Mesh(f,n.a.whiteMat);E.applyMatrix((new THREE.Matrix4).makeTranslation(0,-5,-2)),E.updateMatrix(),e.merge(E.geometry,E.matrix);var m=new THREE.Mesh(e,n.a.whiteMat);m.castShadow=!0,m.receiveShadow=!0;var v=new THREE.BoxGeometry(10,4,1),M=new THREE.Mesh(v,n.a.blackMat);M.position.set(0,2,8),M.castShadow=!1,M.receiveShadow=!0;var x=new THREE.BoxGeometry(10,1,1),T=new THREE.Mesh(x,n.a.teethMat);T.position.set(0,.5,.1),T.castShadow=!1,T.receiveShadow=!0,M.add(T),this.beard.add(m,M);var R=new THREE.BoxGeometry(14,3,3,3);R.vertices[0].y-=2,R.vertices[1].y-=2,R.vertices[2].y-=2,R.vertices[3].y-=2,R.vertices[4].y-=2,R.vertices[5].y-=2,R.vertices[6].y-=2,R.vertices[7].y-=2,R.vertices[8].x-=1,R.vertices[9].x+=1,R.applyMatrix((new THREE.Matrix4).makeTranslation(0,4,0)),this.moustache=new THREE.Mesh(R,n.a.whiteMat),this.moustache.castShadow=!0,this.moustache.receiveShadow=!0,this.moustache.position.set(0,0,9),this.beard.add(this.moustache)}},{key:"Glasses",value:function(){this.glasses=new THREE.Object3D,this.glasses.position.set(0,0,9),this.head.add(this.glasses);var e=new THREE.MeshPhongMaterial({color:r.a.glasses,flatShading:!0}),t=new THREE.Geometry,a=new THREE.CylinderGeometry(3,3,.5,32),i=new THREE.CylinderGeometry(2.7,2.7,.5,32);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2)),i.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var n=new ThreeBSP(a),o=new ThreeBSP(i),s=n.subtract(o),h=s.toMesh(e);h.applyMatrix((new THREE.Matrix4).makeTranslation(4,3,0)),h.updateMatrix(),t.merge(h.geometry,h.matrix);var d=h.clone();d.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/30)),d.applyMatrix((new THREE.Matrix4).makeTranslation(-7.5,-.25,0)),d.updateMatrix(),t.merge(d.geometry,d.matrix);var l=new THREE.BoxGeometry(2,.3,.5),u=new THREE.Mesh(l,e);u.applyMatrix((new THREE.Matrix4).makeTranslation(0,3.3,-.3)),u.updateMatrix(),t.merge(u.geometry,u.matrix);var c=new THREE.BoxGeometry(1.5,.5,1),p=new THREE.Mesh(c,e);p.applyMatrix((new THREE.Matrix4).makeTranslation(7.5,3,0)),p.updateMatrix(),t.merge(p.geometry,p.matrix);var y=p.clone();y.position.x=-p.position.x,y.updateMatrix(),t.merge(y.geometry,y.matrix);var f=new THREE.BoxGeometry(1,.5,12),w=new THREE.Mesh(f,e);w.applyMatrix((new THREE.Matrix4).makeTranslation(8,3,-5.5)),w.updateMatrix(),t.merge(w.geometry,w.matrix);var E=w.clone();E.position.x=-w.position.x,E.updateMatrix(),t.merge(E.geometry,E.matrix);var m=new THREE.Mesh(t,e);m.castShadow=!1,m.receiveShadow=!0,this.glasses.add(m)}},{key:"Hair",value:function(){this.hair=new THREE.Object3D,this.hair.position.set(0,9,0),this.head.add(this.hair);var e=new THREE.Geometry,t=new THREE.BoxGeometry(10,2,18),a=new THREE.Mesh(t,n.a.whiteMat);a.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/40)),a.applyMatrix((new THREE.Matrix4).makeTranslation(-4,-.5,0)),a.updateMatrix(),e.merge(a.geometry,a.matrix);var i=new THREE.Mesh(t,n.a.whiteMat);i.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/10)),i.applyMatrix((new THREE.Matrix4).makeTranslation(-2,1,0)),i.updateMatrix(),e.merge(i.geometry,i.matrix);var r=new THREE.Mesh(t,n.a.whiteMat);r.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/5)),r.applyMatrix((new THREE.Matrix4).makeTranslation(2,1,0)),r.updateMatrix(),e.merge(r.geometry,r.matrix);var o=new THREE.Mesh(t,n.a.whiteMat);o.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/4)),o.applyMatrix((new THREE.Matrix4).makeTranslation(6,0,0)),o.updateMatrix(),e.merge(o.geometry,o.matrix);var s=new THREE.Mesh(t,n.a.whiteMat);s.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/-3)),s.applyMatrix((new THREE.Matrix4).makeTranslation(-7.75,-.5,0)),s.updateMatrix(),e.merge(s.geometry,s.matrix);var h=new THREE.BoxGeometry(18,7,6);h.vertices[0].x-=1,h.vertices[1].x-=1,h.vertices[4].x+=1,h.vertices[5].x+=1;var d=new THREE.Mesh(h,n.a.whiteMat);d.applyMatrix((new THREE.Matrix4).makeTranslation(0,-4.5,-6)),d.updateMatrix(),e.merge(d.geometry,d.matrix);var l=new THREE.Mesh(e,n.a.whiteMat);l.castShadow=!1,l.receiveShadow=!0,this.hair.add(l)}},{key:"Eyes",value:function(){this.eyes=new THREE.Object3D,this.eyes.position.set(0,3,9),this.head.add(this.eyes);var e=new THREE.PlaneGeometry(2.5,2.5),t=new THREE.Mesh(e,n.a.whiteMat);t.position.set(-3.75,0,0),t.castShadow=!1,t.receiveShadow=!1;var a=new THREE.PlaneGeometry(1.5,1.5),i=new THREE.MeshPhongMaterial({color:r.a.eye,flatShading:!0});this.eyeBlueRight=new THREE.Mesh(a,i),this.eyeBlueRight.position.set(0,0,.01),this.eyeBlueRight.castShadow=!1,this.eyeBlueRight.receiveShadow=!1,t.add(this.eyeBlueRight);var o=new THREE.PlaneGeometry(1,1);this.eyePupilRight=new THREE.Mesh(o,n.a.blackMat),this.eyePupilRight.position.set(0,0,.02),this.eyePupilRight.castShadow=!1,this.eyePupilRight.receiveShadow=!1,this.eyeBlueRight.add(this.eyePupilRight);var s=new THREE.Mesh(e,n.a.whiteMat);s.position.set(3.75,0,0),s.castShadow=!1,s.receiveShadow=!1,this.eyeBlueLeft=new THREE.Mesh(a,i),this.eyeBlueLeft.position.set(0,0,.01),this.eyeBlueLeft.castShadow=!1,this.eyeBlueLeft.receiveShadow=!1,s.add(this.eyeBlueLeft),this.eyePupilLeft=new THREE.Mesh(o,n.a.blackMat),this.eyePupilLeft.position.set(0,0,.02),this.eyePupilLeft.castShadow=!1,this.eyePupilLeft.receiveShadow=!1,this.eyeBlueLeft.add(this.eyePupilLeft),this.eyes.add(t,s)}},{key:"EyeBrows",value:function(){this.eyeBrows=new THREE.Object3D,this.eyeBrows.position.set(0,6,8),this.head.add(this.eyeBrows);var e=new THREE.BoxGeometry(4,1,1);this.eyeBrowRight=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowRight.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/45)),this.eyeBrowRight.position.set(-3.75,0,0),this.eyeBrowRight.castShadow=!1,this.eyeBrowRight.receiveShadow=!1,this.eyeBrowLeft=new THREE.Mesh(e,n.a.whiteMat),this.eyeBrowLeft.applyMatrix((new THREE.Matrix4).makeRotationZ(-Math.PI/45)),this.eyeBrowLeft.position.set(3.75,0,0),this.eyeBrowLeft.castShadow=!1,this.eyeBrowLeft.receiveShadow=!1,this.eyeBrows.add(this.eyeBrowRight,this.eyeBrowLeft)}},{key:"Hat",value:function(){this.hat=new THREE.Object3D,this.hat.position.set(-.2,11,2.4),this.head.add(this.hat);var e=new THREE.MeshPhongMaterial({color:r.a.hat,flatShading:!0}),t=new THREE.TorusGeometry(9,2,16,100),a=new THREE.CylinderGeometry(1,11,12,15),i=new THREE.CylinderGeometry(.8,3,9,32),o=new THREE.SphereGeometry(1.5,8,8);this.band=new THREE.Mesh(t,n.a.teethMat),this.band.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.band.position.set(0,0,0),this.band.castShadow=!1,this.band.receiveShadow=!1,this.bigCone=new THREE.Mesh(a,e),this.bigCone.position.set(0,6,0),this.bigCone.castShadow=!1,this.bigCone.receiveShadow=!1,this.smallCone=new THREE.Mesh(i,e),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationX(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationY(Math.PI/2)),this.smallCone.applyMatrix((new THREE.Matrix4).makeRotationZ(Math.PI/-8)),this.smallCone.position.set(4,7.8,-1),this.smallCone.castShadow=!1,this.smallCone.receiveShadow=!1,this.hatDingle=new THREE.Mesh(o,n.a.whiteMat),this.hatDingle.position.set(9,5.5,-1),this.hatDingle.castShadow=!1,this.hatDingle.receiveShadow=!1,this.hat.add(this.band,this.bigCone,this.smallCone,this.hatDingle)}},{key:"Freckles",value:function(){this.freckles=new THREE.Object3D,this.freckles.position.set(0,0,8),this.head.add(this.freckles);var e=new THREE.MeshLambertMaterial({color:r.a.freckles,flatShading:!0}),t=new THREE.Geometry,a=new THREE.PlaneGeometry(.5,.5),i=new THREE.Mesh(a,e);i.applyMatrix((new THREE.Matrix4).makeTranslation(-5,0,.01)),i.updateMatrix(),t.merge(i.geometry,i.matrix);var n=i.clone();n.applyMatrix((new THREE.Matrix4).makeTranslation(-.5,-1,0)),n.updateMatrix(),t.merge(n.geometry,n.matrix);var o=i.clone();o.applyMatrix((new THREE.Matrix4).makeTranslation(1,-.5,0)),o.updateMatrix(),t.merge(o.geometry,o.matrix);var s=i.clone();s.position.x=-i.position.x,s.updateMatrix(),t.merge(s.geometry,s.matrix);var h=n.clone();h.position.x=-n.position.x,h.updateMatrix(),t.merge(h.geometry,h.matrix);var d=o.clone();d.position.x=-o.position.x,d.updateMatrix(),t.merge(d.geometry,d.matrix);var l=new THREE.Mesh(t,e);l.castShadow=!1,l.receiveShadow=!1,this.freckles.add(l)}},{key:"Features",value:function(){var e=new THREE.BoxBufferGeometry(1.5,3,1.5),t=new THREE.MeshLambertMaterial({color:r.a.skin,flatShading:!0}),a=new THREE.Mesh(e,t);a.position.set(-8.5,1,3),a.castShadow=!1,a.receiveShadow=!1;var i=new THREE.Mesh(e,t);i.position.set(8.5,1,3),i.castShadow=!1,i.receiveShadow=!1;var n=new THREE.CylinderGeometry(1,2,4,4),o=new THREE.Mesh(n,t);o.scale.set(.75,1,1.3),o.position.set(0,1,8),o.castShadow=!1,o.receiveShadow=!1,this.head.add(a,i,o)}},{key:"remove",value:function(){scene.remove(this.head)}},{key:"createHead",value:function(){this.head=new e,this.head.name="Head",this.head.idle(),scene.add(this.head.mesh)}}]),e}();t.a=s},function(e,t,a){a(4),e.exports=self.fetch.bind(self)},function(e,t,a){"use strict";var i=a(0),r={whiteMat:new THREE.MeshLambertMaterial({color:i.a.white,flatShading:!0}),teethMat:new THREE.MeshPhongMaterial({color:i.a.teeth,flatShading:!0}),blackMat:new THREE.MeshLambertMaterial({color:i.a.black,flatShading:!0}),normalMat:new THREE.MeshNormalMaterial({})};t.a=r},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!=typeof e&&(e=String(e)),e}function i(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return E.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function n(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function o(e){return new Promise(function(t,a){e.onload=function(){t(e.result)},e.onerror=function(){a(e.error)}})}function s(e){var t=new FileReader,a=o(t);return t.readAsArrayBuffer(e),a}function h(e){var t=new FileReader,a=o(t);return t.readAsText(e),a}function d(e){for(var t=new Uint8Array(e),a=new Array(t.length),i=0;i<t.length;i++)a[i]=String.fromCharCode(t[i]);return a.join("")}function l(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function u(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(E.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(E.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(E.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(E.arrayBuffer&&E.blob&&v(e))this._bodyArrayBuffer=l(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!E.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!M(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=l(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):E.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},E.blob&&(this.blob=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?n(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=n(this);if(e)return e;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(d(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},E.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(e){var t=e.toUpperCase();return x.indexOf(t)>-1?t:e}function p(e,t){t=t||{};var a=t.body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=c(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a)}function y(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var a=e.split("="),i=a.shift().replace(/\+/g," "),r=a.join("=").replace(/\+/g," ");t.append(decodeURIComponent(i),decodeURIComponent(r))}}),t}function f(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var a=e.split(":"),i=a.shift().trim();if(i){var r=a.join(":").trim();t.append(i,r)}}),t}function w(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var E={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(E.arrayBuffer)var m=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],v=function(e){return e&&DataView.prototype.isPrototypeOf(e)},M=ArrayBuffer.isView||function(e){return e&&m.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,i){e=t(e),i=a(i);var r=this.map[e];this.map[e]=r?r+","+i:i},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,i){this.map[t(e)]=a(i)},r.prototype.forEach=function(e,t){for(var a in this.map)this.map.hasOwnProperty(a)&&e.call(t,this.map[a],a,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,a){e.push(a)}),i(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),i(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,a){e.push([a,t])}),i(e)},E.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var x=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},u.call(p.prototype),u.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var T=[301,302,303,307,308];w.redirect=function(e,t){if(-1===T.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=p,e.Response=w,e.fetch=function(e,t){return new Promise(function(a,i){var r=new p(e,t),n=new XMLHttpRequest;n.onload=function(){var e={status:n.status,statusText:n.statusText,headers:f(n.getAllResponseHeaders()||"")};e.url="responseURL"in n?n.responseURL:e.headers.get("X-Request-URL");var t="response"in n?n.response:n.responseText;a(new w(t,e))},n.onerror=function(){i(new TypeError("Network request failed"))},n.ontimeout=function(){i(new TypeError("Network request failed"))},n.open(r.method,r.url,!0),"include"===r.credentials&&(n.withCredentials=!0),"responseType"in n&&E.blob&&(n.responseType="blob"),r.headers.forEach(function(e,t){n.setRequestHeader(t,e)}),n.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,a){"use strict";var i=a(2),r=a.n(i),n="/api/cards";t.a={create:function(e){var t=e.text,a=e.id,i=e.from,o=(e.blob,e.to),s=e.audioSettings,h=e.headColors,d=new FormData;return d.append("text",t),d.append("id",a),d.append("from",i),d.append("to",o),d.append("audioSettings",s),d.append("headColors",h),r()(n,{method:"POST",body:d}).then(function(e){return e.json()})},read:function(){return r()(n+"?isActive=true").then(function(e){return e.json()})},readOne:function(e){return r()(n+"/"+e,{method:"GET"}).then(function(e){return e.json()})},update:function(e){var t=e.text,a=e.id,i=e.from,o=e.to,s=e.audioSettings,h=e.headColors,d=new FormData;return d.append("text",t),d.append("id",a),d.append("from",i),d.append("to",o),d.append("audioSettings",s),d.append("headColors",h),r()(n+"/"+a,{method:"PUT",body:d}).then(function(e){return e.json()})}}},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=a(1),n=a(0),o=a(7),s=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),h=void 0,d=void 0,l=void 0,u=void 0,c=void 0,p=void 0,y=void 0,f=void 0,w=void 0,E=void 0,m=void 0,v=void 0,M=void 0,x=void 0,T=void 0,R=void 0,b=void 0,g={x:0,y:0},H=!1,S=(new THREE.LoadingManager,/iPhone|Android/i.test(navigator.userAgent)),B=function(){function e(){i(this,e),this.createScene(),this.createLights(),x=new r.a,h.add(x.mesh),window.scene=h}return s(e,[{key:"createShapes",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"hearts";b=new o.a(e),h.add(b.mesh)}},{key:"startSpinning",value:function(){b.spinScale()}},{key:"setColors",value:function(e){var t=JSON.parse(e.headColors);n.a.skin=t.skin,n.a.freckles=t.freckles,n.a.eye=t.eye,n.a.glasses=t.glasses,n.a.hat=t.hat,this.createHead()}},{key:"errorText",value:function(){var e=new THREE.FontLoader,t=new THREE.Object3D;e.load("/assets/helvetiker_bold.typeface.json",function(e){var a=new THREE.MeshLambertMaterial({color:15330286,flatShading:!0}),i={font:e,size:4,height:2,curveSegments:12,bevelEnabled:!1},r=new THREE.TextGeometry("404 Santa",i),n=new THREE.TextGeometry("went missing",i),o=new THREE.Mesh(r,a),s=new THREE.Mesh(n,a);t.add(o),t.add(s),o.position.y=5,o.position.x=4,t.position.y=-4,t.rotation.y=-.3,h.add(t)})}},{key:"createScene",value:function(){y=window.innerHeight,f=window.innerWidth,T=f/2,R=y/2,h=new THREE.Scene,u=f/y,l=50,c=1,p=2e3,d=new THREE.PerspectiveCamera(l,u,c,p),d.position.x=0,d.position.z=70,d.position.y=-5,v=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),v.setPixelRatio(window.devicePixelRatio?window.devicePixelRatio:1),v.setSize(f,y),v.shadowMap.enabled=!0,v.shadowMap.type=THREE.PCFSoftShadowMap,M=document.getElementById("container"),M.appendChild(v.domElement),window.addEventListener("resize",this.onWindowResize,!1),document.addEventListener("mousemove",this.handleMouseMove,!1)}},{key:"onWindowResize",value:function(){y=window.innerHeight,f=window.innerWidth/1.67,T=f/2,R=y/2,v.setSize(f,y),d.aspect=f/y,d.updateProjectionMatrix()}},{key:"handleMouseMove",value:function(e){g={x:event.clientX,y:event.clientY}}},{key:"handleWindowResize",value:function(e){y=window.innerHeight,f=window.innerWidth,v.setSize(f,y),d.aspect=f/y,d.updateProjectionMatrix()}},{key:"createLights",value:function(){w=new THREE.HemisphereLight(16777215,5592405,.9),E=new THREE.DirectionalLight(16777215,.3),E.position.set(100,250,175),E.castShadow=!0,m=new THREE.DirectionalLight(16777215,.2),m.position.set(-100,200,150),m.castShadow=!0,S&&(E.shadow.mapSize.width=E.shadow.mapSize.height=1024),S||(E.shadow.mapSize.width=E.shadow.mapSize.height=2048),h.add(w),h.add(E),h.add(m),h.add(new THREE.AmbientLight(15392429,.1))}},{key:"blinkLoop",value:function(){!(H=!1)&&Math.random()>.99&&(H=!0,this.blink())}},{key:"blink",value:function(){x.eyes.scale.y=1,TweenMax.to(x.eyes.scale,.07,{y:0,yoyo:!0,repeat:1,onComplete:function(){H=!1}})}},{key:"createHead",value:function(){h.remove(x.mesh),x.name="Head",x=new r.a,h.add(x.mesh)}},{key:"loop",value:function(){var e=g.x-T,t=g.y-R;this.blinkLoop(),x.idle(e,t),v.render(h,d)}}]),e}();t.a=B},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=(a(0),a(8)),n=a(9),o=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),s=[],h=function(){function e(t){i(this,e),this.mesh=new THREE.Object3D,this.nStars=15;for(var a=2*Math.PI/this.nStars,o=0;o<this.nStars;o++){switch(t){case"stars":this.s=new r.a;break;case"hearts":this.s=new n.a}var h=a*o;this.s.mesh.position.y=15*Math.sin(h),this.s.mesh.position.x=15*Math.cos(h),this.s.mesh.rotation.z=h+Math.PI/2,this.s.mesh.position.z=0-3*Math.random();var d=.5+.6*Math.random();this.s.mesh.scale.set(d,d,d),this.mesh.add(this.s.mesh),s.push(this.s)}this.mesh.rotation.x=Math.PI/2,this.mesh.position.x=-17,this.mesh.position.y=8}return o(e,[{key:"spinScale",value:function(){this.mesh.rotation.z+=.02;for(var e=0;e<s.length;e++)s[e].mesh.rotation.z+=0-.15*Math.random(),s[e].mesh.rotation.x+=0-.05*Math.random()}}]),e}();t.a=h},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=a(0),n=function e(){i(this,e),this.mesh=new THREE.Object3D;for(var t=[],a=0;a<10;a++){var n=a%2==1?1:2,o=a/5*Math.PI;t.push(new THREE.Vector2(Math.cos(o)*n,Math.sin(o)*n))}var s=new THREE.Shape(t),h={amount:.5,steps:1,bevelEnabled:!1},d=new THREE.ExtrudeGeometry(s,h),l=new THREE.MeshLambertMaterial({color:r.a.black,flatShading:!0}),u=new THREE.Mesh(d,l);u.rotation.x=Math.PI/2,this.mesh.add(u)};t.a=n},function(e,t,a){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),n=function(){function e(){i(this,e),this.mesh=new THREE.Object3D;var t=new THREE.Shape;t.moveTo(25,25),t.bezierCurveTo(25,25,20,0,0,0),t.bezierCurveTo(-30,0,-30,35,-30,35),t.bezierCurveTo(-30,55,-10,77,25,95),t.bezierCurveTo(60,77,80,55,80,35),t.bezierCurveTo(80,35,80,0,50,0),t.bezierCurveTo(35,0,25,25,25,25);var a={amount:20,bevelEnabled:!0,bevelSegments:2,steps:2,bevelSize:1,bevelThickness:1};this.addShape(t,a,16368673,0,0,0,0,1,Math.PI,.03)}return r(e,[{key:"addShape",value:function(e,t,a,i,r,n,o,s,h,d){var l=new THREE.ExtrudeGeometry(e,t),u=new THREE.Mesh(l,new THREE.MeshPhongMaterial({color:a}));u.position.set(i,r,n),u.rotation.set(o,s,h),u.scale.set(d,d,d),this.mesh.add(u)}}]),e}();t.a=n},,function(e,t,a){"use strict";var i=(a(1),window.AudioContext||window.webkitAudioContext),r=void 0,n=(document.getElementById("play_santa"),document.getElementById("audio")),o=void 0,s=!1,h=1,d=.5,l=function(e){r=new i;var t=JSON.parse(e.audioSettings);setTimeout(function(){new BufferLoader(r,["./uploads/"+e.id+".ogg"],function(e){var a=!1,i=void 0,l=document.getElementById("repeat");l.addEventListener("click",function(){l.style.backgroundColor=a?"rgba(113, 0, 24, 0.4)":"rgba(150, 0, 39, 1)",a=!a,s&&i.stop()}),h=t.pitch,d=t.overlap,n.addEventListener("click",function(){s=!0,i="",i=r.createBufferSource(),i.buffer=e[0],i.loop=a,i.connect(o),i.start()})}).load(),c()},1e3)},u=function(e,t,a){return e+(t-e)*a},c=function(){o&&o.disconnect(),r.createScriptProcessor?o=r.createScriptProcessor(512,1,1):r.createJavaScriptNode&&(o=r.createJavaScriptNode(512,1,1)),o.buffer=new Float32Array(1024),o.grainWindow=p(512),o.onaudioprocess=function(e){var t=e.inputBuffer.getChannelData(0),a=e.outputBuffer.getChannelData(0);for(r=0;r<t.length;r++)t[r]*=this.grainWindow[r],this.buffer[r]=this.buffer[r+512],this.buffer[r+512]=0;for(var i=new Float32Array(1024),r=0,n=0;r<512;r++,n+=h){var o=Math.floor(n)%512,s=t[o],l=t[(o+1)%512];i[r]+=u(s,l,n%1)*this.grainWindow[r]}for(r=0;r<512;r+=Math.round(512*(1-d)))for(n=0;n<=512;n++)this.buffer[r+n]+=i[n];for(r=0;r<512;r++)a[r]=this.buffer[r]},o.connect(r.destination)},p=function(e){for(var t=new Float32Array(e),a=0;a<e;a++)t[a]=.5*(1-Math.cos(2*Math.PI*a/(e-1)));return t};t.a=l},function(e,t,a){"use strict";var i=function(e){e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var t=new RegExp("[\\?&]"+e+"=([^&#]*)"),a=t.exec(location.search);return null!==a&&decodeURIComponent(a[1].replace(/\+/g," "))};t.a=i},,,,,,,,,,,,,,function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=(a(11),a(6)),r=(a(12),a(5),window.AudioContext||window.webkitAudioContext,void 0),n=function e(){r.loop(),r.startSpinning(),requestAnimationFrame(e)};!function(){particlesJS.load("particles-js","../assets/particles.json"),r=new i.a,r.errorText(),r.createShapes(),n()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,